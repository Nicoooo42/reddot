[["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\alert.service.spec.ts",{"fileContent":"import { inject, TestBed } from '@angular/core/testing';\nimport { TranslateModule, TranslateService, MissingTranslationHandler } from '@ngx-translate/core';\nimport { missingTranslationHandler } from '../../config/translation.config';\n\nimport { Alert, AlertService } from './alert.service';\n\ndescribe('Alert service test', () => {\n  describe('Alert Service Test', () => {\n    let extAlerts: Alert[];\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [\n          TranslateModule.forRoot({\n            missingTranslationHandler: {\n              provide: MissingTranslationHandler,\n              useFactory: missingTranslationHandler,\n            },\n          }),\n        ],\n      });\n      const translateService = TestBed.inject(TranslateService);\n      translateService.setDefaultLang('en');\n      jest.useFakeTimers();\n      extAlerts = [];\n    });\n\n    it('should produce a proper alert object and fetch it', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert({\n          type: 'success',\n          message: 'Hello Jhipster',\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        })\n      ).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a proper alert object and add it to external alert objects array', inject(\n      [AlertService],\n      (service: AlertService) => {\n        expect(\n          service.addAlert(\n            {\n              type: 'success',\n              message: 'Hello Jhipster',\n              timeout: 3000,\n              toast: true,\n              position: 'top left',\n            },\n            extAlerts\n          )\n        ).toEqual(\n          expect.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n\n        expect(extAlerts.length).toBe(1);\n        expect(extAlerts[0]).toEqual(\n          expect.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce an alert object with correct id', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster success' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n    }));\n\n    it('should close an alert correctly', inject([AlertService], (service: AlertService) => {\n      const alert0 = service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      const alert1 = service.addAlert({ type: 'info', message: 'Hello Jhipster info 2' });\n      const alert2 = service.addAlert({ type: 'success', message: 'Hello Jhipster success' });\n      expect(alert2).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(3);\n      alert1.close?.(service.get());\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).not.toEqual(\n        expect.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster info 2',\n          id: 1,\n        } as Alert)\n      );\n      alert2.close?.(service.get());\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).not.toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n      alert0.close?.(service.get());\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should close an alert on timeout correctly', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n\n      expect(service.get().length).toBe(1);\n\n      jest.advanceTimersByTime(6000);\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should clear alerts', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'danger', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'success', message: 'Hello Jhipster info' });\n      expect(service.get().length).toBe(3);\n      service.clear();\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a scoped alert', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert(\n          {\n            type: 'success',\n            message: 'Hello Jhipster',\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          },\n          []\n        )\n      ).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a success message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a success message with custom position', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster', position: 'bottom left' })).toEqual(\n        expect.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          position: 'bottom left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a error message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'danger', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'danger',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a warning message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'warning', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'warning',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a info message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'info', message: 'Hello Jhipster' })).toEqual(\n        expect.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a info message with translated message if key exists', inject(\n      [AlertService, TranslateService],\n      (service: AlertService, translateService: TranslateService) => {\n        translateService.setTranslation('en', {\n          'hello.jhipster': 'Translated message',\n        });\n        expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(\n          expect.objectContaining({\n            type: 'info',\n            message: 'Translated message',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce a info message with provided message if key does not exists', inject(\n      [AlertService, TranslateService],\n      (service: AlertService) => {\n        expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(\n          expect.objectContaining({\n            type: 'info',\n            message: 'Hello Jhipster',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce a info message with provided key if transltion key does not exist in translations and message is not provided', inject(\n      [AlertService, TranslateService],\n      (service: AlertService) => {\n        expect(service.addAlert({ type: 'info', translationKey: 'hello.jhipster' })).toEqual(\n          expect.objectContaining({\n            type: 'info',\n            message: 'hello.jhipster',\n          } as Alert)\n        );\n      }\n    ));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/alert.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\config\\translation.config.ts",{"fileContent":"import { HttpClient } from '@angular/common/http';\nimport { MissingTranslationHandler, MissingTranslationHandlerParams, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nexport const translationNotFoundMessage = 'translation-not-found';\n\nexport class MissingTranslationHandlerImpl implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    const key = params.key;\n    return `${translationNotFoundMessage}[${key}]`;\n  }\n}\n\nexport function translatePartialLoader(http: HttpClient): TranslateLoader {\n  return new TranslateHttpLoader(http, 'i18n/', `.json?_=${I18N_HASH}`);\n}\n\nexport function missingTranslationHandler(): MissingTranslationHandler {\n  return new MissingTranslationHandlerImpl();\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\alert.service.ts",{"fileContent":"import { Injectable, SecurityContext, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { translationNotFoundMessage } from 'app/config/translation.config';\n\nexport type AlertType = 'success' | 'danger' | 'warning' | 'info';\n\nexport interface Alert {\n  id?: number;\n  type: AlertType;\n  message?: string;\n  translationKey?: string;\n  translationParams?: { [key: string]: unknown };\n  timeout?: number;\n  toast?: boolean;\n  position?: string;\n  close?: (alerts: Alert[]) => void;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertService {\n  timeout = 5000;\n  toast = false;\n  position = 'top right';\n\n  // unique id for each alert. Starts from 0.\n  private alertId = 0;\n  private alerts: Alert[] = [];\n\n  constructor(private sanitizer: DomSanitizer, private ngZone: NgZone, private translateService: TranslateService) {}\n\n  clear(): void {\n    this.alerts = [];\n  }\n\n  get(): Alert[] {\n    return this.alerts;\n  }\n\n  /**\n   * Adds alert to alerts array and returns added alert.\n   * @param alert      Alert to add. If `timeout`, `toast` or `position` is missing then applying default value.\n   *                   If `translateKey` is available then it's translation else `message` is used for showing.\n   * @param extAlerts  If missing then adding `alert` to `AlertService` internal array and alerts can be retrieved by `get()`.\n   *                   Else adding `alert` to `extAlerts`.\n   * @returns  Added alert\n   */\n  addAlert(alert: Alert, extAlerts?: Alert[]): Alert {\n    alert.id = this.alertId++;\n\n    if (alert.translationKey) {\n      const translatedMessage = this.translateService.instant(alert.translationKey, alert.translationParams);\n      // if translation key exists\n      if (translatedMessage !== `${translationNotFoundMessage}[${alert.translationKey}]`) {\n        alert.message = translatedMessage;\n      } else if (!alert.message) {\n        alert.message = alert.translationKey;\n      }\n    }\n\n    alert.message = this.sanitizer.sanitize(SecurityContext.HTML, alert.message ?? '') ?? '';\n    alert.timeout = alert.timeout ?? this.timeout;\n    alert.toast = alert.toast ?? this.toast;\n    alert.position = alert.position ?? this.position;\n    alert.close = (alertsArray: Alert[]) => this.closeAlert(alert.id!, alertsArray);\n\n    (extAlerts ?? this.alerts).push(alert);\n\n    if (alert.timeout > 0) {\n      // Workaround protractor waiting for setTimeout.\n      // Reference https://www.protractortest.org/#/timeouts\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.ngZone.run(() => {\n            this.closeAlert(alert.id!, extAlerts ?? this.alerts);\n          });\n        }, alert.timeout);\n      });\n    }\n\n    return alert;\n  }\n\n  private closeAlert(alertId: number, extAlerts?: Alert[]): void {\n    const alerts = extAlerts ?? this.alerts;\n    const alertIndex = alerts.map(alert => alert.id).indexOf(alertId);\n    // if found alert then remove\n    if (alertIndex >= 0) {\n      alerts.splice(alertIndex, 1);\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\main\\main.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Router, RouterEvent, NavigationEnd, NavigationStart } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { Subject, of } from 'rxjs';\nimport { TranslateModule, TranslateService, LangChangeEvent } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { MainComponent } from './main.component';\n\ndescribe('MainComponent', () => {\n  let comp: MainComponent;\n  let fixture: ComponentFixture<MainComponent>;\n  let titleService: Title;\n  let translateService: TranslateService;\n  let mockAccountService: AccountService;\n  const routerEventsSubject = new Subject<RouterEvent>();\n  const routerState: any = { snapshot: { root: { data: {} } } };\n  class MockRouter {\n    events = routerEventsSubject;\n    routerState = routerState;\n  }\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [TranslateModule.forRoot()],\n        declarations: [MainComponent],\n        providers: [\n          Title,\n          AccountService,\n          {\n            provide: Router,\n            useClass: MockRouter,\n          },\n        ],\n      })\n        .overrideTemplate(MainComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MainComponent);\n    comp = fixture.componentInstance;\n    titleService = TestBed.inject(Title);\n    translateService = TestBed.inject(TranslateService);\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.identity = jest.fn(() => of(null));\n    mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n  });\n\n  describe('page title', () => {\n    const defaultPageTitle = 'global.title';\n    const parentRoutePageTitle = 'parentTitle';\n    const childRoutePageTitle = 'childTitle';\n    const navigationEnd = new NavigationEnd(1, '', '');\n    const navigationStart = new NavigationStart(1, '');\n    const langChangeEvent: LangChangeEvent = { lang: 'fr', translations: null };\n\n    beforeEach(() => {\n      routerState.snapshot.root = { data: {} };\n      jest.spyOn(translateService, 'get').mockImplementation((key: string | string[]) => of(`${key as string} translated`));\n      translateService.currentLang = 'fr';\n      jest.spyOn(titleService, 'setTitle');\n      comp.ngOnInit();\n    });\n\n    describe('navigation end', () => {\n      it('should set page title to default title if pageTitle is missing on routes', () => {\n        // WHEN\n        routerEventsSubject.next(navigationEnd);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');\n      });\n\n      it('should set page title to root route pageTitle if there is no child routes', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n\n        // WHEN\n        routerEventsSubject.next(navigationEnd);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');\n      });\n\n      it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n        routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };\n\n        // WHEN\n        routerEventsSubject.next(navigationEnd);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');\n      });\n\n      it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n        routerState.snapshot.root.firstChild = { data: {} };\n\n        // WHEN\n        routerEventsSubject.next(navigationEnd);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');\n      });\n    });\n\n    describe('navigation start', () => {\n      it('should not set page title on navigation start', () => {\n        // WHEN\n        routerEventsSubject.next(navigationStart);\n\n        // THEN\n        expect(titleService.setTitle).not.toHaveBeenCalled();\n      });\n    });\n\n    describe('language change', () => {\n      it('should set page title to default title if pageTitle is missing on routes', () => {\n        // WHEN\n        translateService.onLangChange.emit(langChangeEvent);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');\n      });\n\n      it('should set page title to root route pageTitle if there is no child routes', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n\n        // WHEN\n        translateService.onLangChange.emit(langChangeEvent);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');\n      });\n\n      it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n        routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };\n\n        // WHEN\n        translateService.onLangChange.emit(langChangeEvent);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');\n      });\n\n      it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {\n        // GIVEN\n        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };\n        routerState.snapshot.root.firstChild = { data: {} };\n\n        // WHEN\n        translateService.onLangChange.emit(langChangeEvent);\n\n        // THEN\n        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);\n        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');\n      });\n    });\n  });\n\n  describe('page language attribute', () => {\n    it('should change page language attribute on language change', () => {\n      // GIVEN\n      comp.ngOnInit();\n\n      // WHEN\n      translateService.onLangChange.emit({ lang: 'lang1', translations: null });\n\n      // THEN\n      expect(document.querySelector('html')?.getAttribute('lang')).toEqual('lang1');\n\n      // WHEN\n      translateService.onLangChange.emit({ lang: 'lang2', translations: null });\n\n      // THEN\n      expect(document.querySelector('html')?.getAttribute('lang')).toEqual('lang2');\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/main/main.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\auth\\account.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { Observable, ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\n\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account> | null;\n\n  constructor(\n    private translateService: TranslateService,\n    private sessionStorageService: SessionStorageService,\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(account: Account): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\n  }\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n    if (!identity) {\n      this.accountCache$ = null;\n    }\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(\n        tap((account: Account) => {\n          this.authenticate(account);\n\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          // unless user have choosed other language in the current session\n          if (!this.sessionStorageService.retrieve('locale')) {\n            this.translateService.use(account.langKey);\n          }\n\n          this.navigateToStoredUrl();\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable({ providedIn: 'root' })\nexport class StateStorageService {\n  private previousUrlKey = 'previousUrl';\n\n  constructor(private sessionStorageService: SessionStorageService) {}\n\n  storeUrl(url: string): void {\n    this.sessionStorageService.store(this.previousUrlKey, url);\n  }\n\n  getUrl(): string | null {\n    return this.sessionStorageService.retrieve(this.previousUrlKey) as string | null;\n  }\n\n  clearUrl(): void {\n    this.sessionStorageService.clear(this.previousUrlKey);\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\config\\application-config.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApplicationConfigService {\n  private endpointPrefix = '';\n  private microfrontend = false;\n\n  setEndpointPrefix(endpointPrefix: string): void {\n    this.endpointPrefix = endpointPrefix;\n  }\n\n  setMicrofrontend(microfrontend = true): void {\n    this.microfrontend = microfrontend;\n  }\n\n  isMicrofrontend(): boolean {\n    return this.microfrontend;\n  }\n\n  getEndpointFor(api: string, microservice?: string): string {\n    if (microservice) {\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\n    }\n    return `${this.endpointPrefix}${api}`;\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\main\\main.component.ts",{"fileContent":"import { Component, OnInit, RendererFactory2, Renderer2 } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router, ActivatedRouteSnapshot, NavigationEnd } from '@angular/router';\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\nimport * as dayjs from 'dayjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\n@Component({\n  selector: 'jhi-main',\n  templateUrl: './main.component.html',\n})\nexport class MainComponent implements OnInit {\n  private renderer: Renderer2;\n\n  constructor(\n    private accountService: AccountService,\n    private titleService: Title,\n    private router: Router,\n    private translateService: TranslateService,\n    rootRenderer: RendererFactory2\n  ) {\n    this.renderer = rootRenderer.createRenderer(document.querySelector('html'), null);\n  }\n\n  ngOnInit(): void {\n    // try to log in automatically\n    this.accountService.identity().subscribe();\n\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.updateTitle();\n      }\n    });\n\n    this.translateService.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => {\n      this.updateTitle();\n      dayjs.locale(langChangeEvent.lang);\n      this.renderer.setAttribute(document.querySelector('html'), 'lang', langChangeEvent.lang);\n    });\n  }\n\n  private getPageTitle(routeSnapshot: ActivatedRouteSnapshot): string {\n    const title: string = routeSnapshot.data['pageTitle'] ?? '';\n    if (routeSnapshot.firstChild) {\n      return this.getPageTitle(routeSnapshot.firstChild) || title;\n    }\n    return title;\n  }\n\n  private updateTitle(): void {\n    let pageTitle = this.getPageTitle(this.router.routerState.snapshot.root);\n    if (!pageTitle) {\n      pageTitle = 'global.title';\n    }\n    this.translateService.get(pageTitle).subscribe(title => this.titleService.setTitle(title));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\main\\main.component.html",{"fileContent":"<jhi-page-ribbon></jhi-page-ribbon>\n\n<div>\n  <router-outlet name=\"navbar\"></router-outlet>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"card jh-card\">\n    <router-outlet></router-outlet>\n  </div>\n\n  <jhi-footer></jhi-footer>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\sort\\sort-by.directive.spec.ts",{"fileContent":"import { Component, DebugElement } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { fas, faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\n\nimport { SortByDirective } from './sort-by.directive';\nimport { SortDirective } from './sort.directive';\n\n@Component({\n  template: `\n    <table>\n      <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"transition($event)\">\n          <th jhiSortBy=\"name\">ID<fa-icon *ngIf=\"sortAllowed\" [icon]=\"'sort'\"></fa-icon></th>\n        </tr>\n      </thead>\n    </table>\n  `,\n})\nclass TestSortByDirectiveComponent {\n  predicate?: string;\n  ascending?: boolean;\n  sortAllowed = true;\n  transition = jest.fn();\n\n  constructor(library: FaIconLibrary) {\n    library.addIconPacks(fas);\n    library.addIcons(faSort, faSortDown, faSortUp);\n  }\n}\n\ndescribe('Directive: SortByDirective', () => {\n  let component: TestSortByDirectiveComponent;\n  let fixture: ComponentFixture<TestSortByDirectiveComponent>;\n  let tableHead: DebugElement;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestSortByDirectiveComponent, SortDirective, SortByDirective, FaIconComponent],\n    });\n    fixture = TestBed.createComponent(TestSortByDirectiveComponent);\n    component = fixture.componentInstance;\n    tableHead = fixture.debugElement.query(By.directive(SortByDirective));\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate differs from column predicate', () => {\n    // GIVEN\n    component.predicate = 'id';\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('id');\n    expect(sortByDirective.iconComponent?.icon).toEqual('sort');\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should initialize predicate, order, icon when initial component predicate is same as column predicate', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    // THEN\n    expect(sortByDirective.jhiSortBy).toEqual('name');\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(true);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortUp.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(0);\n  });\n\n  it('should update component predicate, order, icon when user clicks on column header', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(false);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortDown.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(1);\n    expect(component.transition).toHaveBeenCalledWith({ predicate: 'name', ascending: false });\n  });\n\n  it('should update component predicate, order, icon when user double clicks on column header', () => {\n    // GIVEN\n    component.predicate = 'name';\n    component.ascending = true;\n    const sortByDirective = tableHead.injector.get(SortByDirective);\n\n    // WHEN\n    fixture.detectChanges();\n\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(component.predicate).toEqual('name');\n    expect(component.ascending).toEqual(true);\n    expect(sortByDirective.iconComponent?.icon).toEqual(faSortUp.iconName);\n    expect(component.transition).toHaveBeenCalledTimes(2);\n    expect(component.transition).toHaveBeenNthCalledWith(1, { predicate: 'name', ascending: false });\n    expect(component.transition).toHaveBeenNthCalledWith(2, { predicate: 'name', ascending: true });\n  });\n\n  it('should not run sorting on click if sorting icon is hidden', () => {\n    // GIVEN\n    component.predicate = 'id';\n    component.ascending = false;\n    component.sortAllowed = false;\n\n    // WHEN\n    fixture.detectChanges();\n\n    tableHead.triggerEventHandler('click', null);\n    fixture.detectChanges();\n\n    // THEN\n    expect(component.predicate).toEqual('id');\n    expect(component.ascending).toEqual(false);\n    expect(component.transition).not.toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/sort/sort-by.directive.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/sort/sort.directive.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\sort\\sort-by.directive.ts",{"fileContent":"import { AfterContentInit, ContentChild, Directive, Host, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faSort, faSortDown, faSortUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nimport { SortDirective } from './sort.directive';\n\n@Directive({\n  selector: '[jhiSortBy]',\n})\nexport class SortByDirective<T> implements AfterContentInit, OnDestroy {\n  @Input() jhiSortBy!: T;\n\n  @ContentChild(FaIconComponent, { static: false })\n  iconComponent?: FaIconComponent;\n\n  sortIcon = faSort;\n  sortAscIcon = faSortUp;\n  sortDescIcon = faSortDown;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(@Host() private sort: SortDirective<T>) {\n    sort.predicateChange.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateIconDefinition());\n    sort.ascendingChange.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateIconDefinition());\n  }\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.iconComponent) {\n      this.sort.sort(this.jhiSortBy);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.updateIconDefinition();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIconDefinition(): void {\n    if (this.iconComponent) {\n      let icon: IconDefinition = this.sortIcon;\n      if (this.sort.predicate === this.jhiSortBy) {\n        icon = this.sort.ascending ? this.sortAscIcon : this.sortDescIcon;\n      }\n      this.iconComponent.icon = icon.iconName;\n      this.iconComponent.render();\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/sort/sort.directive.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\sort\\sort.directive.ts",{"fileContent":"import { Directive, EventEmitter, Input, Output } from '@angular/core';\n\n@Directive({\n  selector: '[jhiSort]',\n})\nexport class SortDirective<T> {\n  @Input()\n  get predicate(): T | undefined {\n    return this._predicate;\n  }\n  set predicate(predicate: T | undefined) {\n    this._predicate = predicate;\n    this.predicateChange.emit(predicate);\n  }\n\n  @Input()\n  get ascending(): boolean | undefined {\n    return this._ascending;\n  }\n  set ascending(ascending: boolean | undefined) {\n    this._ascending = ascending;\n    this.ascendingChange.emit(ascending);\n  }\n\n  @Output() predicateChange = new EventEmitter<T>();\n  @Output() ascendingChange = new EventEmitter<boolean>();\n  @Output() sortChange = new EventEmitter<{ predicate: T; ascending: boolean }>();\n\n  private _predicate?: T;\n  private _ascending?: boolean;\n\n  sort(field: T): void {\n    this.ascending = field !== this.predicate ? true : !this.ascending;\n    this.predicate = field;\n    this.predicateChange.emit(field);\n    this.ascendingChange.emit(this.ascending);\n    this.sortChange.emit({ predicate: this.predicate, ascending: this.ascending });\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.component.spec.ts",{"fileContent":"jest.mock('@ngx-translate/core');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, tick, fakeAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\n\nimport { RegisterService } from './register.service';\nimport { RegisterComponent } from './register.component';\n\ndescribe('RegisterComponent', () => {\n  let fixture: ComponentFixture<RegisterComponent>;\n  let comp: RegisterComponent;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [RegisterComponent],\n        providers: [FormBuilder, TranslateService],\n      })\n        .overrideTemplate(RegisterComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RegisterComponent);\n    comp = fixture.componentInstance;\n  });\n\n  it('should ensure the two passwords entered match', () => {\n    comp.registerForm.patchValue({\n      password: 'password',\n      confirmPassword: 'non-matching',\n    });\n\n    comp.register();\n\n    expect(comp.doNotMatch).toBe(true);\n  });\n\n  it('should update success to true after creating an account', inject(\n    [RegisterService, TranslateService],\n    fakeAsync((service: RegisterService, mockLanguageService: TranslateService) => {\n      jest.spyOn(service, 'save').mockReturnValue(of({}));\n      mockLanguageService.currentLang = 'fr';\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith({\n        email: '',\n        password: 'password',\n        login: '',\n        langKey: 'fr',\n      });\n      expect(comp.success).toBe(true);\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of user existence upon 400/login already in use', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 400,\n          error: { type: LOGIN_ALREADY_USED_TYPE },\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorUserExists).toBe(true);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of email existence upon 400/email address already in use', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 400,\n          error: { type: EMAIL_ALREADY_USED_TYPE },\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorEmailExists).toBe(true);\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of generic error', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 503,\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(true);\n    })\n  ));\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/error.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\config\\error.constants.ts",{"fileContent":"export const PROBLEM_BASE_URL = 'https://www.jhipster.tech/problem';\nexport const EMAIL_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/email-already-used`;\nexport const LOGIN_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/login-already-used`;\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Registration } from './register.model';\n\n@Injectable({ providedIn: 'root' })\nexport class RegisterService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(registration: Registration): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/register'), registration);\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.component.ts",{"fileContent":"import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild('login', { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = this.fb.group({\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private translateService: TranslateService, private registerService: RegisterService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const password = this.registerForm.get(['password'])!.value;\n    if (password !== this.registerForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      const login = this.registerForm.get(['login'])!.value;\n      const email = this.registerForm.get(['email'])!.value;\n      this.registerService.save({ login, email, password, langKey: this.translateService.currentLang }).subscribe(\n        () => (this.success = true),\n        response => this.processError(response)\n      );\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/error.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"register.title\" data-cy=\"registerTitle\">Registration</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"register.messages.success\">\n        <strong>Registration saved!</strong> Please check your email for confirmation.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"register.messages.error.fail\">\n        <strong>Registration failed!</strong> Please try again later.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorUserExists\" jhiTranslate=\"register.messages.error.userexists\">\n        <strong>Login name already registered!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorEmailExists\" jhiTranslate=\"register.messages.error.emailexists\">\n        <strong>Email is already in use!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"register()\" [formGroup]=\"registerForm\" *ngIf=\"!success\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"login\" jhiTranslate=\"global.form.username.label\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"{{ 'global.form.username.placeholder' | translate }}\"\n            formControlName=\"login\"\n            data-cy=\"username\"\n            #login\n          />\n\n          <div *ngIf=\"registerForm.get('login')!.invalid && (registerForm.get('login')!.dirty || registerForm.get('login')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.required\"\n              jhiTranslate=\"register.messages.validate.login.required\"\n            >\n              Your username is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.minlength\"\n              jhiTranslate=\"register.messages.validate.login.minlength\"\n            >\n              Your username is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.maxlength\"\n              jhiTranslate=\"register.messages.validate.login.maxlength\"\n            >\n              Your username cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.pattern\"\n              jhiTranslate=\"register.messages.validate.login.pattern\"\n            >\n              Your username can only contain letters and digits.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"registerForm.get('email')!.invalid && (registerForm.get('email')!.dirty || registerForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.invalid\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"password\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"password\"\n            data-cy=\"firstPassword\"\n          />\n\n          <div\n            *ngIf=\"registerForm.get('password')!.invalid && (registerForm.get('password')!.dirty || registerForm.get('password')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"registerForm.get('password')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"secondPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('confirmPassword')!.invalid &&\n              (registerForm.get('confirmPassword')!.dirty || registerForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"registerForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"register.form.button\"\n          data-cy=\"submit\"\n        >\n          Register\n        </button>\n      </form>\n\n      <div class=\"mt-3 alert alert-warning\">\n        <span jhiTranslate=\"global.messages.info.authenticated.prefix\">If you want to </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a\n        ><span jhiTranslate=\"global.messages.info.authenticated.suffix\"\n          >, you can try the default accounts:<br />- Administrator (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\list\\user-management.component.spec.ts",{"fileContent":"jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { UserManagementComponent } from './user-management.component';\n\ndescribe('User Management Component', () => {\n  let comp: UserManagementComponent;\n  let fixture: ComponentFixture<UserManagementComponent>;\n  let service: UserManagementService;\n  let mockAccountService: AccountService;\n  const data = of({\n    defaultSort: 'id,asc',\n  });\n  const queryParamMap = of(\n    jest.requireActual('@angular/router').convertToParamMap({\n      page: '1',\n      size: '1',\n      sort: 'id,desc',\n    })\n  );\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [UserManagementComponent],\n        providers: [Router, { provide: ActivatedRoute, useValue: { data, queryParamMap } }, AccountService],\n      })\n        .overrideTemplate(UserManagementComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(UserManagementService);\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.identity = jest.fn(() => of(null));\n  });\n\n  describe('OnInit', () => {\n    it('Should call load all on init', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const headers = new HttpHeaders().append('link', 'link;link');\n        jest.spyOn(service, 'query').mockReturnValue(\n          of(\n            new HttpResponse({\n              body: [new User(123)],\n              headers,\n            })\n          )\n        );\n\n        // WHEN\n        comp.ngOnInit();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.query).toHaveBeenCalled();\n        expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n      })\n    ));\n  });\n\n  describe('setActive', () => {\n    it('Should update user and call load all', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const headers = new HttpHeaders().append('link', 'link;link');\n        const user = new User(123);\n        jest.spyOn(service, 'query').mockReturnValue(\n          of(\n            new HttpResponse({\n              body: [user],\n              headers,\n            })\n          )\n        );\n        jest.spyOn(service, 'update').mockReturnValue(of(user));\n\n        // WHEN\n        comp.setActive(user, true);\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith({ ...user, activated: true });\n        expect(service.query).toHaveBeenCalled();\n        expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n      })\n    ));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/list/user-management.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/pagination.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/delete/user-management-delete-dialog.component.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\service\\user-management.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { Pagination } from 'app/core/request/request.model';\nimport { IUser } from '../user-management.model';\n\n@Injectable({ providedIn: 'root' })\nexport class UserManagementService {\n  private resourceUrl = this.applicationConfigService.getEndpointFor('api/admin/users');\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  create(user: IUser): Observable<IUser> {\n    return this.http.post<IUser>(this.resourceUrl, user);\n  }\n\n  update(user: IUser): Observable<IUser> {\n    return this.http.put<IUser>(this.resourceUrl, user);\n  }\n\n  find(login: string): Observable<IUser> {\n    return this.http.get<IUser>(`${this.resourceUrl}/${login}`);\n  }\n\n  query(req?: Pagination): Observable<HttpResponse<IUser[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUser[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(login: string): Observable<{}> {\n    return this.http.delete(`${this.resourceUrl}/${login}`);\n  }\n\n  authorities(): Observable<string[]> {\n    return this.http.get<string[]>(this.applicationConfigService.getEndpointFor('api/authorities'));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\request\\request-util.ts",{"fileContent":"import { HttpParams } from '@angular/common/http';\n\nexport const createRequestOption = (req?: any): HttpParams => {\n  let options: HttpParams = new HttpParams();\n\n  if (req) {\n    Object.keys(req).forEach(key => {\n      if (key !== 'sort') {\n        options = options.set(key, req[key]);\n      }\n    });\n\n    if (req.sort) {\n      req.sort.forEach((val: string) => {\n        options = options.append('sort', val);\n      });\n    }\n  }\n\n  return options;\n};\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\user-management.model.ts",{"fileContent":"export interface IUser {\n  id?: number;\n  login?: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  email?: string;\n  activated?: boolean;\n  langKey?: string;\n  authorities?: string[];\n  createdBy?: string;\n  createdDate?: Date;\n  lastModifiedBy?: string;\n  lastModifiedDate?: Date;\n}\n\nexport class User implements IUser {\n  constructor(\n    public id?: number,\n    public login?: string,\n    public firstName?: string | null,\n    public lastName?: string | null,\n    public email?: string,\n    public activated?: boolean,\n    public langKey?: string,\n    public authorities?: string[],\n    public createdBy?: string,\n    public createdDate?: Date,\n    public lastModifiedBy?: string,\n    public lastModifiedDate?: Date\n  ) {}\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\list\\user-management.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ASC, DESC, ITEMS_PER_PAGE, SORT } from 'app/config/pagination.constants';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\nimport { UserManagementDeleteDialogComponent } from '../delete/user-management-delete-dialog.component';\n\n@Component({\n  selector: 'jhi-user-mgmt',\n  templateUrl: './user-management.component.html',\n})\nexport class UserManagementComponent implements OnInit {\n  currentAccount: Account | null = null;\n  users: User[] | null = null;\n  isLoading = false;\n  totalItems = 0;\n  itemsPerPage = ITEMS_PER_PAGE;\n  page!: number;\n  predicate!: string;\n  ascending!: boolean;\n\n  constructor(\n    private userService: UserManagementService,\n    private accountService: AccountService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => (this.currentAccount = account));\n    this.handleNavigation();\n  }\n\n  setActive(user: User, isActivated: boolean): void {\n    this.userService.update({ ...user, activated: isActivated }).subscribe(() => this.loadAll());\n  }\n\n  trackIdentity(index: number, item: User): number {\n    return item.id!;\n  }\n\n  deleteUser(user: User): void {\n    const modalRef = this.modalService.open(UserManagementDeleteDialogComponent, { size: 'lg', backdrop: 'static' });\n    modalRef.componentInstance.user = user;\n    // unsubscribe not needed because closed completes on modal close\n    modalRef.closed.subscribe(reason => {\n      if (reason === 'deleted') {\n        this.loadAll();\n      }\n    });\n  }\n\n  loadAll(): void {\n    this.isLoading = true;\n    this.userService\n      .query({\n        page: this.page - 1,\n        size: this.itemsPerPage,\n        sort: this.sort(),\n      })\n      .subscribe(\n        (res: HttpResponse<User[]>) => {\n          this.isLoading = false;\n          this.onSuccess(res.body, res.headers);\n        },\n        () => (this.isLoading = false)\n      );\n  }\n\n  transition(): void {\n    this.router.navigate(['./'], {\n      relativeTo: this.activatedRoute.parent,\n      queryParams: {\n        page: this.page,\n        sort: `${this.predicate},${this.ascending ? ASC : DESC}`,\n      },\n    });\n  }\n\n  private handleNavigation(): void {\n    combineLatest([this.activatedRoute.data, this.activatedRoute.queryParamMap]).subscribe(([data, params]) => {\n      const page = params.get('page');\n      this.page = +(page ?? 1);\n      const sort = (params.get(SORT) ?? data['defaultSort']).split(',');\n      this.predicate = sort[0];\n      this.ascending = sort[1] === ASC;\n      this.loadAll();\n    });\n  }\n\n  private sort(): string[] {\n    const result = [`${this.predicate},${this.ascending ? ASC : DESC}`];\n    if (this.predicate !== 'id') {\n      result.push('id');\n    }\n    return result;\n  }\n\n  private onSuccess(users: User[] | null, headers: HttpHeaders): void {\n    this.totalItems = Number(headers.get('X-Total-Count'));\n    this.users = users;\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/pagination.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/delete/user-management-delete-dialog.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\config\\pagination.constants.ts",{"fileContent":"export const ITEMS_PER_PAGE = 20;\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nexport const SORT = 'sort';\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\delete\\user-management-delete-dialog.component.ts",{"fileContent":"import { Component } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { User } from '../user-management.model';\nimport { UserManagementService } from '../service/user-management.service';\n\n@Component({\n  selector: 'jhi-user-mgmt-delete-dialog',\n  templateUrl: './user-management-delete-dialog.component.html',\n})\nexport class UserManagementDeleteDialogComponent {\n  user?: User;\n\n  constructor(private userService: UserManagementService, private activeModal: NgbActiveModal) {}\n\n  cancel(): void {\n    this.activeModal.dismiss();\n  }\n\n  confirmDelete(login: string): void {\n    this.userService.delete(login).subscribe(() => {\n      this.activeModal.close('deleted');\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\delete\\user-management-delete-dialog.component.html",{"fileContent":"<form *ngIf=\"user\" name=\"deleteForm\" (ngSubmit)=\"confirmDelete(user.login!)\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" jhiTranslate=\"entity.delete.title\">Confirm delete operation</h4>\n\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"cancel()\">&times;</button>\n  </div>\n\n  <div class=\"modal-body\">\n    <jhi-alert-error></jhi-alert-error>\n\n    <p jhiTranslate=\"userManagement.delete.question\" [translateValues]=\"{ login: user.login }\">\n      Are you sure you want to delete this User?\n    </p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"cancel()\">\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span jhiTranslate=\"entity.action.cancel\">Cancel</span>\n    </button>\n\n    <button type=\"submit\" class=\"btn btn-danger\">\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span jhiTranslate=\"entity.action.delete\">Delete</span>\n    </button>\n  </div>\n</form>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\list\\user-management.component.html",{"fileContent":"<div>\n  <h2>\n    <span id=\"user-management-page-heading\" jhiTranslate=\"userManagement.home.title\" data-cy=\"userManagementPageHeading\">Users</span>\n\n    <div class=\"d-flex justify-content-end\">\n      <button class=\"btn btn-info mr-2\" (click)=\"loadAll()\" [disabled]=\"isLoading\">\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\n        <span jhiTranslate=\"userManagement.home.refreshListLabel\">Refresh List</span>\n      </button>\n      <button class=\"btn btn-primary jh-create-entity\" [routerLink]=\"['./new']\">\n        <fa-icon icon=\"plus\"></fa-icon> <span jhiTranslate=\"userManagement.home.createLabel\">Create a new User</span>\n      </button>\n    </div>\n  </h2>\n\n  <jhi-alert-error></jhi-alert-error>\n\n  <jhi-alert></jhi-alert>\n\n  <div class=\"table-responsive\" *ngIf=\"users\">\n    <table class=\"table table-striped\" aria-describedby=\"user-management-page-heading\">\n      <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"transition()\">\n          <th scope=\"col\" jhiSortBy=\"id\"><span jhiTranslate=\"global.field.id\">ID</span> <fa-icon icon=\"sort\"></fa-icon></th>\n          <th scope=\"col\" jhiSortBy=\"login\"><span jhiTranslate=\"userManagement.login\">Login</span> <fa-icon icon=\"sort\"></fa-icon></th>\n          <th scope=\"col\" jhiSortBy=\"email\"><span jhiTranslate=\"userManagement.email\">Email</span> <fa-icon icon=\"sort\"></fa-icon></th>\n          <th scope=\"col\"></th>\n          <th scope=\"col\" jhiSortBy=\"langKey\">\n            <span jhiTranslate=\"userManagement.langKey\">Lang Key</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\"><span jhiTranslate=\"userManagement.profiles\">Profiles</span></th>\n          <th scope=\"col\" jhiSortBy=\"createdDate\">\n            <span jhiTranslate=\"userManagement.createdDate\">Created Date</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"lastModifiedBy\">\n            <span jhiTranslate=\"userManagement.lastModifiedBy\">Last Modified By</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"lastModifiedDate\">\n            <span jhiTranslate=\"userManagement.lastModifiedDate\">Last Modified Date</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"users\">\n        <tr *ngFor=\"let user of users; trackBy: trackIdentity\">\n          <td>\n            <a [routerLink]=\"['./', user.login, 'view']\">{{ user.id }}</a>\n          </td>\n          <td>{{ user.login }}</td>\n          <td>{{ user.email }}</td>\n          <td>\n            <button\n              class=\"btn btn-danger btn-sm\"\n              (click)=\"setActive(user, true)\"\n              *ngIf=\"!user.activated\"\n              jhiTranslate=\"userManagement.deactivated\"\n            >\n              Deactivated\n            </button>\n            <button\n              class=\"btn btn-success btn-sm\"\n              (click)=\"setActive(user, false)\"\n              *ngIf=\"user.activated\"\n              [disabled]=\"!currentAccount || currentAccount.login === user.login\"\n              jhiTranslate=\"userManagement.activated\"\n            >\n              Activated\n            </button>\n          </td>\n          <td>{{ user.langKey }}</td>\n          <td>\n            <div *ngFor=\"let authority of user.authorities\">\n              <span class=\"badge badge-info\">{{ authority }}</span>\n            </div>\n          </td>\n          <td>{{ user.createdDate | date: 'dd/MM/yy HH:mm' }}</td>\n          <td>{{ user.lastModifiedBy }}</td>\n          <td>{{ user.lastModifiedDate | date: 'dd/MM/yy HH:mm' }}</td>\n          <td class=\"text-right\">\n            <div class=\"btn-group\">\n              <button type=\"submit\" [routerLink]=\"['./', user.login, 'view']\" class=\"btn btn-info btn-sm\">\n                <fa-icon icon=\"eye\"></fa-icon>\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.view\">View</span>\n              </button>\n\n              <button type=\"submit\" [routerLink]=\"['./', user.login, 'edit']\" queryParamsHandling=\"merge\" class=\"btn btn-primary btn-sm\">\n                <fa-icon icon=\"pencil-alt\"></fa-icon>\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.edit\">Edit</span>\n              </button>\n\n              <button\n                type=\"button\"\n                (click)=\"deleteUser(user)\"\n                class=\"btn btn-danger btn-sm\"\n                [disabled]=\"!currentAccount || currentAccount.login === user.login\"\n              >\n                <fa-icon icon=\"times\"></fa-icon>\n                <span class=\"d-none d-md-inline\" jhiTranslate=\"entity.action.delete\">Delete</span>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div *ngIf=\"users\">\n    <div class=\"row justify-content-center\">\n      <jhi-item-count [params]=\"{ page: page, totalItems: totalItems, itemsPerPage: itemsPerPage }\"></jhi-item-count>\n    </div>\n\n    <div class=\"row justify-content-center\">\n      <ngb-pagination\n        [collectionSize]=\"totalItems\"\n        [(page)]=\"page\"\n        [pageSize]=\"itemsPerPage\"\n        [maxSize]=\"5\"\n        [rotate]=\"true\"\n        [boundaryLinks]=\"true\"\n        (pageChange)=\"transition()\"\n      ></ngb-pagination>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\update\\user-management-update.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\n\nimport { UserManagementUpdateComponent } from './user-management-update.component';\n\ndescribe('User Management Update Component', () => {\n  let comp: UserManagementUpdateComponent;\n  let fixture: ComponentFixture<UserManagementUpdateComponent>;\n  let service: UserManagementService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [UserManagementUpdateComponent],\n        providers: [\n          FormBuilder,\n          {\n            provide: ActivatedRoute,\n            useValue: {\n              data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(UserManagementUpdateComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementUpdateComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(UserManagementService);\n  });\n\n  describe('OnInit', () => {\n    it('Should load authorities and language on init', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        jest.spyOn(service, 'authorities').mockReturnValue(of(['USER']));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.authorities).toHaveBeenCalled();\n        expect(comp.authorities).toEqual(['USER']);\n      })\n    ));\n  });\n\n  describe('save', () => {\n    it('Should call update service on save for existing user', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const entity = new User(123);\n        jest.spyOn(service, 'update').mockReturnValue(of(entity));\n        comp.user = entity;\n        comp.editForm.patchValue({ id: entity.id });\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      })\n    ));\n\n    it('Should call create service on save for new user', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const entity = new User();\n        jest.spyOn(service, 'create').mockReturnValue(of(entity));\n        comp.user = entity;\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.create).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      })\n    ));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/authority.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/update/user-management-update.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\config\\authority.constants.ts",{"fileContent":"export enum Authority {\n  ADMIN = 'ROLE_ADMIN',\n  USER = 'ROLE_USER',\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\update\\user-management-update.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { LANGUAGES } from 'app/config/language.constants';\nimport { User } from '../user-management.model';\nimport { UserManagementService } from '../service/user-management.service';\n\n@Component({\n  selector: 'jhi-user-mgmt-update',\n  templateUrl: './user-management-update.component.html',\n})\nexport class UserManagementUpdateComponent implements OnInit {\n  user!: User;\n  languages = LANGUAGES;\n  authorities: string[] = [];\n  isSaving = false;\n\n  editForm = this.fb.group({\n    id: [],\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    firstName: ['', [Validators.maxLength(50)]],\n    lastName: ['', [Validators.maxLength(50)]],\n    email: ['', [Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    activated: [],\n    langKey: [],\n    authorities: [],\n  });\n\n  constructor(private userService: UserManagementService, private route: ActivatedRoute, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      if (user) {\n        this.user = user;\n        if (this.user.id === undefined) {\n          this.user.activated = true;\n        }\n        this.updateForm(user);\n      }\n    });\n    this.userService.authorities().subscribe(authorities => (this.authorities = authorities));\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    this.updateUser(this.user);\n    if (this.user.id !== undefined) {\n      this.userService.update(this.user).subscribe(\n        () => this.onSaveSuccess(),\n        () => this.onSaveError()\n      );\n    } else {\n      this.userService.create(this.user).subscribe(\n        () => this.onSaveSuccess(),\n        () => this.onSaveError()\n      );\n    }\n  }\n\n  private updateForm(user: User): void {\n    this.editForm.patchValue({\n      id: user.id,\n      login: user.login,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      activated: user.activated,\n      langKey: user.langKey,\n      authorities: user.authorities,\n    });\n  }\n\n  private updateUser(user: User): void {\n    user.login = this.editForm.get(['login'])!.value;\n    user.firstName = this.editForm.get(['firstName'])!.value;\n    user.lastName = this.editForm.get(['lastName'])!.value;\n    user.email = this.editForm.get(['email'])!.value;\n    user.activated = this.editForm.get(['activated'])!.value;\n    user.langKey = this.editForm.get(['langKey'])!.value;\n    user.authorities = this.editForm.get(['authorities'])!.value;\n  }\n\n  private onSaveSuccess(): void {\n    this.isSaving = false;\n    this.previousState();\n  }\n\n  private onSaveError(): void {\n    this.isSaving = false;\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\config\\language.constants.ts",{"fileContent":"/*\n    Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n    They are written in English to avoid character encoding issues (not a perfect solution)\n*/\nexport const LANGUAGES: string[] = [\n  'fr',\n  // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n];\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\update\\user-management-update.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" [formGroup]=\"editForm\">\n      <h2 id=\"myUserLabel\" jhiTranslate=\"userManagement.home.createOrEditLabel\">Create or edit a User</h2>\n\n      <div *ngIf=\"user\">\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"form-group\" [hidden]=\"!user.id\">\n          <label jhiTranslate=\"global.field.id\">ID</label>\n          <input type=\"text\" class=\"form-control\" name=\"id\" formControlName=\"id\" readonly />\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" jhiTranslate=\"userManagement.login\">Login</label>\n          <input type=\"text\" class=\"form-control\" name=\"login\" formControlName=\"login\" />\n\n          <div *ngIf=\"editForm.get('login')!.invalid && (editForm.get('login')!.dirty || editForm.get('login')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('login')?.errors?.required\" jhiTranslate=\"entity.validation.required\">\n              This field is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('login')?.errors?.maxlength\"\n              jhiTranslate=\"entity.validation.maxlength\"\n              [translateValues]=\"{ max: 50 }\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('login')?.errors?.pattern\"\n              jhiTranslate=\"entity.validation.patternLogin\"\n            >\n              This field can only contain letters, digits and e-mail addresses.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" jhiTranslate=\"userManagement.firstName\">First Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"firstName\" formControlName=\"firstName\" />\n\n          <div *ngIf=\"editForm.get('firstName')!.invalid && (editForm.get('firstName')!.dirty || editForm.get('firstName')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('firstName')?.errors?.maxlength\"\n              jhiTranslate=\"entity.validation.maxlength\"\n              [translateValues]=\"{ max: 50 }\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label jhiTranslate=\"userManagement.lastName\">Last Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"lastName\" formControlName=\"lastName\" />\n\n          <div *ngIf=\"editForm.get('lastName')!.invalid && (editForm.get('lastName')!.dirty || editForm.get('lastName')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('lastName')?.errors?.maxlength\"\n              jhiTranslate=\"entity.validation.maxlength\"\n              [translateValues]=\"{ max: 50 }\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" jhiTranslate=\"userManagement.email\">Email</label>\n          <input type=\"email\" class=\"form-control\" name=\"email\" formControlName=\"email\" />\n\n          <div *ngIf=\"editForm.get('email')!.invalid && (editForm.get('email')!.dirty || editForm.get('email')!.touched)\">\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('email')?.errors?.required\" jhiTranslate=\"entity.validation.required\">\n              This field is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"entity.validation.maxlength\"\n              [translateValues]=\"{ max: 100 }\"\n            >\n              This field cannot be longer than 100 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"entity.validation.minlength\"\n              [translateValues]=\"{ min: 5 }\"\n            >\n              This field is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-check\">\n          <label class=\"form-check-label\" for=\"activated\">\n            <input\n              class=\"form-check-input\"\n              [attr.disabled]=\"user.id === undefined ? 'disabled' : null\"\n              type=\"checkbox\"\n              id=\"activated\"\n              name=\"activated\"\n              formControlName=\"activated\"\n            />\n            <span jhiTranslate=\"userManagement.activated\">Activated</span>\n          </label>\n        </div>\n\n        <div class=\"form-group\" *ngIf=\"languages && languages.length > 0\">\n          <label jhiTranslate=\"userManagement.langKey\">Lang Key</label>\n          <select class=\"form-control\" id=\"langKey\" name=\"langKey\" formControlName=\"langKey\">\n            <option *ngFor=\"let language of languages\" [value]=\"language\">{{ language | findLanguageFromKey }}</option>\n          </select>\n        </div>\n\n        <div class=\"form-group\">\n          <label jhiTranslate=\"userManagement.profiles\">Profiles</label>\n          <select class=\"form-control\" multiple name=\"authority\" formControlName=\"authorities\">\n            <option *ngFor=\"let authority of authorities\" [value]=\"authority\">{{ authority }}</option>\n          </select>\n        </div>\n      </div>\n\n      <div *ngIf=\"user\">\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"previousState()\">\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span jhiTranslate=\"entity.action.cancel\">Cancel</span>\n        </button>\n\n        <button type=\"submit\" [disabled]=\"editForm.invalid || isSaving\" class=\"btn btn-primary\">\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span jhiTranslate=\"entity.action.save\">Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\event-manager.service.spec.ts",{"fileContent":"import { inject, TestBed } from '@angular/core/testing';\n\nimport { EventManager, EventWithContent } from './event-manager.service';\n\ndescribe('Event Manager tests', () => {\n  describe('EventWithContent', () => {\n    it('should create correctly EventWithContent', () => {\n      // WHEN\n      const eventWithContent = new EventWithContent('name', 'content');\n\n      // THEN\n      expect(eventWithContent).toEqual({ name: 'name', content: 'content' });\n    });\n  });\n\n  describe('EventManager', () => {\n    let recievedEvent: EventWithContent<unknown> | string | null;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        providers: [EventManager],\n      });\n      recievedEvent = null;\n    });\n\n    it('should not fail when nosubscriber and broadcasting', inject([EventManager], (eventManager: EventManager) => {\n      expect(eventManager.observer).toBeUndefined();\n      eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n    }));\n\n    it('should create an observable and callback when broadcasted EventWithContent', inject(\n      [EventManager],\n      (eventManager: EventManager) => {\n        // GIVEN\n        eventManager.subscribe('modifier', (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n        // WHEN\n        eventManager.broadcast({ name: 'unrelatedModifier', content: 'unreleated modification' });\n        // THEN\n        expect(recievedEvent).toBeNull();\n\n        // WHEN\n        eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n        // THEN\n        expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });\n      }\n    ));\n\n    it('should create an observable and callback when broadcasted string', inject([EventManager], (eventManager: EventManager) => {\n      // GIVEN\n      eventManager.subscribe('modifier', (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n      // WHEN\n      eventManager.broadcast('unrelatedModifier');\n      // THEN\n      expect(recievedEvent).toBeNull();\n\n      // WHEN\n      eventManager.broadcast('modifier');\n      // THEN\n      expect(recievedEvent).toEqual('modifier');\n    }));\n\n    it('should subscribe to multiple events', inject([EventManager], (eventManager: EventManager) => {\n      // GIVEN\n      eventManager.subscribe(['modifier', 'modifier2'], (event: EventWithContent<unknown> | string) => (recievedEvent = event));\n\n      // WHEN\n      eventManager.broadcast('unrelatedModifier');\n      // THEN\n      expect(recievedEvent).toBeNull();\n\n      // WHEN\n      eventManager.broadcast({ name: 'modifier', content: 'modified something' });\n      // THEN\n      expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });\n\n      // WHEN\n      eventManager.broadcast('modifier2');\n      // THEN\n      expect(recievedEvent).toEqual('modifier2');\n    }));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/event-manager.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\event-manager.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\n\nexport class EventWithContent<T> {\n  constructor(public name: string, public content: T) {}\n}\n\n/**\n * An utility class to manage RX events\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventManager {\n  observable: Observable<EventWithContent<unknown> | string>;\n  observer?: Observer<EventWithContent<unknown> | string>;\n\n  constructor() {\n    this.observable = new Observable((observer: Observer<EventWithContent<unknown> | string>) => {\n      this.observer = observer;\n    }).pipe(share());\n  }\n\n  /**\n   * Method to broadcast the event to observer\n   */\n  broadcast(event: EventWithContent<unknown> | string): void {\n    if (this.observer) {\n      this.observer.next(event);\n    }\n  }\n\n  /**\n   * Method to subscribe to an event with callback\n   * @param eventNames  Single event name or array of event names to what subscribe\n   * @param callback    Callback to run when the event occurs\n   */\n  subscribe(eventNames: string | string[], callback: (event: EventWithContent<unknown> | string) => void): Subscription {\n    if (typeof eventNames === 'string') {\n      eventNames = [eventNames];\n    }\n    return this.observable\n      .pipe(\n        filter((event: EventWithContent<unknown> | string) => {\n          for (const eventName of eventNames) {\n            if ((typeof event === 'string' && event === eventName) || (typeof event !== 'string' && event.name === eventName)) {\n              return true;\n            }\n          }\n          return false;\n        })\n      )\n      .subscribe(callback);\n  }\n\n  /**\n   * Method to unsubscribe the subscription\n   */\n  destroy(subscriber: Subscription): void {\n    subscriber.unsubscribe();\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\sort\\sort.directive.spec.ts",{"fileContent":"import { Component, DebugElement } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\nimport { SortDirective } from './sort.directive';\n\n@Component({\n  template: `\n    <table>\n      <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"transition($event)\"></tr>\n      </thead>\n    </table>\n  `,\n})\nclass TestSortDirectiveComponent {\n  predicate?: string;\n  ascending?: boolean;\n  transition = jest.fn();\n}\n\ndescribe('Directive: SortDirective', () => {\n  let component: TestSortDirectiveComponent;\n  let fixture: ComponentFixture<TestSortDirectiveComponent>;\n  let tableRow: DebugElement;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestSortDirectiveComponent, SortDirective],\n    });\n    fixture = TestBed.createComponent(TestSortDirectiveComponent);\n    component = fixture.componentInstance;\n    tableRow = fixture.debugElement.query(By.directive(SortDirective));\n  });\n\n  it('should update predicate, order and invoke sortChange function', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n\n    // THEN\n    expect(component.predicate).toEqual('ID');\n    expect(component.ascending).toEqual(true);\n    expect(component.transition).toHaveBeenCalledTimes(1);\n    expect(component.transition).toHaveBeenCalledWith({ predicate: 'ID', ascending: true });\n  });\n\n  it('should change sort order to descending when same field is sorted again', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n    // sort again\n    sortDirective.sort('ID');\n\n    // THEN\n    expect(component.predicate).toEqual('ID');\n    expect(component.ascending).toEqual(false);\n    expect(component.transition).toHaveBeenCalledTimes(2);\n    expect(component.transition).toHaveBeenNthCalledWith(1, { predicate: 'ID', ascending: true });\n    expect(component.transition).toHaveBeenNthCalledWith(2, { predicate: 'ID', ascending: false });\n  });\n\n  it('should change sort order to ascending when different field is sorted', () => {\n    // GIVEN\n    const sortDirective = tableRow.injector.get(SortDirective);\n\n    // WHEN\n    fixture.detectChanges();\n    sortDirective.sort('ID');\n    // sort again\n    sortDirective.sort('NAME');\n\n    // THEN\n    expect(component.predicate).toEqual('NAME');\n    expect(component.ascending).toEqual(true);\n    expect(component.transition).toHaveBeenCalledTimes(2);\n    expect(component.transition).toHaveBeenNthCalledWith(1, { predicate: 'ID', ascending: true });\n    expect(component.transition).toHaveBeenNthCalledWith(2, { predicate: 'NAME', ascending: true });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/sort/sort.directive.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\modal\\health-modal.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HealthModalComponent } from './health-modal.component';\n\ndescribe('HealthModalComponent', () => {\n  let comp: HealthModalComponent;\n  let fixture: ComponentFixture<HealthModalComponent>;\n  let mockActiveModal: NgbActiveModal;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [HealthModalComponent],\n        providers: [NgbActiveModal],\n      })\n        .overrideTemplate(HealthModalComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(HealthModalComponent);\n    comp = fixture.componentInstance;\n    mockActiveModal = TestBed.inject(NgbActiveModal);\n  });\n\n  describe('readableValue', () => {\n    it('should return stringify value', () => {\n      // GIVEN\n      comp.health = undefined;\n\n      // WHEN\n      const result = comp.readableValue({ name: 'jhipster' });\n\n      // THEN\n      expect(result).toEqual('{\"name\":\"jhipster\"}');\n    });\n\n    it('should return string value', () => {\n      // GIVEN\n      comp.health = undefined;\n\n      // WHEN\n      const result = comp.readableValue('jhipster');\n\n      // THEN\n      expect(result).toEqual('jhipster');\n    });\n\n    it('should return storage space in an human readable unit (GB)', () => {\n      // GIVEN\n      comp.health = {\n        key: 'diskSpace',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1073741825);\n\n      // THEN\n      expect(result).toEqual('1.00 GB');\n    });\n\n    it('should return storage space in an human readable unit (MB)', () => {\n      // GIVEN\n      comp.health = {\n        key: 'diskSpace',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1073741824);\n\n      // THEN\n      expect(result).toEqual('1024.00 MB');\n    });\n\n    it('should return string value', () => {\n      // GIVEN\n      comp.health = {\n        key: 'mail',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1234);\n\n      // THEN\n      expect(result).toEqual('1234');\n    });\n  });\n\n  describe('dismiss', () => {\n    it('should call dismiss when dismiss modal is called', () => {\n      // GIVEN\n      const spy = jest.spyOn(mockActiveModal, 'dismiss');\n\n      // WHEN\n      comp.dismiss();\n\n      // THEN\n      expect(spy).toHaveBeenCalled();\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/modal/health-modal.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\modal\\health-modal.component.ts",{"fileContent":"import { Component } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HealthKey, HealthDetails } from '../health.model';\n\n@Component({\n  selector: 'jhi-health-modal',\n  templateUrl: './health-modal.component.html',\n})\nexport class HealthModalComponent {\n  health?: { key: HealthKey; value: HealthDetails };\n\n  constructor(private activeModal: NgbActiveModal) {}\n\n  readableValue(value: any): string {\n    if (this.health?.key === 'diskSpace') {\n      // Should display storage space in an human readable unit\n      const val = value / 1073741824;\n      if (val > 1) {\n        return `${val.toFixed(2)} GB`;\n      }\n      return `${(value / 1048576).toFixed(2)} MB`;\n    }\n\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  dismiss(): void {\n    this.activeModal.dismiss();\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\modal\\health-modal.component.html",{"fileContent":"<div class=\"modal-header\">\n  <h4 class=\"modal-title\" id=\"showHealthLabel\" *ngIf=\"health\">\n    {{ 'health.indicator.' + health.key | translate }}\n  </h4>\n\n  <button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" (click)=\"dismiss()\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n\n<div class=\"modal-body pad\">\n  <div *ngIf=\"health\">\n    <h5 jhiTranslate=\"health.details.properties\">Properties</h5>\n\n    <div class=\"table-responsive\">\n      <table class=\"table table-striped\" aria-describedby=\"showHealthLabel\">\n        <thead>\n          <tr>\n            <th scope=\"col\" class=\"text-left\" jhiTranslate=\"health.details.name\">Name</th>\n            <th scope=\"col\" class=\"text-left\" jhiTranslate=\"health.details.value\">Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let healthDetail of health.value.details! | keyvalue\">\n            <td class=\"text-left\">{{ healthDetail.key }}</td>\n            <td class=\"text-left\">{{ readableValue(healthDetail.value) }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button data-dismiss=\"modal\" class=\"btn btn-secondary float-left\" type=\"button\" (click)=\"dismiss()\">Done</button>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\settings\\settings.component.spec.ts",{"fileContent":"jest.mock('@ngx-translate/core');\njest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { throwError, of } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { SettingsComponent } from './settings.component';\n\ndescribe('SettingsComponent', () => {\n  let comp: SettingsComponent;\n  let fixture: ComponentFixture<SettingsComponent>;\n  let mockAccountService: AccountService;\n  const account: Account = {\n    firstName: 'John',\n    lastName: 'Doe',\n    activated: true,\n    email: 'john.doe@mail.com',\n    langKey: 'fr',\n    login: 'john',\n    authorities: [],\n    imageUrl: '',\n  };\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [SettingsComponent],\n        providers: [FormBuilder, TranslateService, AccountService],\n      })\n        .overrideTemplate(SettingsComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(SettingsComponent);\n    comp = fixture.componentInstance;\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.identity = jest.fn(() => of(account));\n    mockAccountService.getAuthenticationState = jest.fn(() => of(account));\n  });\n\n  it('should send the current identity upon save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => of({}));\n    const settingsFormValues = {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@mail.com',\n      langKey: 'fr',\n    };\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(mockAccountService.identity).toHaveBeenCalled();\n    expect(mockAccountService.save).toHaveBeenCalledWith(account);\n    expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);\n    expect(comp.settingsForm.value).toEqual(settingsFormValues);\n  });\n\n  it('should notify of success upon successful save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => of({}));\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(comp.success).toBe(true);\n  });\n\n  it('should notify of error upon failed save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => throwError('ERROR'));\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(comp.success).toBe(false);\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/settings/settings.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\settings\\settings.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { LANGUAGES } from 'app/config/language.constants';\n\n@Component({\n  selector: 'jhi-settings',\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  account!: Account;\n  success = false;\n  languages = LANGUAGES;\n  settingsForm = this.fb.group({\n    firstName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    lastName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    email: [undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    langKey: [undefined],\n  });\n\n  constructor(private accountService: AccountService, private fb: FormBuilder, private translateService: TranslateService) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => {\n      if (account) {\n        this.settingsForm.patchValue({\n          firstName: account.firstName,\n          lastName: account.lastName,\n          email: account.email,\n          langKey: account.langKey,\n        });\n\n        this.account = account;\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    this.account.firstName = this.settingsForm.get('firstName')!.value;\n    this.account.lastName = this.settingsForm.get('lastName')!.value;\n    this.account.email = this.settingsForm.get('email')!.value;\n    this.account.langKey = this.settingsForm.get('langKey')!.value;\n\n    this.accountService.save(this.account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(this.account);\n\n      if (this.account.langKey !== this.translateService.currentLang) {\n        this.translateService.use(this.account.langKey);\n      }\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\settings\\settings.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 jhiTranslate=\"settings.title\" [translateValues]=\"{ username: account.login }\" *ngIf=\"account\">\n        User settings for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"settings.messages.success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" *ngIf=\"account\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"firstName\" jhiTranslate=\"settings.form.firstname\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"{{ 'settings.form.firstname.placeholder' | translate }}\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.firstname.required\"\n            >\n              Your first name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.minlength\"\n            >\n              Your first name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.maxlength\"\n            >\n              Your first name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"lastName\" jhiTranslate=\"settings.form.lastname\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"{{ 'settings.form.lastname.placeholder' | translate }}\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.lastname.required\"\n            >\n              Your last name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.minlength\"\n            >\n              Your last name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.maxlength\"\n            >\n              Your last name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\" *ngIf=\"languages && languages.length > 0\">\n          <label for=\"langKey\" jhiTranslate=\"settings.form.language\">Language</label>\n          <select class=\"form-control\" id=\"langKey\" name=\"langKey\" formControlName=\"langKey\" data-cy=\"langKey\">\n            <option *ngFor=\"let language of languages\" [value]=\"language\">{{ language | findLanguageFromKey }}</option>\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"settingsForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"settings.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of, throwError } from 'rxjs';\n\nimport { HealthComponent } from './health.component';\nimport { HealthService } from './health.service';\nimport { Health } from './health.model';\n\ndescribe('HealthComponent', () => {\n  let comp: HealthComponent;\n  let fixture: ComponentFixture<HealthComponent>;\n  let service: HealthService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [HealthComponent],\n      })\n        .overrideTemplate(HealthComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(HealthComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(HealthService);\n  });\n\n  describe('getBadgeClass', () => {\n    it('should get badge class', () => {\n      const upBadgeClass = comp.getBadgeClass('UP');\n      const downBadgeClass = comp.getBadgeClass('DOWN');\n      expect(upBadgeClass).toEqual('badge-success');\n      expect(downBadgeClass).toEqual('badge-danger');\n    });\n  });\n\n  describe('refresh', () => {\n    it('should call refresh on init', () => {\n      // GIVEN\n      const health: Health = { status: 'UP', components: { mail: { status: 'UP', details: { mailDetail: 'mail' } } } };\n      jest.spyOn(service, 'checkHealth').mockReturnValue(of(health));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.checkHealth).toHaveBeenCalled();\n      expect(comp.health).toEqual(health);\n    });\n\n    it('should handle a 503 on refreshing health data', () => {\n      // GIVEN\n      const health: Health = { status: 'DOWN', components: { mail: { status: 'DOWN' } } };\n      jest.spyOn(service, 'checkHealth').mockReturnValue(throwError(new HttpErrorResponse({ status: 503, error: health })));\n\n      // WHEN\n      comp.refresh();\n\n      // THEN\n      expect(service.checkHealth).toHaveBeenCalled();\n      expect(comp.health).toEqual(health);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/modal/health-modal.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HealthService } from './health.service';\nimport { Health, HealthDetails, HealthStatus } from './health.model';\nimport { HealthModalComponent } from './modal/health-modal.component';\n\n@Component({\n  selector: 'jhi-health',\n  templateUrl: './health.component.html',\n})\nexport class HealthComponent implements OnInit {\n  health?: Health;\n\n  constructor(private modalService: NgbModal, private healthService: HealthService) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  getBadgeClass(statusState: HealthStatus): string {\n    if (statusState === 'UP') {\n      return 'badge-success';\n    }\n    return 'badge-danger';\n  }\n\n  refresh(): void {\n    this.healthService.checkHealth().subscribe(\n      health => (this.health = health),\n      (error: HttpErrorResponse) => {\n        if (error.status === 503) {\n          this.health = error.error;\n        }\n      }\n    );\n  }\n\n  showHealth(health: { key: string; value: HealthDetails }): void {\n    const modalRef = this.modalService.open(HealthModalComponent);\n    modalRef.componentInstance.health = health;\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/modal/health-modal.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Health } from './health.model';\n\n@Injectable({ providedIn: 'root' })\nexport class HealthService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  checkHealth(): Observable<Health> {\n    return this.http.get<Health>(this.applicationConfigService.getEndpointFor('management/health'));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.component.html",{"fileContent":"<div>\n  <h2>\n    <span id=\"health-page-heading\" jhiTranslate=\"health.title\" data-cy=\"healthPageHeading\">Health Checks</span>\n\n    <button class=\"btn btn-primary float-right\" (click)=\"refresh()\">\n      <fa-icon icon=\"sync\"></fa-icon> <span jhiTranslate=\"health.refresh.button\">Refresh</span>\n    </button>\n  </h2>\n\n  <div class=\"table-responsive\">\n    <table id=\"healthCheck\" class=\"table table-striped\" aria-describedby=\"health-page-heading\">\n      <thead>\n        <tr>\n          <th scope=\"col\" jhiTranslate=\"health.table.service\">Service Name</th>\n          <th scope=\"col\" class=\"text-center\" jhiTranslate=\"health.table.status\">Status</th>\n          <th scope=\"col\" class=\"text-center\" jhiTranslate=\"health.details.details\">Details</th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"health\">\n        <tr *ngFor=\"let componentHealth of health.components | keyvalue\">\n          <td>\n            {{ 'health.indicator.' + componentHealth.key | translate }}\n          </td>\n          <td class=\"text-center\">\n            <span\n              class=\"badge\"\n              [ngClass]=\"getBadgeClass(componentHealth.value!.status)\"\n              jhiTranslate=\"{{ 'health.status.' + componentHealth.value!.status }}\"\n            >\n              {{ componentHealth.value!.status }}\n            </span>\n          </td>\n          <td class=\"text-center\">\n            <a\n              class=\"hand\"\n              (click)=\"showHealth({ key: componentHealth.key, value: componentHealth.value! })\"\n              *ngIf=\"componentHealth.value!.details\"\n            >\n              <fa-icon icon=\"eye\"></fa-icon>\n            </a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.component.spec.ts",{"fileContent":"import { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\n\nimport { PasswordResetInitComponent } from './password-reset-init.component';\nimport { PasswordResetInitService } from './password-reset-init.service';\n\ndescribe('PasswordResetInitComponent', () => {\n  let fixture: ComponentFixture<PasswordResetInitComponent>;\n  let comp: PasswordResetInitComponent;\n\n  beforeEach(() => {\n    fixture = TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [PasswordResetInitComponent],\n      providers: [FormBuilder],\n    })\n      .overrideTemplate(PasswordResetInitComponent, '')\n      .createComponent(PasswordResetInitComponent);\n    comp = fixture.componentInstance;\n  });\n\n  it('sets focus after the view has been initialized', () => {\n    const node = {\n      focus: jest.fn(),\n    };\n    comp.email = new ElementRef(node);\n\n    comp.ngAfterViewInit();\n\n    expect(node.focus).toHaveBeenCalled();\n  });\n\n  it('notifies of success upon successful requestReset', inject([PasswordResetInitService], (service: PasswordResetInitService) => {\n    jest.spyOn(service, 'save').mockReturnValue(of({}));\n    comp.resetRequestForm.patchValue({\n      email: 'user@domain.com',\n    });\n\n    comp.requestReset();\n\n    expect(service.save).toHaveBeenCalledWith('user@domain.com');\n    expect(comp.success).toBe(true);\n  }));\n\n  it('no notification of success upon error response', inject([PasswordResetInitService], (service: PasswordResetInitService) => {\n    jest.spyOn(service, 'save').mockReturnValue(\n      throwError({\n        status: 503,\n        data: 'something else',\n      })\n    );\n    comp.resetRequestForm.patchValue({\n      email: 'user@domain.com',\n    });\n    comp.requestReset();\n\n    expect(service.save).toHaveBeenCalledWith('user@domain.com');\n    expect(comp.success).toBe(false);\n  }));\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.component.ts",{"fileContent":"import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { PasswordResetInitService } from './password-reset-init.service';\n\n@Component({\n  selector: 'jhi-password-reset-init',\n  templateUrl: './password-reset-init.component.html',\n})\nexport class PasswordResetInitComponent implements AfterViewInit {\n  @ViewChild('email', { static: false })\n  email?: ElementRef;\n\n  success = false;\n  resetRequestForm = this.fb.group({\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private passwordResetInitService: PasswordResetInitService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.email) {\n      this.email.nativeElement.focus();\n    }\n  }\n\n  requestReset(): void {\n    this.passwordResetInitService.save(this.resetRequestForm.get(['email'])!.value).subscribe(() => (this.success = true));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetInitService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(mail: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/init'), mail);\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"reset.request.title\">Reset your password</h1>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <div class=\"alert alert-warning\" *ngIf=\"!success\">\n        <span jhiTranslate=\"reset.request.messages.info\">Enter the email address you used to register.</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.request.messages.success\">Check your emails for details on how to reset your password.</span>\n      </div>\n\n      <form *ngIf=\"!success\" name=\"form\" role=\"form\" (ngSubmit)=\"requestReset()\" [formGroup]=\"resetRequestForm\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"emailResetPassword\"\n            #email\n          />\n\n          <div\n            *ngIf=\"\n              resetRequestForm.get('email')!.invalid && (resetRequestForm.get('email')!.dirty || resetRequestForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"resetRequestForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"reset.request.form.button\"\n          data-cy=\"submit\"\n        >\n          Reset\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, ConfigProps, Env, PropertySource } from './configuration.model';\n\ndescribe('Logs Service', () => {\n  let service: ConfigurationService;\n  let httpMock: HttpTestingController;\n  let expectedResult: Bean[] | PropertySource[] | null;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    expectedResult = null;\n    service = TestBed.inject(ConfigurationService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should get the config', () => {\n      const bean: Bean = {\n        prefix: 'jhipster',\n        properties: {\n          clientApp: {\n            name: 'jhipsterApp',\n          },\n        },\n      };\n      const configProps: ConfigProps = {\n        contexts: {\n          jhipster: {\n            beans: {\n              'tech.jhipster.config.JHipsterProperties': bean,\n            },\n          },\n        },\n      };\n      service.getBeans().subscribe(received => (expectedResult = received));\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(configProps);\n      expect(expectedResult).toEqual([bean]);\n    });\n\n    it('should get the env', () => {\n      const propertySources: PropertySource[] = [\n        {\n          name: 'server.ports',\n          properties: {\n            'local.server.port': {\n              value: '8080',\n            },\n          },\n        },\n      ];\n      const env: Env = { propertySources };\n      service.getPropertySources().subscribe(received => (expectedResult = received));\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(env);\n      expect(expectedResult).toEqual(propertySources);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Bean, Beans, ConfigProps, Env, PropertySource } from './configuration.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurationService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getBeans(): Observable<Bean[]> {\n    return this.http.get<ConfigProps>(this.applicationConfigService.getEndpointFor('management/configprops')).pipe(\n      map(configProps =>\n        Object.values(\n          Object.values(configProps.contexts)\n            .map(context => context.beans)\n            .reduce((allBeans: Beans, contextBeans: Beans) => ({ ...allBeans, ...contextBeans }))\n        )\n      )\n    );\n  }\n\n  getPropertySources(): Observable<PropertySource[]> {\n    return this.http.get<Env>(this.applicationConfigService.getEndpointFor('management/env')).pipe(map(env => env.propertySources));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\activate\\activate.component.spec.ts",{"fileContent":"import { TestBed, waitForAsync, tick, fakeAsync, inject } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { ActivateService } from './activate.service';\nimport { ActivateComponent } from './activate.component';\n\ndescribe('ActivateComponent', () => {\n  let comp: ActivateComponent;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [ActivateComponent],\n        providers: [\n          {\n            provide: ActivatedRoute,\n            useValue: { queryParams: of({ key: 'ABC123' }) },\n          },\n        ],\n      })\n        .overrideTemplate(ActivateComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    const fixture = TestBed.createComponent(ActivateComponent);\n    comp = fixture.componentInstance;\n  });\n\n  it('calls activate.get with the key from params', inject(\n    [ActivateService],\n    fakeAsync((service: ActivateService) => {\n      jest.spyOn(service, 'get').mockReturnValue(of());\n\n      comp.ngOnInit();\n      tick();\n\n      expect(service.get).toHaveBeenCalledWith('ABC123');\n    })\n  ));\n\n  it('should set set success to true upon successful activation', inject(\n    [ActivateService],\n    fakeAsync((service: ActivateService) => {\n      jest.spyOn(service, 'get').mockReturnValue(of({}));\n\n      comp.ngOnInit();\n      tick();\n\n      expect(comp.error).toBe(false);\n      expect(comp.success).toBe(true);\n    })\n  ));\n\n  it('should set set error to true upon activation failure', inject(\n    [ActivateService],\n    fakeAsync((service: ActivateService) => {\n      jest.spyOn(service, 'get').mockReturnValue(throwError('ERROR'));\n\n      comp.ngOnInit();\n      tick();\n\n      expect(comp.error).toBe(true);\n      expect(comp.success).toBe(false);\n    })\n  ));\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/activate/activate.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/activate/activate.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\activate\\activate.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivateService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/activate'), {\n      params: new HttpParams().set('key', key),\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\activate\\activate.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ActivateService } from './activate.service';\n\n@Component({\n  selector: 'jhi-activate',\n  templateUrl: './activate.component.html',\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(private activateService: ActivateService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.pipe(mergeMap(params => this.activateService.get(params.key))).subscribe(\n      () => (this.success = true),\n      () => (this.error = true)\n    );\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/activate/activate.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\activate\\activate.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"activate.title\">Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"activate.messages.success\"><strong>Your user account has been activated.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"activate.messages.error\">\n        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\delete\\user-management-delete-dialog.component.spec.ts",{"fileContent":"jest.mock('@ng-bootstrap/ng-bootstrap');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { of } from 'rxjs';\n\nimport { UserManagementService } from '../service/user-management.service';\n\nimport { UserManagementDeleteDialogComponent } from './user-management-delete-dialog.component';\n\ndescribe('User Management Delete Component', () => {\n  let comp: UserManagementDeleteDialogComponent;\n  let fixture: ComponentFixture<UserManagementDeleteDialogComponent>;\n  let service: UserManagementService;\n  let mockActiveModal: NgbActiveModal;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [UserManagementDeleteDialogComponent],\n        providers: [NgbActiveModal],\n      })\n        .overrideTemplate(UserManagementDeleteDialogComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementDeleteDialogComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(UserManagementService);\n    mockActiveModal = TestBed.inject(NgbActiveModal);\n  });\n\n  describe('confirmDelete', () => {\n    it('Should call delete service on confirmDelete', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        jest.spyOn(service, 'delete').mockReturnValue(of({}));\n\n        // WHEN\n        comp.confirmDelete('user');\n        tick();\n\n        // THEN\n        expect(service.delete).toHaveBeenCalledWith('user');\n        expect(mockActiveModal.close).toHaveBeenCalledWith('deleted');\n      })\n    ));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/delete/user-management-delete-dialog.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { RegisterService } from './register.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Registration } from './register.model';\n\ndescribe('RegisterService Service', () => {\n  let service: RegisterService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(RegisterService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call register endpoint with correct values', () => {\n      // GIVEN\n      const login = 'abc';\n      const email = 'test@test.com';\n      const password = 'pass';\n      const langKey = 'FR';\n      const registration = new Registration(login, email, password, langKey);\n\n      // WHEN\n      service.save(registration).subscribe();\n\n      const testRequest = httpMock.expectOne({\n        method: 'POST',\n        url: applicationConfigService.getEndpointFor('api/register'),\n      });\n\n      // THEN\n      expect(testRequest.request.body).toEqual({ email, langKey, login, password });\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/register/register.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.model.ts",{"fileContent":"export class Registration {\n  constructor(public login: string, public email: string, public password: string, public langKey: string) {}\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\activate\\activate.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { ActivateService } from './activate.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('ActivateService Service', () => {\n  let service: ActivateService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(ActivateService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call api/activate endpoint with correct values', () => {\n      // GIVEN\n      let expectedResult;\n      const key = 'key';\n      const value = true;\n\n      // WHEN\n      service.get(key).subscribe(received => {\n        expectedResult = received;\n      });\n      const testRequest = httpMock.expectOne({\n        method: 'GET',\n        url: applicationConfigService.getEndpointFor(`api/activate?key=${key}`),\n      });\n      testRequest.flush(value);\n\n      // THEN\n      expect(expectedResult).toEqual(value);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/activate/activate.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.spec.ts",{"fileContent":"import { inject, TestBed } from '@angular/core/testing';\n\nimport { ParseLinks } from './parse-links.service';\n\ndescribe('Parse links service test', () => {\n  describe('Parse Links Service Test', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        providers: [ParseLinks],\n      });\n    });\n\n    it('should throw an error when passed an empty string', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('');\n      }).toThrow(new Error('input must not be of zero length'));\n    }));\n\n    it('should throw an error when passed without comma', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should throw an error when passed without semicolon', inject([ParseLinks], (service: ParseLinks) => {\n      expect(function () {\n        service.parse('test,test2');\n      }).toThrow(new Error('section could not be split on \";\"'));\n    }));\n\n    it('should return links when headers are passed', inject([ParseLinks], (service: ParseLinks) => {\n      const links = { last: 0, first: 0 };\n      expect(service.parse(' </api/audits?page=0&size=20>; rel=\"last\",</api/audits?page=0&size=20>; rel=\"first\"')).toEqual(links);\n    }));\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/parse-links.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(',');\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section: string[] = p.split(';');\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? '';\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { MetricsComponent } from './metrics.component';\nimport { MetricsService } from './metrics.service';\nimport { Metrics } from './metrics.model';\n\ndescribe('MetricsComponent', () => {\n  let comp: MetricsComponent;\n  let fixture: ComponentFixture<MetricsComponent>;\n  let service: MetricsService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [MetricsComponent],\n      })\n        .overrideTemplate(MetricsComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MetricsComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(MetricsService);\n  });\n\n  describe('refresh', () => {\n    it('should call refresh on init', () => {\n      // GIVEN\n      jest.spyOn(service, 'getMetrics').mockReturnValue(of({} as Metrics));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.getMetrics).toHaveBeenCalled();\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.component.ts",{"fileContent":"import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { MetricsService } from './metrics.service';\nimport { Metrics, Thread } from './metrics.model';\n\n@Component({\n  selector: 'jhi-metrics',\n  templateUrl: './metrics.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsComponent implements OnInit {\n  metrics?: Metrics;\n  threads?: Thread[];\n  updatingMetrics = true;\n\n  constructor(private metricsService: MetricsService, private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  refresh(): void {\n    this.updatingMetrics = true;\n    combineLatest([this.metricsService.getMetrics(), this.metricsService.threadDump()]).subscribe(([metrics, threadDump]) => {\n      this.metrics = metrics;\n      this.threads = threadDump.threads;\n      this.updatingMetrics = false;\n      this.changeDetector.markForCheck();\n    });\n  }\n\n  metricsKeyExists(key: keyof Metrics): boolean {\n    return Boolean(this.metrics?.[key]);\n  }\n\n  metricsKeyExistsAndObjectNotEmpty(key: keyof Metrics): boolean {\n    return Boolean(this.metrics?.[key] && JSON.stringify(this.metrics[key]) !== '{}');\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Metrics, ThreadDump } from './metrics.model';\n\n@Injectable({ providedIn: 'root' })\nexport class MetricsService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getMetrics(): Observable<Metrics> {\n    return this.http.get<Metrics>(this.applicationConfigService.getEndpointFor('management/jhimetrics'));\n  }\n\n  threadDump(): Observable<ThreadDump> {\n    return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/threaddump'));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/metrics/metrics.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.component.html",{"fileContent":"<div>\n  <h2>\n    <span id=\"metrics-page-heading\" jhiTranslate=\"metrics.title\" data-cy=\"metricsPageHeading\">Application Metrics</span>\n\n    <button class=\"btn btn-primary float-right\" (click)=\"refresh()\">\n      <fa-icon icon=\"sync\"></fa-icon> <span jhiTranslate=\"metrics.refresh.button\">Refresh</span>\n    </button>\n  </h2>\n\n  <h3 jhiTranslate=\"metrics.jvm.title\">JVM Metrics</h3>\n\n  <div class=\"row\" *ngIf=\"metrics && !updatingMetrics\">\n    <jhi-jvm-memory class=\"col-md-4\" [updating]=\"updatingMetrics\" [jvmMemoryMetrics]=\"metrics.jvm\"></jhi-jvm-memory>\n\n    <jhi-jvm-threads class=\"col-md-4\" [threads]=\"threads\"></jhi-jvm-threads>\n\n    <jhi-metrics-system class=\"col-md-4\" [updating]=\"updatingMetrics\" [systemMetrics]=\"metrics.processMetrics\"></jhi-metrics-system>\n  </div>\n\n  <jhi-metrics-garbagecollector\n    *ngIf=\"metrics && metricsKeyExists('garbageCollector')\"\n    [updating]=\"updatingMetrics\"\n    [garbageCollectorMetrics]=\"metrics.garbageCollector\"\n  ></jhi-metrics-garbagecollector>\n\n  <div class=\"well well-lg\" *ngIf=\"updatingMetrics\" jhiTranslate=\"metrics.updating\">Updating...</div>\n\n  <jhi-metrics-request\n    *ngIf=\"metrics && metricsKeyExists('http.server.requests')\"\n    [updating]=\"updatingMetrics\"\n    [requestMetrics]=\"metrics['http.server.requests']\"\n  ></jhi-metrics-request>\n\n  <jhi-metrics-endpoints-requests\n    *ngIf=\"metrics && metricsKeyExists('services')\"\n    [updating]=\"updatingMetrics\"\n    [endpointsRequestsMetrics]=\"metrics.services\"\n  ></jhi-metrics-endpoints-requests>\n\n  <jhi-metrics-cache\n    *ngIf=\"metrics && metricsKeyExists('cache')\"\n    [updating]=\"updatingMetrics\"\n    [cacheMetrics]=\"metrics.cache\"\n  ></jhi-metrics-cache>\n\n  <jhi-metrics-datasource\n    *ngIf=\"metrics && metricsKeyExistsAndObjectNotEmpty('databases')\"\n    [updating]=\"updatingMetrics\"\n    [datasourceMetrics]=\"metrics.databases\"\n  ></jhi-metrics-datasource>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert.component.spec.ts",{"fileContent":"jest.mock('app/core/util/alert.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n\nimport { AlertService } from 'app/core/util/alert.service';\n\nimport { AlertComponent } from './alert.component';\n\ndescribe('Alert Component', () => {\n  let comp: AlertComponent;\n  let fixture: ComponentFixture<AlertComponent>;\n  let mockAlertService: AlertService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [AlertComponent],\n        providers: [AlertService],\n      })\n        .overrideTemplate(AlertComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AlertComponent);\n    comp = fixture.componentInstance;\n    mockAlertService = TestBed.inject(AlertService);\n  });\n\n  it('Should call alertService.get on init', () => {\n    // WHEN\n    comp.ngOnInit();\n\n    // THEN\n    expect(mockAlertService.get).toHaveBeenCalled();\n  });\n\n  it('Should call alertService.clear on destroy', () => {\n    // WHEN\n    comp.ngOnDestroy();\n\n    // THEN\n    expect(mockAlertService.clear).toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/alert.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/alert/alert.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert.component.ts",{"fileContent":"import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { AlertService, Alert } from 'app/core/util/alert.service';\n\n@Component({\n  selector: 'jhi-alert',\n  templateUrl: './alert.component.html',\n})\nexport class AlertComponent implements OnInit, OnDestroy {\n  alerts: Alert[] = [];\n\n  constructor(private alertService: AlertService) {}\n\n  ngOnInit(): void {\n    this.alerts = this.alertService.get();\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.alertService.clear();\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/alert.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert.component.html",{"fileContent":"<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert *ngIf=\"alert.message\" [type]=\"alert.type\" (closed)=\"close(alert)\">\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\logs\\logs.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { LogsService } from './logs.service';\n\ndescribe('Logs Service', () => {\n  let service: LogsService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(LogsService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should change log level', () => {\n      service.changeLevel('main', 'ERROR').subscribe();\n\n      const req = httpMock.expectOne({ method: 'POST' });\n      expect(req.request.body).toEqual({ configuredLevel: 'ERROR' });\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/logs/logs.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/logs/log.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\logs\\logs.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { LoggersResponse, Level } from './log.model';\n\n@Injectable({ providedIn: 'root' })\nexport class LogsService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  changeLevel(name: string, configuredLevel: Level): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor(`management/loggers/${name}`), { configuredLevel });\n  }\n\n  findAll(): Observable<LoggersResponse> {\n    return this.http.get<LoggersResponse>(this.applicationConfigService.getEndpointFor('management/loggers'));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/logs/log.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\date\\format-medium-datetime.pipe.spec.ts",{"fileContent":"import * as dayjs from 'dayjs';\n\nimport { FormatMediumDatetimePipe } from './format-medium-datetime.pipe';\n\ndescribe('FormatMediumDatePipe', () => {\n  const formatMediumDatetimePipe = new FormatMediumDatetimePipe();\n\n  it('should return an empty string when receive undefined', () => {\n    expect(formatMediumDatetimePipe.transform(undefined)).toBe('');\n  });\n\n  it('should return an empty string when receive null', () => {\n    expect(formatMediumDatetimePipe.transform(null)).toBe('');\n  });\n\n  it('should format date like this D MMM YYYY', () => {\n    expect(formatMediumDatetimePipe.transform(dayjs('2020-11-16').locale('fr'))).toBe('16 Nov 2020 00:00:00');\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/date/format-medium-datetime.pipe.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\date\\format-medium-datetime.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\n\n@Pipe({\n  name: 'formatMediumDatetime',\n})\nexport class FormatMediumDatetimePipe implements PipeTransform {\n  transform(day: dayjs.Dayjs | null | undefined): string {\n    return day ? day.format('D MMM YYYY HH:mm:ss') : '';\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\operators.spec.ts",{"fileContent":"import { filterNaN, isPresent } from './operators';\n\ndescribe('Operators Test', () => {\n  describe('isPresent', () => {\n    it('should remove null and undefined values', () => {\n      expect([1, null, undefined].filter(isPresent)).toEqual([1]);\n    });\n  });\n\n  describe('filterNaN', () => {\n    it('should return 0 for NaN', () => {\n      expect(filterNaN(NaN)).toBe(0);\n    });\n    it('should return number for a number', () => {\n      expect(filterNaN(12345)).toBe(12345);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/operators.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\operators.ts",{"fileContent":"/*\n * Function used to workaround https://github.com/microsoft/TypeScript/issues/16069\n * es2019 alternative `const filteredArr = myArr.flatMap((x) => x ? x : []);`\n */\nexport function isPresent<T>(t: T | undefined | null | void): t is T {\n  return t !== undefined && t !== null;\n}\n\nexport const filterNaN = (input: number): number => (isNaN(input) ? 0 : input);\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { EventManager } from 'app/core/util/event-manager.service';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\n\nimport { AlertErrorComponent } from './alert-error.component';\n\ndescribe('Alert Error Component', () => {\n  let comp: AlertErrorComponent;\n  let fixture: ComponentFixture<AlertErrorComponent>;\n  let eventManager: EventManager;\n  let alertService: AlertService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [TranslateModule.forRoot()],\n        declarations: [AlertErrorComponent],\n        providers: [EventManager, AlertService],\n      })\n        .overrideTemplate(AlertErrorComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AlertErrorComponent);\n    comp = fixture.componentInstance;\n    eventManager = TestBed.inject(EventManager);\n    alertService = TestBed.inject(AlertService);\n    alertService.addAlert = (alert: Alert, alerts?: Alert[]) => {\n      if (alerts) {\n        alerts.push(alert);\n      }\n      return alert;\n    };\n  });\n\n  describe('Error Handling', () => {\n    it('Should display an alert on status 0', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 0 } });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.server.not.reachable');\n    });\n\n    it('Should display an alert on status 404', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 404 } });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.url.not.found');\n    });\n\n    it('Should display an alert on generic error', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: { message: 'Error Message' } } });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: 'Second Error Message' } });\n      // THEN\n      expect(comp.alerts.length).toBe(2);\n      expect(comp.alerts[0].translationKey).toBe('Error Message');\n      expect(comp.alerts[1].translationKey).toBe('Second Error Message');\n    });\n\n    it('Should display an alert on status 400 for generic error', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          type: 'https://www.jhipster.tech/problem/constraint-violation',\n          title: 'Bad Request',\n          status: 400,\n          path: '/api/foos',\n          message: 'error.validation',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.validation');\n    });\n\n    it('Should display an alert on status 400 for generic error without message', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        error: 'Bad Request',\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('Bad Request');\n    });\n\n    it('Should display an alert on status 400 for invalid parameters', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          type: 'https://www.jhipster.tech/problem/constraint-violation',\n          title: 'Method argument not valid',\n          status: 400,\n          path: '/api/foos',\n          message: 'error.validation',\n          fieldErrors: [{ objectName: 'foo', field: 'minField', message: 'Min' }],\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.Size');\n    });\n\n    it('Should display an alert on status 400 for error headers', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders().append('app-error', 'Error Message').append('app-params', 'foo'),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          status: 400,\n          message: 'error.validation',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('Error Message');\n    });\n\n    it('Should display an alert on status 500 with detail', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 500,\n        statusText: 'Internal server error',\n        error: {\n          status: 500,\n          message: 'error.http.500',\n          detail: 'Detailed error message',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.http.500');\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/event-manager.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/alert.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/alert/alert-error.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/alert/alert-error.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts",{"fileContent":"import { Component, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AlertError } from './alert-error.model';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\n\n@Component({\n  selector: 'jhi-alert-error',\n  templateUrl: './alert-error.component.html',\n})\nexport class AlertErrorComponent implements OnDestroy {\n  alerts: Alert[] = [];\n  errorListener: Subscription;\n  httpErrorListener: Subscription;\n\n  constructor(private alertService: AlertService, private eventManager: EventManager, translateService: TranslateService) {\n    this.errorListener = eventManager.subscribe('gatewayApp.error', (response: EventWithContent<unknown> | string) => {\n      const errorResponse = (response as EventWithContent<AlertError>).content;\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n    });\n\n    this.httpErrorListener = eventManager.subscribe('gatewayApp.httpError', (response: EventWithContent<unknown> | string) => {\n      const httpErrorResponse = (response as EventWithContent<HttpErrorResponse>).content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n          break;\n\n        case 400: {\n          const arr = httpErrorResponse.headers.keys();\n          let errorHeader: string | null = null;\n          let entityKey: string | null = null;\n          for (const entry of arr) {\n            if (entry.toLowerCase().endsWith('app-error')) {\n              errorHeader = httpErrorResponse.headers.get(entry);\n            } else if (entry.toLowerCase().endsWith('app-params')) {\n              entityKey = httpErrorResponse.headers.get(entry);\n            }\n          }\n          if (errorHeader) {\n            const alertData = entityKey ? { entityName: translateService.instant(`global.menu.entities.${entityKey}`) } : undefined;\n            this.addErrorAlert(errorHeader, errorHeader, alertData);\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n            const fieldErrors = httpErrorResponse.error.fieldErrors;\n            for (const fieldError of fieldErrors) {\n              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                fieldError.message = 'Size';\n              }\n              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n              const convertedField: string = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n              const fieldName: string = translateService.instant(`gatewayApp.${fieldError.objectName as string}.${convertedField}`);\n              this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message as string}`, { fieldName });\n            }\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n          break;\n        }\n\n        case 404:\n          this.addErrorAlert('Not found', 'error.url.not.found');\n          break;\n\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n      }\n    });\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n\n  private addErrorAlert(message?: string, translationKey?: string, translationParams?: { [key: string]: unknown }): void {\n    this.alertService.addAlert({ type: 'danger', message, translationKey, translationParams }, this.alerts);\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/shared/alert/alert-error.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/alert.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/event-manager.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/translation.config.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.html",{"fileContent":"<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert *ngIf=\"alert.message\" [type]=\"alert.type\" (closed)=\"close(alert)\">\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.component.spec.ts",{"fileContent":"jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\njest.mock('app/login/login.service');\n\nimport { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { Router, Navigation } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { LoginService } from './login.service';\nimport { LoginComponent } from './login.component';\n\ndescribe('LoginComponent', () => {\n  let comp: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let mockRouter: Router;\n  let mockAccountService: AccountService;\n  let mockLoginService: LoginService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [LoginComponent],\n        providers: [\n          FormBuilder,\n          AccountService,\n          Router,\n          {\n            provide: LoginService,\n            useValue: {\n              login: jest.fn(() => of({})),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(LoginComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    comp = fixture.componentInstance;\n    mockRouter = TestBed.inject(Router);\n    mockLoginService = TestBed.inject(LoginService);\n    mockAccountService = TestBed.inject(AccountService);\n  });\n\n  describe('ngOnInit', () => {\n    it('Should call accountService.identity on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.identity).toHaveBeenCalled();\n    });\n\n    it('Should call accountService.isAuthenticated on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.isAuthenticated).toHaveBeenCalled();\n    });\n\n    it('should navigate to home page on Init if authenticated=true', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n      mockAccountService.isAuthenticated = () => true;\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n    });\n  });\n\n  describe('ngAfterViewInit', () => {\n    it('shoult set focus to username input after the view has been initialized', () => {\n      // GIVEN\n      const node = {\n        focus: jest.fn(),\n      };\n      comp.username = new ElementRef(node);\n\n      // WHEN\n      comp.ngAfterViewInit();\n\n      // THEN\n      expect(node.focus).toHaveBeenCalled();\n    });\n  });\n\n  describe('login', () => {\n    it('should authenticate the user and navigate to home page', () => {\n      // GIVEN\n      const credentials = {\n        username: 'admin',\n        password: 'admin',\n        rememberMe: true,\n      };\n\n      comp.loginForm.patchValue({\n        username: 'admin',\n        password: 'admin',\n        rememberMe: true,\n      });\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(false);\n      expect(mockLoginService.login).toHaveBeenCalledWith(credentials);\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n    });\n\n    it('should authenticate the user but not navigate to home page if authentication process is already routing to cached url from localstorage', () => {\n      // GIVEN\n      jest.spyOn(mockRouter, 'getCurrentNavigation').mockReturnValue({} as Navigation);\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(false);\n      expect(mockRouter.navigate).not.toHaveBeenCalled();\n    });\n\n    it('should stay on login form and show error message on login error', () => {\n      // GIVEN\n      mockLoginService.login = jest.fn(() => throwError({}));\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(true);\n      expect(mockRouter.navigate).not.toHaveBeenCalled();\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\nimport { Login } from './login.model';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  constructor(private accountService: AccountService, private authServerProvider: AuthServerProvider) {}\n\n  login(credentials: Login): Observable<Account | null> {\n    return this.authServerProvider.login(credentials).pipe(mergeMap(() => this.accountService.identity(true)));\n  }\n\n  logout(): void {\n    this.authServerProvider.logout().subscribe({ complete: () => this.accountService.authenticate(null) });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Login } from 'app/login/login.model';\n\ntype JwtToken = {\n  id_token: string;\n};\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(\n    private http: HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  getToken(): string {\n    const tokenInLocalStorage: string | null = this.localStorageService.retrieve('authenticationToken');\n    const tokenInSessionStorage: string | null = this.sessionStorageService.retrieve('authenticationToken');\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? '';\n  }\n\n  login(credentials: Login): Observable<void> {\n    return this.http\n      .post<JwtToken>(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials)\n      .pipe(map(response => this.authenticateSuccess(response, credentials.rememberMe)));\n  }\n\n  logout(): Observable<void> {\n    return new Observable(observer => {\n      this.localStorageService.clear('authenticationToken');\n      this.sessionStorageService.clear('authenticationToken');\n      observer.complete();\n    });\n  }\n\n  private authenticateSuccess(response: JwtToken, rememberMe: boolean): void {\n    const jwt = response.id_token;\n    if (rememberMe) {\n      this.localStorageService.store('authenticationToken', jwt);\n      this.sessionStorageService.clear('authenticationToken');\n    } else {\n      this.sessionStorageService.store('authenticationToken', jwt);\n      this.localStorageService.clear('authenticationToken');\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.component.ts",{"fileContent":"import { Component, ViewChild, OnInit, AfterViewInit, ElementRef } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { LoginService } from 'app/login/login.service';\nimport { AccountService } from 'app/core/auth/account.service';\n\n@Component({\n  selector: 'jhi-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit, AfterViewInit {\n  @ViewChild('username', { static: false })\n  username!: ElementRef;\n\n  authenticationError = false;\n\n  loginForm = this.fb.group({\n    username: [null, [Validators.required]],\n    password: [null, [Validators.required]],\n    rememberMe: [false],\n  });\n\n  constructor(\n    private accountService: AccountService,\n    private loginService: LoginService,\n    private router: Router,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    // if already authenticated then navigate to home page\n    this.accountService.identity().subscribe(() => {\n      if (this.accountService.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.username.nativeElement.focus();\n  }\n\n  login(): void {\n    this.loginService\n      .login({\n        username: this.loginForm.get('username')!.value,\n        password: this.loginForm.get('password')!.value,\n        rememberMe: this.loginForm.get('rememberMe')!.value,\n      })\n      .subscribe(\n        () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate(['']);\n          }\n        },\n        () => (this.authenticationError = true)\n      );\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-lg-6 col-md-8 col-sm-10\">\n      <h1 jhiTranslate=\"login.title\" data-cy=\"loginTitle\">Sign in</h1>\n      <div class=\"alert alert-danger\" *ngIf=\"authenticationError\" jhiTranslate=\"login.messages.error.authentication\" data-cy=\"loginError\">\n        <strong>Failed to sign in!</strong> Please check your credentials and try again.\n      </div>\n      <form class=\"form\" role=\"form\" (ngSubmit)=\"login()\" [formGroup]=\"loginForm\">\n        <div class=\"form-group\">\n          <label class=\"username-label\" for=\"username\" jhiTranslate=\"global.form.username.label\">Login</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"username\"\n            id=\"username\"\n            placeholder=\"{{ 'global.form.username.placeholder' | translate }}\"\n            formControlName=\"username\"\n            #username\n            data-cy=\"username\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"password\" jhiTranslate=\"login.form.password\">Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"{{ 'login.form.password.placeholder' | translate }}\"\n            formControlName=\"password\"\n            data-cy=\"password\"\n          />\n        </div>\n\n        <div class=\"form-check\">\n          <label class=\"form-check-label\" for=\"rememberMe\">\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" formControlName=\"rememberMe\" />\n            <span jhiTranslate=\"login.form.rememberme\">Remember me</span>\n          </label>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\" jhiTranslate=\"login.form.button\" data-cy=\"submit\">Sign in</button>\n      </form>\n      <div class=\"mt-3 alert alert-warning\">\n        <a class=\"alert-link\" routerLink=\"/account/reset/request\" jhiTranslate=\"login.password.forgot\" data-cy=\"forgetYourPasswordSelector\"\n          >Did you forget your password?</a\n        >\n      </div>\n\n      <div class=\"alert alert-warning\">\n        <span jhiTranslate=\"global.messages.info.register.noaccount\">You don't have an account yet?</span>\n        <a class=\"alert-link\" routerLink=\"/account/register\" jhiTranslate=\"global.messages.info.register.link\">Register a new account</a>\n      </div>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\navbar\\navbar.component.spec.ts",{"fileContent":"jest.mock('@angular/router');\njest.mock('app/login/login.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { ProfileInfo } from 'app/layouts/profiles/profile-info.model';\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\nimport { LoginService } from 'app/login/login.service';\n\nimport { NavbarComponent } from './navbar.component';\n\ndescribe('Navbar Component', () => {\n  let comp: NavbarComponent;\n  let fixture: ComponentFixture<NavbarComponent>;\n  let accountService: AccountService;\n  let profileService: ProfileService;\n  const account: Account = {\n    activated: true,\n    authorities: [],\n    email: '',\n    firstName: 'John',\n    langKey: '',\n    lastName: 'Doe',\n    login: 'john.doe',\n    imageUrl: '',\n  };\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot(), TranslateModule.forRoot()],\n        declarations: [NavbarComponent],\n        providers: [Router, LoginService],\n      })\n        .overrideTemplate(NavbarComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NavbarComponent);\n    comp = fixture.componentInstance;\n    accountService = TestBed.inject(AccountService);\n    profileService = TestBed.inject(ProfileService);\n  });\n\n  it('Should call profileService.getProfileInfo on init', () => {\n    // GIVEN\n    jest.spyOn(profileService, 'getProfileInfo').mockReturnValue(of(new ProfileInfo()));\n\n    // WHEN\n    comp.ngOnInit();\n\n    // THEN\n    expect(profileService.getProfileInfo).toHaveBeenCalled();\n  });\n\n  it('Should hold current authenticated user in variable account', () => {\n    // WHEN\n    comp.ngOnInit();\n\n    // THEN\n    expect(comp.account).toBeNull();\n\n    // WHEN\n    accountService.authenticate(account);\n\n    // THEN\n    expect(comp.account).toEqual(account);\n\n    // WHEN\n    accountService.authenticate(null);\n\n    // THEN\n    expect(comp.account).toBeNull();\n  });\n\n  it('Should hold current authenticated user in variable account if user is authenticated before page load', () => {\n    // GIVEN\n    accountService.authenticate(account);\n\n    // WHEN\n    comp.ngOnInit();\n\n    // THEN\n    expect(comp.account).toEqual(account);\n\n    // WHEN\n    accountService.authenticate(null);\n\n    // THEN\n    expect(comp.account).toBeNull();\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile-info.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/navbar/navbar.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/app.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\profiles\\profile-info.model.ts",{"fileContent":"export interface InfoResponse {\n  'display-ribbon-on-profiles'?: string;\n  git?: any;\n  build?: any;\n  activeProfiles?: string[];\n}\n\nexport class ProfileInfo {\n  constructor(\n    public activeProfiles?: string[],\n    public ribbonEnv?: string,\n    public inProduction?: boolean,\n    public openAPIEnabled?: boolean\n  ) {}\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\profiles\\profile.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { ProfileInfo, InfoResponse } from './profile-info.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private infoUrl = this.applicationConfigService.getEndpointFor('management/info');\n  private profileInfo$?: Observable<ProfileInfo>;\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getProfileInfo(): Observable<ProfileInfo> {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\n      map((response: InfoResponse) => {\n        const profileInfo: ProfileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles?.includes('prod'),\n          openAPIEnabled: response.activeProfiles?.includes('api-docs'),\n        };\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n          const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles?.includes(profile));\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }),\n      shareReplay()\n    );\n    return this.profileInfo$;\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile-info.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\navbar\\navbar.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SessionStorageService } from 'ngx-webstorage';\n\nimport { VERSION } from 'app/app.constants';\nimport { LANGUAGES } from 'app/config/language.constants';\nimport { Account } from 'app/core/auth/account.model';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { LoginService } from 'app/login/login.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\n\n@Component({\n  selector: 'jhi-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss'],\n})\nexport class NavbarComponent implements OnInit {\n  inProduction?: boolean;\n  isNavbarCollapsed = true;\n  languages = LANGUAGES;\n  openAPIEnabled?: boolean;\n  version = '';\n  account: Account | null = null;\n\n  constructor(\n    private loginService: LoginService,\n    private translateService: TranslateService,\n    private sessionStorageService: SessionStorageService,\n    private accountService: AccountService,\n    private profileService: ProfileService,\n    private router: Router\n  ) {\n    if (VERSION) {\n      this.version = VERSION.toLowerCase().startsWith('v') ? VERSION : `v${VERSION}`;\n    }\n  }\n\n  ngOnInit(): void {\n    this.profileService.getProfileInfo().subscribe(profileInfo => {\n      this.inProduction = profileInfo.inProduction;\n      this.openAPIEnabled = profileInfo.openAPIEnabled;\n    });\n    this.accountService.getAuthenticationState().subscribe(account => (this.account = account));\n  }\n\n  changeLanguage(languageKey: string): void {\n    this.sessionStorageService.store('locale', languageKey);\n    this.translateService.use(languageKey);\n  }\n\n  collapseNavbar(): void {\n    this.isNavbarCollapsed = true;\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  logout(): void {\n    this.collapseNavbar();\n    this.loginService.logout();\n    this.router.navigate(['']);\n  }\n\n  toggleNavbar(): void {\n    this.isNavbarCollapsed = !this.isNavbarCollapsed;\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/app.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/language.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/login/login.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile-info.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\app.constants.ts",{"fileContent":"// These constants are injected via webpack DefinePlugin variables.\n// You can add more variables in webpack.common.js or in profile specific webpack.<dev|prod>.js files.\n// If you change the values in the webpack config files, you need to re run webpack to update the application\n\ndeclare const __DEBUG_INFO_ENABLED__: boolean;\ndeclare const __VERSION__: string;\n\nexport const VERSION = __VERSION__;\nexport const DEBUG_INFO_ENABLED = __DEBUG_INFO_ENABLED__;\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\navbar\\navbar.component.html",{"fileContent":"<nav data-cy=\"navbar\" class=\"navbar navbar-dark navbar-expand-md bg-dark\">\n  <a class=\"navbar-brand logo\" routerLink=\"/\" (click)=\"collapseNavbar()\">\n    <span class=\"logo-img\"></span>\n    <span jhiTranslate=\"global.title\" class=\"navbar-title\">Gateway</span>\n    <span class=\"navbar-version\">{{ version }}</span>\n  </a>\n  <a\n    class=\"navbar-toggler d-lg-none\"\n    href=\"javascript:void(0);\"\n    data-toggle=\"collapse\"\n    data-target=\"#navbarResponsive\"\n    aria-controls=\"navbarResponsive\"\n    aria-expanded=\"false\"\n    aria-label=\"Toggle navigation\"\n    (click)=\"toggleNavbar()\"\n  >\n    <fa-icon icon=\"bars\"></fa-icon>\n  </a>\n  <div class=\"navbar-collapse collapse\" id=\"navbarResponsive\" [ngbCollapse]=\"isNavbarCollapsed\" [ngSwitch]=\"account !== null\">\n    <ul class=\"navbar-nav ml-auto\">\n      <li class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n        <a class=\"nav-link\" routerLink=\"/\" (click)=\"collapseNavbar()\">\n          <span>\n            <fa-icon icon=\"home\"></fa-icon>\n            <span jhiTranslate=\"global.menu.home\">Home</span>\n          </span>\n        </a>\n      </li>\n      <!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here -->\n      <li\n        *ngSwitchCase=\"true\"\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"entity-menu\" data-cy=\"entity\">\n          <span>\n            <fa-icon icon=\"th-list\"></fa-icon>\n            <span jhiTranslate=\"global.menu.entities.main\">Entities</span>\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"entity-menu\">\n          <!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here -->\n        </ul>\n      </li>\n      <li\n        *jhiHasAnyAuthority=\"'ROLE_ADMIN'\"\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"admin-menu\" data-cy=\"adminMenu\">\n          <span>\n            <fa-icon icon=\"users-cog\"></fa-icon>\n            <span jhiTranslate=\"global.menu.admin.main\">Administration</span>\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"admin-menu\">\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/gateway\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"road\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.gateway\">Gateway</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/user-management\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"users\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.userManagement\">User management</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/metrics\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"tachometer-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.metrics\">Metrics</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/health\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"heart\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.health\">Health</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/configuration\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"cogs\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.configuration\">Configuration</span>\n            </a>\n          </li>\n          <li>\n            <a class=\"dropdown-item\" routerLink=\"admin/logs\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"tasks\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.logs\">Logs</span>\n            </a>\n          </li>\n          <li *ngIf=\"openAPIEnabled\">\n            <a class=\"dropdown-item\" routerLink=\"admin/docs\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n              <fa-icon icon=\"book\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.admin.apidocs\">API</span>\n            </a>\n          </li>\n          <!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here -->\n        </ul>\n      </li>\n      <li ngbDropdown class=\"nav-item dropdown pointer\" display=\"dynamic\" *ngIf=\"languages && languages.length > 1\">\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"languagesnavBarDropdown\">\n          <span>\n            <fa-icon icon=\"flag\"></fa-icon>\n            <span jhiTranslate=\"global.menu.language\">Language</span>\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"languagesnavBarDropdown\">\n          <li *ngFor=\"let language of languages\">\n            <a\n              class=\"dropdown-item\"\n              [jhiActiveMenu]=\"language\"\n              href=\"javascript:void(0);\"\n              (click)=\"changeLanguage(language); collapseNavbar()\"\n              >{{ language | findLanguageFromKey }}</a\n            >\n          </li>\n        </ul>\n      </li>\n      <li\n        ngbDropdown\n        class=\"nav-item dropdown pointer\"\n        display=\"dynamic\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n      >\n        <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"account-menu\" data-cy=\"accountMenu\">\n          <span *ngIf=\"!account?.imageUrl\">\n            <fa-icon icon=\"user\"></fa-icon>\n            <span jhiTranslate=\"global.menu.account.main\">Account</span>\n          </span>\n          <span *ngIf=\"account?.imageUrl\">\n            <img [src]=\"account!.imageUrl\" class=\"profile-image rounded-circle\" alt=\"Avatar\" />\n          </span>\n        </a>\n        <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"account-menu\">\n          <li *ngSwitchCase=\"true\">\n            <a class=\"dropdown-item\" routerLink=\"account/settings\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\" data-cy=\"settings\">\n              <fa-icon icon=\"wrench\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.account.settings\">Settings</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"true\">\n            <a\n              class=\"dropdown-item\"\n              routerLink=\"account/password\"\n              routerLinkActive=\"active\"\n              (click)=\"collapseNavbar()\"\n              data-cy=\"passwordItem\"\n            >\n              <fa-icon icon=\"lock\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.account.password\">Password</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"true\">\n            <a class=\"dropdown-item\" (click)=\"logout()\" id=\"logout\" data-cy=\"logout\">\n              <fa-icon icon=\"sign-out-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.account.logout\">Sign out</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"false\">\n            <a class=\"dropdown-item\" (click)=\"login()\" id=\"login\" data-cy=\"login\">\n              <fa-icon icon=\"sign-in-alt\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.account.login\">Sign in</span>\n            </a>\n          </li>\n          <li *ngSwitchCase=\"false\">\n            <a class=\"dropdown-item\" routerLink=\"account/register\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\" data-cy=\"register\">\n              <fa-icon icon=\"user-plus\" [fixedWidth]=\"true\"></fa-icon>\n              <span jhiTranslate=\"global.menu.account.register\">Register</span>\n            </a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</nav>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password\\password.component.spec.ts",{"fileContent":"jest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { PasswordComponent } from './password.component';\nimport { PasswordService } from './password.service';\n\ndescribe('PasswordComponent', () => {\n  let comp: PasswordComponent;\n  let fixture: ComponentFixture<PasswordComponent>;\n  let service: PasswordService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [PasswordComponent],\n        providers: [FormBuilder, AccountService],\n      })\n        .overrideTemplate(PasswordComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(PasswordComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(PasswordService);\n  });\n\n  it('should show error if passwords do not match', () => {\n    // GIVEN\n    comp.passwordForm.patchValue({\n      newPassword: 'password1',\n      confirmPassword: 'password2',\n    });\n    // WHEN\n    comp.changePassword();\n    // THEN\n    expect(comp.doNotMatch).toBe(true);\n    expect(comp.error).toBe(false);\n    expect(comp.success).toBe(false);\n  });\n\n  it('should call Auth.changePassword when passwords match', () => {\n    // GIVEN\n    const passwordValues = {\n      currentPassword: 'oldPassword',\n      newPassword: 'myPassword',\n    };\n\n    jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n\n    comp.passwordForm.patchValue({\n      currentPassword: passwordValues.currentPassword,\n      newPassword: passwordValues.newPassword,\n      confirmPassword: passwordValues.newPassword,\n    });\n\n    // WHEN\n    comp.changePassword();\n\n    // THEN\n    expect(service.save).toHaveBeenCalledWith(passwordValues.newPassword, passwordValues.currentPassword);\n  });\n\n  it('should set success to true upon success', () => {\n    // GIVEN\n    jest.spyOn(service, 'save').mockReturnValue(of(new HttpResponse({ body: true })));\n    comp.passwordForm.patchValue({\n      newPassword: 'myPassword',\n      confirmPassword: 'myPassword',\n    });\n\n    // WHEN\n    comp.changePassword();\n\n    // THEN\n    expect(comp.doNotMatch).toBe(false);\n    expect(comp.error).toBe(false);\n    expect(comp.success).toBe(true);\n  });\n\n  it('should notify of error if change password fails', () => {\n    // GIVEN\n    jest.spyOn(service, 'save').mockReturnValue(throwError('ERROR'));\n    comp.passwordForm.patchValue({\n      newPassword: 'myPassword',\n      confirmPassword: 'myPassword',\n    });\n\n    // WHEN\n    comp.changePassword();\n\n    // THEN\n    expect(comp.doNotMatch).toBe(false);\n    expect(comp.success).toBe(false);\n    expect(comp.error).toBe(true);\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password/password.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password/password.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password\\password.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html',\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: ['', [Validators.required]],\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/account.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password/password.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/auth/state-storage.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password\\password.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/change-password'), { currentPassword, newPassword });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password\\password.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2 jhiTranslate=\"password.title\" [translateValues]=\"{ username: account.login }\">\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"password.messages.success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"password.messages.error\">\n        <strong>An error has occurred!</strong> The password could not be changed.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"currentPassword\" jhiTranslate=\"global.form.currentpassword.label\">Current password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"{{ 'global.form.currentpassword.placeholder' | translate }}\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"passwordForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"password.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.spec.ts",{"fileContent":"import { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, inject, tick, fakeAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { PasswordResetFinishComponent } from './password-reset-finish.component';\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\ndescribe('PasswordResetFinishComponent', () => {\n  let fixture: ComponentFixture<PasswordResetFinishComponent>;\n  let comp: PasswordResetFinishComponent;\n\n  beforeEach(() => {\n    fixture = TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [PasswordResetFinishComponent],\n      providers: [\n        FormBuilder,\n        {\n          provide: ActivatedRoute,\n          useValue: { queryParams: of({ key: 'XYZPDQ' }) },\n        },\n      ],\n    })\n      .overrideTemplate(PasswordResetFinishComponent, '')\n      .createComponent(PasswordResetFinishComponent);\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(PasswordResetFinishComponent);\n    comp = fixture.componentInstance;\n    comp.ngOnInit();\n  });\n\n  it('should define its initial state', () => {\n    expect(comp.initialized).toBe(true);\n    expect(comp.key).toEqual('XYZPDQ');\n  });\n\n  it('sets focus after the view has been initialized', () => {\n    const node = {\n      focus: jest.fn(),\n    };\n    comp.newPassword = new ElementRef(node);\n\n    comp.ngAfterViewInit();\n\n    expect(node.focus).toHaveBeenCalled();\n  });\n\n  it('should ensure the two passwords entered match', () => {\n    comp.passwordForm.patchValue({\n      newPassword: 'password',\n      confirmPassword: 'non-matching',\n    });\n\n    comp.finishReset();\n\n    expect(comp.doNotMatch).toBe(true);\n  });\n\n  it('should update success to true after resetting password', inject(\n    [PasswordResetFinishService],\n    fakeAsync((service: PasswordResetFinishService) => {\n      jest.spyOn(service, 'save').mockReturnValue(of({}));\n      comp.passwordForm.patchValue({\n        newPassword: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.finishReset();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\n      expect(comp.success).toBe(true);\n    })\n  ));\n\n  it('should notify of generic error', inject(\n    [PasswordResetFinishService],\n    fakeAsync((service: PasswordResetFinishService) => {\n      jest.spyOn(service, 'save').mockReturnValue(throwError('ERROR'));\n      comp.passwordForm.patchValue({\n        newPassword: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.finishReset();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\n      expect(comp.success).toBe(false);\n      expect(comp.error).toBe(true);\n    })\n  ));\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.ts",{"fileContent":"import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\n@Component({\n  selector: 'jhi-password-reset-finish',\n  templateUrl: './password-reset-finish.component.html',\n})\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\n  @ViewChild('newPassword', { static: false })\n  newPassword?: ElementRef;\n\n  initialized = false;\n  doNotMatch = false;\n  error = false;\n  success = false;\n  key = '';\n\n  passwordForm = this.fb.group({\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordResetFinishService: PasswordResetFinishService, private route: ActivatedRoute, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['key']) {\n        this.key = params['key'];\n      }\n      this.initialized = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.newPassword) {\n      this.newPassword.nativeElement.focus();\n    }\n  }\n\n  finishReset(): void {\n    this.doNotMatch = false;\n    this.error = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    const confirmPassword = this.passwordForm.get(['confirmPassword'])!.value;\n\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordResetFinishService.save(this.key, newPassword).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetFinishService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(key: string, newPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/finish'), { key, newPassword });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.html",{"fileContent":"<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-4\">\n      <h1 jhiTranslate=\"reset.finish.title\">Reset password</h1>\n\n      <div class=\"alert alert-danger\" jhiTranslate=\"reset.finish.messages.keymissing\" *ngIf=\"initialized && !key\">\n        <strong>The password reset key is missing.</strong>\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"key && !success\">\n        <span jhiTranslate=\"reset.finish.messages.info\">Choose a new password</span>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <span jhiTranslate=\"reset.finish.messages.error\"\n          >Your password couldn't be reset. Remember a password request is only valid for 24 hours.</span\n        >\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.finish.messages.success\"><strong>Your password has been reset.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <div *ngIf=\"key && !success\">\n        <form name=\"form\" role=\"form\" (ngSubmit)=\"finishReset()\" [formGroup]=\"passwordForm\">\n          <div class=\"form-group\">\n            <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n              formControlName=\"newPassword\"\n              data-cy=\"resetPassword\"\n              #newPassword\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('newPassword')!.invalid &&\n                (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.newpassword.required\"\n              >\n                Your password is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n              >\n                Your password is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n              >\n                Your password cannot be longer than 50 characters.\n              </small>\n            </div>\n\n            <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n              >New password confirmation</label\n            >\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n              formControlName=\"confirmPassword\"\n              data-cy=\"confirmResetPassword\"\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('confirmPassword')!.invalid &&\n                (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n              >\n                Your password confirmation is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n              >\n                Your password confirmation is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n              >\n                Your password confirmation cannot be longer than 50 characters.\n              </small>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            [disabled]=\"passwordForm.invalid\"\n            class=\"btn btn-primary\"\n            jhiTranslate=\"reset.finish.form.button\"\n            data-cy=\"submit\"\n          >\n            Reset Password\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\data-util.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\n\nimport { DataUtils } from './data-util.service';\n\ndescribe('Data Utils Service Test', () => {\n  let service: DataUtils;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [DataUtils],\n    });\n    service = TestBed.inject(DataUtils);\n  });\n\n  describe('byteSize', () => {\n    it('should return the bytesize of the text', () => {\n      expect(service.byteSize('Hello JHipster')).toBe(`10.5 bytes`);\n    });\n  });\n\n  describe('openFile', () => {\n    it('should open the file in the new window', () => {\n      const newWindow = { ...window };\n      newWindow.document.write = jest.fn();\n      window.open = jest.fn(() => newWindow);\n      window.URL.createObjectURL = jest.fn();\n      // 'JHipster' in base64 is 'SkhpcHN0ZXI='\n      const data = 'SkhpcHN0ZXI=';\n      const contentType = 'text/plain';\n      service.openFile(data, contentType);\n      expect(window.open).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/util/data-util.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\data-util.service.ts",{"fileContent":"import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, Observer } from 'rxjs';\n\nexport type FileLoadErrorType = 'not.image' | 'could.not.extract';\n\nexport interface FileLoadError {\n  message: string;\n  key: FileLoadErrorType;\n  params?: any;\n}\n\n/**\n * An utility service for data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataUtils {\n  /**\n   * Method to find the byte size of the string provides\n   */\n  byteSize(base64String: string): string {\n    return this.formatAsBytes(this.size(base64String));\n  }\n\n  /**\n   * Method to open file\n   */\n  openFile(data: string, contentType: string | null | undefined): void {\n    contentType = contentType ?? '';\n\n    const byteCharacters = atob(data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {\n      type: contentType,\n    });\n    const fileURL = window.URL.createObjectURL(blob);\n    const win = window.open(fileURL);\n    win!.onload = function () {\n      URL.revokeObjectURL(fileURL);\n    };\n  }\n\n  /**\n   * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\n   * and returns an observable.\n   *\n   * @param event the object containing the file (at event.target.files[0])\n   * @param editForm the form group where the input field is located\n   * @param field the field name to set the file's 'base 64 data' on\n   * @param isImage boolean representing if the file represented by the event is an image\n   * @returns an observable that loads file to form field and completes if sussessful\n   *      or returns error as FileLoadError on failure\n   */\n  loadFileToForm(event: Event, editForm: FormGroup, field: string, isImage: boolean): Observable<void> {\n    return new Observable((observer: Observer<void>) => {\n      const eventTarget: HTMLInputElement | null = event.target as HTMLInputElement | null;\n      if (eventTarget?.files?.[0]) {\n        const file: File = eventTarget.files[0];\n        if (isImage && !file.type.startsWith('image/')) {\n          const error: FileLoadError = {\n            message: `File was expected to be an image but was found to be '${file.type}'`,\n            key: 'not.image',\n            params: { fileType: file.type },\n          };\n          observer.error(error);\n        } else {\n          const fieldContentType: string = field + 'ContentType';\n          this.toBase64(file, (base64Data: string) => {\n            editForm.patchValue({\n              [field]: base64Data,\n              [fieldContentType]: file.type,\n            });\n            observer.next();\n            observer.complete();\n          });\n        }\n      } else {\n        const error: FileLoadError = {\n          message: 'Could not extract file',\n          key: 'could.not.extract',\n          params: { event },\n        };\n        observer.error(error);\n      }\n    });\n  }\n\n  /**\n   * Method to convert the file to base64\n   */\n  private toBase64(file: File, callback: (base64Data: string) => void): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.onload = (e: ProgressEvent<FileReader>) => {\n      if (typeof e.target?.result === 'string') {\n        const base64Data: string = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n        callback(base64Data);\n      }\n    };\n    fileReader.readAsDataURL(file);\n  }\n\n  private endsWith(suffix: string, str: string): boolean {\n    return str.includes(suffix, str.length - suffix.length);\n  }\n\n  private paddingSize(value: string): number {\n    if (this.endsWith('==', value)) {\n      return 2;\n    }\n    if (this.endsWith('=', value)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  private size(value: string): number {\n    return (value.length / 4) * 3 - this.paddingSize(value);\n  }\n\n  private formatAsBytes(size: number): string {\n    return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n  }\n}\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\profiles\\page-ribbon.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { ProfileInfo } from 'app/layouts/profiles/profile-info.model';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\n\nimport { PageRibbonComponent } from './page-ribbon.component';\n\ndescribe('Page Ribbon Component', () => {\n  let comp: PageRibbonComponent;\n  let fixture: ComponentFixture<PageRibbonComponent>;\n  let profileService: ProfileService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [PageRibbonComponent],\n      })\n        .overrideTemplate(PageRibbonComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(PageRibbonComponent);\n    comp = fixture.componentInstance;\n    profileService = TestBed.inject(ProfileService);\n  });\n\n  it('Should call profileService.getProfileInfo on init', () => {\n    // GIVEN\n    jest.spyOn(profileService, 'getProfileInfo').mockReturnValue(of(new ProfileInfo()));\n\n    // WHEN\n    comp.ngOnInit();\n\n    // THEN\n    expect(profileService.getProfileInfo).toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile-info.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/page-ribbon.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\layouts\\profiles\\page-ribbon.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ProfileService } from './profile.service';\n\n@Component({\n  selector: 'jhi-page-ribbon',\n  template: `\n    <div class=\"ribbon\" *ngIf=\"ribbonEnv$ | async as ribbonEnv\">\n      <a href=\"\" jhiTranslate=\"global.ribbon.{{ ribbonEnv }}\">{{ ribbonEnv }}</a>\n    </div>\n  `,\n  styleUrls: ['./page-ribbon.component.scss'],\n})\nexport class PageRibbonComponent implements OnInit {\n  ribbonEnv$?: Observable<string | undefined>;\n\n  constructor(private profileService: ProfileService) {}\n\n  ngOnInit(): void {\n    this.ribbonEnv$ = this.profileService.getProfileInfo().pipe(map(profileInfo => profileInfo.ribbonEnv));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/layouts/profiles/profile-info.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { ConfigurationComponent } from './configuration.component';\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\ndescribe('ConfigurationComponent', () => {\n  let comp: ConfigurationComponent;\n  let fixture: ComponentFixture<ConfigurationComponent>;\n  let service: ConfigurationService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [ConfigurationComponent],\n        providers: [ConfigurationService],\n      })\n        .overrideTemplate(ConfigurationComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ConfigurationComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(ConfigurationService);\n  });\n\n  describe('OnInit', () => {\n    it('Should call load all on init', () => {\n      // GIVEN\n      const beans: Bean[] = [\n        {\n          prefix: 'jhipster',\n          properties: {\n            clientApp: {\n              name: 'jhipsterApp',\n            },\n          },\n        },\n      ];\n      const propertySources: PropertySource[] = [\n        {\n          name: 'server.ports',\n          properties: {\n            'local.server.port': {\n              value: '8080',\n            },\n          },\n        },\n      ];\n      jest.spyOn(service, 'getBeans').mockReturnValue(of(beans));\n      jest.spyOn(service, 'getPropertySources').mockReturnValue(of(propertySources));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.getBeans).toHaveBeenCalled();\n      expect(service.getPropertySources).toHaveBeenCalled();\n      expect(comp.allBeans).toEqual(beans);\n      expect(comp.beans).toEqual(beans);\n      expect(comp.propertySources).toEqual(propertySources);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.component.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\n\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\n@Component({\n  selector: 'jhi-configuration',\n  templateUrl: './configuration.component.html',\n})\nexport class ConfigurationComponent implements OnInit {\n  allBeans!: Bean[];\n  beans: Bean[] = [];\n  beansFilter = '';\n  beansAscending = true;\n  propertySources: PropertySource[] = [];\n\n  constructor(private configurationService: ConfigurationService) {}\n\n  ngOnInit(): void {\n    this.configurationService.getBeans().subscribe(beans => {\n      this.allBeans = beans;\n      this.filterAndSortBeans();\n    });\n\n    this.configurationService.getPropertySources().subscribe(propertySources => (this.propertySources = propertySources));\n  }\n\n  filterAndSortBeans(): void {\n    const beansAscendingValue = this.beansAscending ? -1 : 1;\n    const beansAscendingValueReverse = this.beansAscending ? 1 : -1;\n    this.beans = this.allBeans\n      .filter(bean => !this.beansFilter || bean.prefix.toLowerCase().includes(this.beansFilter.toLowerCase()))\n      .sort((a, b) => (a.prefix < b.prefix ? beansAscendingValue : beansAscendingValueReverse));\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/configuration/configuration.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.component.html",{"fileContent":"<div *ngIf=\"allBeans\">\n  <h2 id=\"configuration-page-heading\" jhiTranslate=\"configuration.title\" data-cy=\"configurationPageHeading\">Configuration</h2>\n\n  <span jhiTranslate=\"configuration.filter\">Filter (by prefix)</span>\n  <input type=\"text\" [(ngModel)]=\"beansFilter\" (ngModelChange)=\"filterAndSortBeans()\" class=\"form-control\" />\n\n  <h3 id=\"spring-configuration\">Spring configuration</h3>\n\n  <table class=\"table table-striped table-bordered table-responsive d-table\" aria-describedby=\"spring-configuration\">\n    <thead>\n      <tr jhiSort predicate=\"prefix\" [(ascending)]=\"beansAscending\" (sortChange)=\"filterAndSortBeans()\">\n        <th jhiSortBy=\"prefix\" scope=\"col\" class=\"w-40\">\n          <span jhiTranslate=\"configuration.table.prefix\">Prefix</span> <fa-icon icon=\"sort\"></fa-icon>\n        </th>\n        <th scope=\"col\" class=\"w-60\"><span jhiTranslate=\"configuration.table.properties\">Properties</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let bean of beans\">\n        <td>\n          <span>{{ bean.prefix }}</span>\n        </td>\n        <td>\n          <div class=\"row\" *ngFor=\"let property of bean.properties | keyvalue\">\n            <div class=\"col-md-4\">{{ property.key }}</div>\n            <div class=\"col-md-8\">\n              <span class=\"float-right badge-secondary break\">{{ property.value | json }}</span>\n            </div>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div *ngFor=\"let propertySource of propertySources; let i = index\">\n    <h4 [id]=\"'property-source-' + i\">\n      <span>{{ propertySource.name }}</span>\n    </h4>\n\n    <table class=\"table table-sm table-striped table-bordered table-responsive d-table\" [attr.aria-describedby]=\"'property-source-' + i\">\n      <thead>\n        <tr>\n          <th scope=\"col\" class=\"w-40\">Property</th>\n          <th scope=\"col\" class=\"w-60\">Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let property of propertySource.properties | keyvalue\">\n          <td class=\"break\">{{ property.key }}</td>\n          <td class=\"break\">\n            <span class=\"float-right badge-secondary break\">{{ property.value.value }}</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\detail\\user-management-detail.component.spec.ts",{"fileContent":"import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { User } from '../user-management.model';\n\nimport { UserManagementDetailComponent } from './user-management-detail.component';\n\ndescribe('User Management Detail Component', () => {\n  let comp: UserManagementDetailComponent;\n  let fixture: ComponentFixture<UserManagementDetailComponent>;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [UserManagementDetailComponent],\n        providers: [\n          {\n            provide: ActivatedRoute,\n            useValue: {\n              data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(UserManagementDetailComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementDetailComponent);\n    comp = fixture.componentInstance;\n  });\n\n  describe('OnInit', () => {\n    it('Should call load all on init', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(comp.user).toEqual(\n        expect.objectContaining({\n          id: 123,\n          login: 'user',\n          firstName: 'first',\n          lastName: 'last',\n          email: 'first@last.com',\n          activated: true,\n          langKey: 'en',\n          authorities: [Authority.USER],\n          createdBy: 'admin',\n        })\n      );\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/authority.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/detail/user-management-detail.component.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\detail\\user-management-detail.component.ts",{"fileContent":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { User } from '../user-management.model';\n\n@Component({\n  selector: 'jhi-user-mgmt-detail',\n  templateUrl: './user-management-detail.component.html',\n})\nexport class UserManagementDetailComponent implements OnInit {\n  user: User | null = null;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      this.user = user;\n    });\n  }\n}\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\detail\\user-management-detail.component.html",{"fileContent":"<div class=\"row justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"user\">\n      <h2>\n        <span jhiTranslate=\"userManagement.detail.title\">User</span> [<strong>{{ user.login }}</strong\n        >]\n      </h2>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span jhiTranslate=\"userManagement.login\">Login</span></dt>\n        <dd>\n          <span>{{ user.login }}</span>\n          <span *ngIf=\"user.activated\" class=\"badge badge-success\" jhiTranslate=\"userManagement.activated\">Activated</span>\n          <span *ngIf=\"!user.activated\" class=\"badge badge-danger\" jhiTranslate=\"userManagement.deactivated\">Deactivated</span>\n        </dd>\n\n        <dt><span jhiTranslate=\"userManagement.firstName\">First Name</span></dt>\n        <dd>{{ user.firstName }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.lastName\">Last Name</span></dt>\n        <dd>{{ user.lastName }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.email\">Email</span></dt>\n        <dd>{{ user.email }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.langKey\">Lang Key</span></dt>\n        <dd>{{ user.langKey }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.createdBy\">Created By</span></dt>\n        <dd>{{ user.createdBy }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.createdDate\">Created Date</span></dt>\n        <dd>{{ user.createdDate | date: 'dd/MM/yy HH:mm' }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.lastModifiedBy\">Last Modified By</span></dt>\n        <dd>{{ user.lastModifiedBy }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.lastModifiedDate\">Last Modified Date</span></dt>\n        <dd>{{ user.lastModifiedDate | date: 'dd/MM/yy HH:mm' }}</dd>\n\n        <dt><span jhiTranslate=\"userManagement.profiles\">Profiles</span></dt>\n        <dd>\n          <ul class=\"list-unstyled\">\n            <li *ngFor=\"let authority of user.authorities\">\n              <span class=\"badge badge-info\">{{ authority }}</span>\n            </li>\n          </ul>\n        </dd>\n      </dl>\n\n      <button type=\"submit\" routerLink=\"../../\" class=\"btn btn-info\">\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span jhiTranslate=\"entity.action.back\">Back</span>\n      </button>\n    </div>\n  </div>\n</div>\n","resolvedModuleNames":[]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { HealthService } from './health.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('HealthService Service', () => {\n  let service: HealthService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(HealthService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call management/health endpoint with correct values', () => {\n      // GIVEN\n      let expectedResult;\n      const checkHealth = {\n        components: [],\n      };\n\n      // WHEN\n      service.checkHealth().subscribe(received => {\n        expectedResult = received;\n      });\n      const testRequest = httpMock.expectOne({\n        method: 'GET',\n        url: applicationConfigService.getEndpointFor('management/health'),\n      });\n      testRequest.flush(checkHealth);\n\n      // THEN\n      expect(expectedResult).toEqual(checkHealth);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/health/health.model.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password\\password.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { PasswordService } from './password.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('Password Service', () => {\n  let service: PasswordService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(PasswordService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call change-password endpoint with correct values', () => {\n      // GIVEN\n      const password1 = 'password1';\n      const password2 = 'password2';\n\n      // WHEN\n      service.save(password2, password1).subscribe();\n\n      const testRequest = httpMock.expectOne({\n        method: 'POST',\n        url: applicationConfigService.getEndpointFor('api/account/change-password'),\n      });\n\n      // THEN\n      expect(testRequest.request.body).toEqual({ currentPassword: password1, newPassword: password2 });\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password/password.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('PasswordResetFinish Service', () => {\n  let service: PasswordResetFinishService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(PasswordResetFinishService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call reset-password/finish endpoint with correct values', () => {\n      // GIVEN\n      const key = 'abc';\n      const newPassword = 'password';\n\n      // WHEN\n      service.save(key, newPassword).subscribe();\n\n      const testRequest = httpMock.expectOne({\n        method: 'POST',\n        url: applicationConfigService.getEndpointFor('api/account/reset-password/finish'),\n      });\n\n      // THEN\n      expect(testRequest.request.body).toEqual({ key, newPassword });\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts"]}],["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\service\\user-management.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { User } from '../user-management.model';\n\nimport { UserManagementService } from './user-management.service';\n\ndescribe('User Service', () => {\n  let service: UserManagementService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(UserManagementService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should return User', () => {\n      let expectedResult: string | undefined;\n\n      service.find('user').subscribe(received => {\n        expectedResult = received.login;\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(new User(123, 'user'));\n      expect(expectedResult).toEqual('user');\n    });\n\n    it('should return Authorities', () => {\n      let expectedResult: string[] = [];\n\n      service.authorities().subscribe(authorities => {\n        expectedResult = authorities;\n      });\n      const req = httpMock.expectOne({ method: 'GET' });\n\n      req.flush([Authority.USER, Authority.ADMIN]);\n      expect(expectedResult).toEqual([Authority.USER, Authority.ADMIN]);\n    });\n\n    it('should propagate not found response', () => {\n      let expectedResult = 0;\n\n      service.find('user').subscribe({\n        error: (error: HttpErrorResponse) => (expectedResult = error.status),\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush('Invalid request parameters', {\n        status: 404,\n        statusText: 'Bad Request',\n      });\n      expect(expectedResult).toEqual(404);\n    });\n  });\n});\n","resolvedModuleNames":["C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/config/authority.constants.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/user-management.model.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/admin/user-management/service/user-management.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/config/application-config.service.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request-util.ts","C:/Users/Nicolas/Desktop/test6/gateway/src/main/webapp/app/core/request/request.model.ts"]}]]