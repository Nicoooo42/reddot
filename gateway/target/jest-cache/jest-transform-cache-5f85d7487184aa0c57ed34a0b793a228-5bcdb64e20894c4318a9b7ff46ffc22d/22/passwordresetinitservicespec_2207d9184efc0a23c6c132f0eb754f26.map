{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,+EAAyE;AACzE,2FAAsF;AAEtF,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,OAAiC,CAAC;IACtC,IAAI,QAA+B,CAAC;IACpC,IAAI,wBAAkD,CAAC;IAEvD,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QAEH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,sDAAwB,CAAC,CAAC;QACnD,wBAAwB,GAAG,iBAAO,CAAC,MAAM,CAAC,qDAAwB,CAAC,CAAC;QACpE,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,QAAQ;YACR,MAAM,IAAI,GAAG,eAAe,CAAC;YAE7B,OAAO;YACP,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;YAE/B,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC;gBACrC,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,wBAAwB,CAAC,cAAc,CAAC,iCAAiC,CAAC;aAChF,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { PasswordResetInitService } from './password-reset-init.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('PasswordResetInit Service', () => {\n  let service: PasswordResetInitService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(PasswordResetInitService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call reset-password/init endpoint with correct values', () => {\n      // GIVEN\n      const mail = 'test@test.com';\n\n      // WHEN\n      service.save(mail).subscribe();\n\n      const testRequest = httpMock.expectOne({\n        method: 'POST',\n        url: applicationConfigService.getEndpointFor('api/account/reset-password/init'),\n      });\n\n      // THEN\n      expect(testRequest.request.body).toEqual(mail);\n    });\n  });\n});\n"],"version":3}