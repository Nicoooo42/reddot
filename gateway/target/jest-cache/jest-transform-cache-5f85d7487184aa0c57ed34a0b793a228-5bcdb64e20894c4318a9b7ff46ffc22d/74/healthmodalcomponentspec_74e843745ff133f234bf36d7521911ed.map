{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\modal\\health-modal.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\modal\\health-modal.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HealthModalComponent } from './health-modal.component';\n\ndescribe('HealthModalComponent', () => {\n  let comp: HealthModalComponent;\n  let fixture: ComponentFixture<HealthModalComponent>;\n  let mockActiveModal: NgbActiveModal;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [HealthModalComponent],\n        providers: [NgbActiveModal],\n      })\n        .overrideTemplate(HealthModalComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(HealthModalComponent);\n    comp = fixture.componentInstance;\n    mockActiveModal = TestBed.inject(NgbActiveModal);\n  });\n\n  describe('readableValue', () => {\n    it('should return stringify value', () => {\n      // GIVEN\n      comp.health = undefined;\n\n      // WHEN\n      const result = comp.readableValue({ name: 'jhipster' });\n\n      // THEN\n      expect(result).toEqual('{\"name\":\"jhipster\"}');\n    });\n\n    it('should return string value', () => {\n      // GIVEN\n      comp.health = undefined;\n\n      // WHEN\n      const result = comp.readableValue('jhipster');\n\n      // THEN\n      expect(result).toEqual('jhipster');\n    });\n\n    it('should return storage space in an human readable unit (GB)', () => {\n      // GIVEN\n      comp.health = {\n        key: 'diskSpace',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1073741825);\n\n      // THEN\n      expect(result).toEqual('1.00 GB');\n    });\n\n    it('should return storage space in an human readable unit (MB)', () => {\n      // GIVEN\n      comp.health = {\n        key: 'diskSpace',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1073741824);\n\n      // THEN\n      expect(result).toEqual('1024.00 MB');\n    });\n\n    it('should return string value', () => {\n      // GIVEN\n      comp.health = {\n        key: 'mail',\n        value: {\n          status: 'UP',\n        },\n      };\n\n      // WHEN\n      const result = comp.readableValue(1234);\n\n      // THEN\n      expect(result).toEqual('1234');\n    });\n  });\n\n  describe('dismiss', () => {\n    it('should call dismiss when dismiss modal is called', () => {\n      // GIVEN\n      const spy = jest.spyOn(mockActiveModal, 'dismiss');\n\n      // WHEN\n      comp.dismiss();\n\n      // THEN\n      expect(spy).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}