d09dd4a9d32f0388ea51b38e43efe282
"use strict";

/* istanbul ignore next */
function cov_yzhlo4rtc() {
  var path = "C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts";
  var hash = "589940cf8e1868f8d1f35304c1071bc1f6fd9c13";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "6": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "7": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "8": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "10": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "12": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "13": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 65
        }
      },
      "14": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "16": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 31,
          column: 17
        }
      },
      "17": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 41
        }
      },
      "18": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "19": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "20": {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 35,
          column: 74
        }
      },
      "21": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 61
        }
      },
      "22": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 21
        }
      },
      "23": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "24": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 65
          },
          end: {
            line: 28,
            column: 66
          }
        },
        loc: {
          start: {
            line: 28,
            column: 85
          },
          end: {
            line: 33,
            column: 13
          }
        },
        line: 28
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 54
          },
          end: {
            line: 32,
            column: 56
          }
        }, {
          start: {
            line: 32,
            column: 59
          },
          end: {
            line: 32,
            column: 61
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 34
          }
        }, {
          start: {
            line: 32,
            column: 38
          },
          end: {
            line: 32,
            column: 51
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts",
      mappings: ";;;;AAAA,wCAA2C;AAE3C;;GAEG;IAIU,UAAU,SAAV,UAAU;IACrB;;OAEG;IACH,KAAK,CAAC,MAAc;QAClB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,uBAAuB;QACvB,MAAM,KAAK,GAAa,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,KAAK,GAA8B,EAAE,CAAC;QAE5C,oCAAoC;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAChB,MAAM,OAAO,GAAa,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEvC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACtD;YAED,MAAM,GAAG,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YAC9D,MAAM,WAAW,GAA0C,EAAE,CAAC;YAE9D,GAAG,CAAC,OAAO,CACT,IAAI,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EACvC,CAAC,EAAU,EAAE,EAAsB,EAAE,EAAsB,EAAE,EAAsB,EAAE,EAAE;gBACrF,IAAI,EAAE,KAAK,SAAS,EAAE;oBACpB,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;iBACtB;gBACD,OAAO,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;YAClB,CAAC,CACF,CAAC;YAEF,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE;gBAClC,MAAM,IAAI,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;gBACnE,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAzCY,UAAU;IAHtB,iBAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,UAAU,CAyCtB;AAzCY,gCAAU",
      names: [],
      sources: ["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts"],
      sourcesContent: ["import { Injectable } from '@angular/core';\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(',');\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section: string[] = p.split(';');\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? '';\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "589940cf8e1868f8d1f35304c1071bc1f6fd9c13"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yzhlo4rtc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_yzhlo4rtc();
cov_yzhlo4rtc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_yzhlo4rtc().s[1]++;
exports.ParseLinks = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_yzhlo4rtc().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_yzhlo4rtc().s[3]++, require("@angular/core"));
/**
 * An utility service for link parsing.
 */

/* istanbul ignore next */
cov_yzhlo4rtc().s[4]++;
let ParseLinks = class ParseLinks {
  /**
   * Method to parse the links
   */
  parse(header) {
    /* istanbul ignore next */
    cov_yzhlo4rtc().f[0]++;
    cov_yzhlo4rtc().s[5]++;

    if (header.length === 0) {
      /* istanbul ignore next */
      cov_yzhlo4rtc().b[0][0]++;
      cov_yzhlo4rtc().s[6]++;
      throw new Error('input must not be of zero length');
    } else
    /* istanbul ignore next */
    {
      cov_yzhlo4rtc().b[0][1]++;
    } // Split parts by comma


    const parts =
    /* istanbul ignore next */
    (cov_yzhlo4rtc().s[7]++, header.split(','));
    const links =
    /* istanbul ignore next */
    (cov_yzhlo4rtc().s[8]++, {}); // Parse each part into a named link

    /* istanbul ignore next */
    cov_yzhlo4rtc().s[9]++;
    parts.forEach((p) => {
      /* istanbul ignore next */
      cov_yzhlo4rtc().f[1]++;
      const section =
      /* istanbul ignore next */
      (cov_yzhlo4rtc().s[10]++, p.split(';'));

      /* istanbul ignore next */
      cov_yzhlo4rtc().s[11]++;

      if (section.length !== 2) {
        /* istanbul ignore next */
        cov_yzhlo4rtc().b[1][0]++;
        cov_yzhlo4rtc().s[12]++;
        throw new Error('section could not be split on ";"');
      } else
      /* istanbul ignore next */
      {
        cov_yzhlo4rtc().b[1][1]++;
      }

      const url =
      /* istanbul ignore next */
      (cov_yzhlo4rtc().s[13]++, section[0].replace(/<(.*)>/, '$1').trim());
      const queryString =
      /* istanbul ignore next */
      (cov_yzhlo4rtc().s[14]++, {});

      /* istanbul ignore next */
      cov_yzhlo4rtc().s[15]++;
      url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => {
        /* istanbul ignore next */
        cov_yzhlo4rtc().f[2]++;
        cov_yzhlo4rtc().s[16]++;

        if ($1 !== undefined) {
          /* istanbul ignore next */
          cov_yzhlo4rtc().b[2][0]++;
          cov_yzhlo4rtc().s[17]++;
          queryString[$1] = $3;
        } else
        /* istanbul ignore next */
        {
          cov_yzhlo4rtc().b[2][1]++;
        }

        cov_yzhlo4rtc().s[18]++;
        return (
          /* istanbul ignore next */
          (cov_yzhlo4rtc().b[4][0]++, $3 !== null) &&
          /* istanbul ignore next */
          (cov_yzhlo4rtc().b[4][1]++, $3 !== void 0) ?
          /* istanbul ignore next */
          (cov_yzhlo4rtc().b[3][0]++, $3) :
          /* istanbul ignore next */
          (cov_yzhlo4rtc().b[3][1]++, '')
        );
      });

      /* istanbul ignore next */
      cov_yzhlo4rtc().s[19]++;

      if (queryString.page !== undefined) {
        /* istanbul ignore next */
        cov_yzhlo4rtc().b[5][0]++;
        const name =
        /* istanbul ignore next */
        (cov_yzhlo4rtc().s[20]++, section[1].replace(/rel="(.*)"/, '$1').trim());

        /* istanbul ignore next */
        cov_yzhlo4rtc().s[21]++;
        links[name] = parseInt(queryString.page, 10);
      } else
      /* istanbul ignore next */
      {
        cov_yzhlo4rtc().b[5][1]++;
      }
    });

    /* istanbul ignore next */
    cov_yzhlo4rtc().s[22]++;
    return links;
  }

};

/* istanbul ignore next */
cov_yzhlo4rtc().s[23]++;
ParseLinks = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
})], ParseLinks);

/* istanbul ignore next */
cov_yzhlo4rtc().s[24]++;
exports.ParseLinks = ParseLinks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmljb2xhc1xcRGVza3RvcFxcdGVzdDZcXGdhdGV3YXlcXHNyY1xcbWFpblxcd2ViYXBwXFxhcHBcXGNvcmVcXHV0aWxcXHBhcnNlLWxpbmtzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWZMLE1BQUEsTUFBQTtBQUFBO0FBQUEseUJBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBO0FBRUE7O0FBRUc7Ozs7SUFJVSxVQUFVLEdBQUEsTUFBVixVQUFVLENBQUE7QUFDckI7O0FBRUc7QUFDSCxFQUFBLEtBQUssQ0FBQyxNQUFELEVBQWU7QUFBQTtBQUFBO0FBQUE7O0FBQ2xCLFFBQUksTUFBTSxDQUFDLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFBQTtBQUFBO0FBQUE7QUFDdkIsWUFBTSxJQUFJLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0QsS0FGRDtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBRGtCLENBS2xCOzs7QUFDQSxVQUFNLEtBQUs7QUFBQTtBQUFBLDZCQUFhLE1BQU0sQ0FBQyxLQUFQLENBQWEsR0FBYixDQUFiLENBQVg7QUFDQSxVQUFNLEtBQUs7QUFBQTtBQUFBLDZCQUE4QixFQUE5QixDQUFYLENBUGtCLENBU2xCOztBQVRrQjtBQUFBO0FBVWxCLElBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFBLENBQUMsS0FBRztBQUFBO0FBQUE7QUFDaEIsWUFBTSxPQUFPO0FBQUE7QUFBQSxnQ0FBYSxDQUFDLENBQUMsS0FBRixDQUFRLEdBQVIsQ0FBYixDQUFiOztBQURnQjtBQUFBOztBQUdoQixVQUFJLE9BQU8sQ0FBQyxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQUE7QUFBQTtBQUFBO0FBQ3hCLGNBQU0sSUFBSSxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUNELE9BRkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFJQSxZQUFNLEdBQUc7QUFBQTtBQUFBLGdDQUFXLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBVyxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLElBQTdCLEVBQW1DLElBQW5DLEVBQVgsQ0FBVDtBQUNBLFlBQU0sV0FBVztBQUFBO0FBQUEsZ0NBQTBDLEVBQTFDLENBQWpCOztBQVJnQjtBQUFBO0FBVWhCLE1BQUEsR0FBRyxDQUFDLE9BQUosQ0FDRSxJQUFJLE1BQUosQ0FBVyxzQkFBWCxFQUFtQyxHQUFuQyxDQURGLEVBRUUsQ0FBQyxFQUFELEVBQWEsRUFBYixFQUFxQyxFQUFyQyxFQUE2RCxFQUE3RCxLQUF1RjtBQUFBO0FBQUE7QUFBQTs7QUFDckYsWUFBSSxFQUFFLEtBQUssU0FBWCxFQUFzQjtBQUFBO0FBQUE7QUFBQTtBQUNwQixVQUFBLFdBQVcsQ0FBQyxFQUFELENBQVgsR0FBa0IsRUFBbEI7QUFDRCxTQUZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRHFGO0FBSXJGLGVBQU87QUFBQTtBQUFBLHNDQUFBLEVBQUUsS0FBQSxJQUFGO0FBQUE7QUFBQSxzQ0FBQSxFQUFFLEtBQUEsS0FBQSxDQUFGO0FBQUE7QUFBQSxzQ0FBQSxFQUFBO0FBQUE7QUFBQSxzQ0FBTSxFQUFOO0FBQVA7QUFDRCxPQVBIOztBQVZnQjtBQUFBOztBQW9CaEIsVUFBSSxXQUFXLENBQUMsSUFBWixLQUFxQixTQUF6QixFQUFvQztBQUFBO0FBQUE7QUFDbEMsY0FBTSxJQUFJO0FBQUE7QUFBQSxrQ0FBVyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsT0FBWCxDQUFtQixZQUFuQixFQUFpQyxJQUFqQyxFQUF1QyxJQUF2QyxFQUFYLENBQVY7O0FBRGtDO0FBQUE7QUFFbEMsUUFBQSxLQUFLLENBQUMsSUFBRCxDQUFMLEdBQWMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFiLEVBQW1CLEVBQW5CLENBQXRCO0FBQ0QsT0FIRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSUQsS0F4QkQ7O0FBVmtCO0FBQUE7QUFtQ2xCLFdBQU8sS0FBUDtBQUNEOztBQXhDb0IsQzs7OztBQUFWLFVBQVUsR0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBSHRCLE1BQUEsQ0FBQSxVQUFBLENBQVc7QUFDVixFQUFBLFVBQVUsRUFBRTtBQURGLENBQVgsQ0FHc0IsQ0FBQSxFQUFWLFVBQVUsQ0FBVjs7OztBQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsVUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBbiB1dGlsaXR5IHNlcnZpY2UgZm9yIGxpbmsgcGFyc2luZy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBhcnNlTGlua3Mge1xuICAvKipcbiAgICogTWV0aG9kIHRvIHBhcnNlIHRoZSBsaW5rc1xuICAgKi9cbiAgcGFyc2UoaGVhZGVyOiBzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcbiAgICBpZiAoaGVhZGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnB1dCBtdXN0IG5vdCBiZSBvZiB6ZXJvIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIC8vIFNwbGl0IHBhcnRzIGJ5IGNvbW1hXG4gICAgY29uc3QgcGFydHM6IHN0cmluZ1tdID0gaGVhZGVyLnNwbGl0KCcsJyk7XG4gICAgY29uc3QgbGlua3M6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcblxuICAgIC8vIFBhcnNlIGVhY2ggcGFydCBpbnRvIGEgbmFtZWQgbGlua1xuICAgIHBhcnRzLmZvckVhY2gocCA9PiB7XG4gICAgICBjb25zdCBzZWN0aW9uOiBzdHJpbmdbXSA9IHAuc3BsaXQoJzsnKTtcblxuICAgICAgaWYgKHNlY3Rpb24ubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2VjdGlvbiBjb3VsZCBub3QgYmUgc3BsaXQgb24gXCI7XCInKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXJsOiBzdHJpbmcgPSBzZWN0aW9uWzBdLnJlcGxhY2UoLzwoLiopPi8sICckMScpLnRyaW0oKTtcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9ID0ge307XG5cbiAgICAgIHVybC5yZXBsYWNlKFxuICAgICAgICBuZXcgUmVnRXhwKCcoW14/PSZdKykoPShbXiZdKikpPycsICdnJyksXG4gICAgICAgICgkMDogc3RyaW5nLCAkMTogc3RyaW5nIHwgdW5kZWZpbmVkLCAkMjogc3RyaW5nIHwgdW5kZWZpbmVkLCAkMzogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgaWYgKCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nWyQxXSA9ICQzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJDMgPz8gJyc7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGlmIChxdWVyeVN0cmluZy5wYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbmFtZTogc3RyaW5nID0gc2VjdGlvblsxXS5yZXBsYWNlKC9yZWw9XCIoLiopXCIvLCAnJDEnKS50cmltKCk7XG4gICAgICAgIGxpbmtzW25hbWVdID0gcGFyc2VJbnQocXVlcnlTdHJpbmcucGFnZSwgMTApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBsaW5rcztcbiAgfVxufVxuIl19