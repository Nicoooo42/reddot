40de8c04c968ed6a8d19e900309f1aa9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const parse_links_service_1 = require("./parse-links.service");
describe('Parse links service test', () => {
    describe('Parse Links Service Test', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                providers: [parse_links_service_1.ParseLinks],
            });
        });
        it('should throw an error when passed an empty string', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('');
            }).toThrow(new Error('input must not be of zero length'));
        }));
        it('should throw an error when passed without comma', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('test');
            }).toThrow(new Error('section could not be split on ";"'));
        }));
        it('should throw an error when passed without semicolon', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('test,test2');
            }).toThrow(new Error('section could not be split on ";"'));
        }));
        it('should return links when headers are passed', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            const links = { last: 0, first: 0 };
            expect(service.parse(' </api/audits?page=0&size=20>; rel="last",</api/audits?page=0&size=20>; rel="first"')).toEqual(links);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcY29yZVxcdXRpbFxccGFyc2UtbGlua3Muc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXdEO0FBRXhELCtEQUFtRDtBQUVuRCxRQUFRLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDeEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLFNBQVMsRUFBRSxDQUFDLGdDQUFVLENBQUM7YUFDeEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLGdDQUFVLENBQUMsRUFBRSxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUNuRyxNQUFNLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMsaURBQWlELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLGdDQUFVLENBQUMsRUFBRSxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUNqRyxNQUFNLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMscURBQXFELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLGdDQUFVLENBQUMsRUFBRSxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUNyRyxNQUFNLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMsNkNBQTZDLEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLGdDQUFVLENBQUMsRUFBRSxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUM3RixNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLHFGQUFxRixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUgsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcY29yZVxcdXRpbFxccGFyc2UtbGlua3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IFBhcnNlTGlua3MgfSBmcm9tICcuL3BhcnNlLWxpbmtzLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnUGFyc2UgbGlua3Mgc2VydmljZSB0ZXN0JywgKCkgPT4ge1xuICBkZXNjcmliZSgnUGFyc2UgTGlua3MgU2VydmljZSBUZXN0JywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgcHJvdmlkZXJzOiBbUGFyc2VMaW5rc10sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBwYXNzZWQgYW4gZW1wdHkgc3RyaW5nJywgaW5qZWN0KFtQYXJzZUxpbmtzXSwgKHNlcnZpY2U6IFBhcnNlTGlua3MpID0+IHtcbiAgICAgIGV4cGVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlcnZpY2UucGFyc2UoJycpO1xuICAgICAgfSkudG9UaHJvdyhuZXcgRXJyb3IoJ2lucHV0IG11c3Qgbm90IGJlIG9mIHplcm8gbGVuZ3RoJykpO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBwYXNzZWQgd2l0aG91dCBjb21tYScsIGluamVjdChbUGFyc2VMaW5rc10sIChzZXJ2aWNlOiBQYXJzZUxpbmtzKSA9PiB7XG4gICAgICBleHBlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXJ2aWNlLnBhcnNlKCd0ZXN0Jyk7XG4gICAgICB9KS50b1Rocm93KG5ldyBFcnJvcignc2VjdGlvbiBjb3VsZCBub3QgYmUgc3BsaXQgb24gXCI7XCInKSk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHBhc3NlZCB3aXRob3V0IHNlbWljb2xvbicsIGluamVjdChbUGFyc2VMaW5rc10sIChzZXJ2aWNlOiBQYXJzZUxpbmtzKSA9PiB7XG4gICAgICBleHBlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXJ2aWNlLnBhcnNlKCd0ZXN0LHRlc3QyJyk7XG4gICAgICB9KS50b1Rocm93KG5ldyBFcnJvcignc2VjdGlvbiBjb3VsZCBub3QgYmUgc3BsaXQgb24gXCI7XCInKSk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gbGlua3Mgd2hlbiBoZWFkZXJzIGFyZSBwYXNzZWQnLCBpbmplY3QoW1BhcnNlTGlua3NdLCAoc2VydmljZTogUGFyc2VMaW5rcykgPT4ge1xuICAgICAgY29uc3QgbGlua3MgPSB7IGxhc3Q6IDAsIGZpcnN0OiAwIH07XG4gICAgICBleHBlY3Qoc2VydmljZS5wYXJzZSgnIDwvYXBpL2F1ZGl0cz9wYWdlPTAmc2l6ZT0yMD47IHJlbD1cImxhc3RcIiw8L2FwaS9hdWRpdHM/cGFnZT0wJnNpemU9MjA+OyByZWw9XCJmaXJzdFwiJykpLnRvRXF1YWwobGlua3MpO1xuICAgIH0pKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==