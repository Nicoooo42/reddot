{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\register\\register.component.spec.ts"],"sourcesContent":["jest.mock('@ngx-translate/core');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, tick, fakeAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\n\nimport { RegisterService } from './register.service';\nimport { RegisterComponent } from './register.component';\n\ndescribe('RegisterComponent', () => {\n  let fixture: ComponentFixture<RegisterComponent>;\n  let comp: RegisterComponent;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [RegisterComponent],\n        providers: [FormBuilder, TranslateService],\n      })\n        .overrideTemplate(RegisterComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RegisterComponent);\n    comp = fixture.componentInstance;\n  });\n\n  it('should ensure the two passwords entered match', () => {\n    comp.registerForm.patchValue({\n      password: 'password',\n      confirmPassword: 'non-matching',\n    });\n\n    comp.register();\n\n    expect(comp.doNotMatch).toBe(true);\n  });\n\n  it('should update success to true after creating an account', inject(\n    [RegisterService, TranslateService],\n    fakeAsync((service: RegisterService, mockLanguageService: TranslateService) => {\n      jest.spyOn(service, 'save').mockReturnValue(of({}));\n      mockLanguageService.currentLang = 'fr';\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith({\n        email: '',\n        password: 'password',\n        login: '',\n        langKey: 'fr',\n      });\n      expect(comp.success).toBe(true);\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of user existence upon 400/login already in use', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 400,\n          error: { type: LOGIN_ALREADY_USED_TYPE },\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorUserExists).toBe(true);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of email existence upon 400/email address already in use', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 400,\n          error: { type: EMAIL_ALREADY_USED_TYPE },\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorEmailExists).toBe(true);\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.error).toBe(false);\n    })\n  ));\n\n  it('should notify of generic error', inject(\n    [RegisterService],\n    fakeAsync((service: RegisterService) => {\n      jest.spyOn(service, 'save').mockReturnValue(\n        throwError({\n          status: 503,\n        })\n      );\n      comp.registerForm.patchValue({\n        password: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.register();\n      tick();\n\n      expect(comp.errorUserExists).toBe(false);\n      expect(comp.errorEmailExists).toBe(false);\n      expect(comp.error).toBe(true);\n    })\n  ));\n});\n"],"version":3}