6050f47bd5f5394e4da7db2e9bdf2e73
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const activate_service_1 = require("./activate.service");
const activate_component_1 = require("./activate.component");
describe('ActivateComponent', () => {
    let comp;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [activate_component_1.ActivateComponent],
            providers: [
                {
                    provide: router_1.ActivatedRoute,
                    useValue: { queryParams: rxjs_1.of({ key: 'ABC123' }) },
                },
            ],
        })
            .overrideTemplate(activate_component_1.ActivateComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        const fixture = testing_1.TestBed.createComponent(activate_component_1.ActivateComponent);
        comp = fixture.componentInstance;
    });
    it('calls activate.get with the key from params', testing_1.inject([activate_service_1.ActivateService], testing_1.fakeAsync((service) => {
        jest.spyOn(service, 'get').mockReturnValue(rxjs_1.of());
        comp.ngOnInit();
        testing_1.tick();
        expect(service.get).toHaveBeenCalledWith('ABC123');
    })));
    it('should set set success to true upon successful activation', testing_1.inject([activate_service_1.ActivateService], testing_1.fakeAsync((service) => {
        jest.spyOn(service, 'get').mockReturnValue(rxjs_1.of({}));
        comp.ngOnInit();
        testing_1.tick();
        expect(comp.error).toBe(false);
        expect(comp.success).toBe(true);
    })));
    it('should set set error to true upon activation failure', testing_1.inject([activate_service_1.ActivateService], testing_1.fakeAsync((service) => {
        jest.spyOn(service, 'get').mockReturnValue(rxjs_1.throwError('ERROR'));
        comp.ngOnInit();
        testing_1.tick();
        expect(comp.error).toBe(true);
        expect(comp.success).toBe(false);
    })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxcYWN0aXZhdGVcXGFjdGl2YXRlLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXVGO0FBQ3ZGLDBEQUF1RTtBQUN2RSw0Q0FBaUQ7QUFDakQsK0JBQXNDO0FBRXRDLHlEQUFxRDtBQUNyRCw2REFBeUQ7QUFFekQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLElBQXVCLENBQUM7SUFFNUIsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsWUFBWSxFQUFFLENBQUMsc0NBQWlCLENBQUM7WUFDakMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSx1QkFBYztvQkFDdkIsUUFBUSxFQUFFLEVBQUUsV0FBVyxFQUFFLFNBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFO2lCQUNqRDthQUNGO1NBQ0YsQ0FBQzthQUNDLGdCQUFnQixDQUFDLHNDQUFpQixFQUFFLEVBQUUsQ0FBQzthQUN2QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsc0NBQWlCLENBQUMsQ0FBQztRQUMzRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLGdCQUFNLENBQ3RELENBQUMsa0NBQWUsQ0FBQyxFQUNqQixtQkFBUyxDQUFDLENBQUMsT0FBd0IsRUFBRSxFQUFFO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixjQUFJLEVBQUUsQ0FBQztRQUVQLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJEQUEyRCxFQUFFLGdCQUFNLENBQ3BFLENBQUMsa0NBQWUsQ0FBQyxFQUNqQixtQkFBUyxDQUFDLENBQUMsT0FBd0IsRUFBRSxFQUFFO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVuRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsY0FBSSxFQUFFLENBQUM7UUFFUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0RBQXNELEVBQUUsZ0JBQU0sQ0FDL0QsQ0FBQyxrQ0FBZSxDQUFDLEVBQ2pCLG1CQUFTLENBQUMsQ0FBQyxPQUF3QixFQUFFLEVBQUU7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDLGlCQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsY0FBSSxFQUFFLENBQUM7UUFFUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXE5pY29sYXNcXERlc2t0b3BcXHRlc3Q2XFxnYXRld2F5XFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxhY2NvdW50XFxhY3RpdmF0ZVxcYWN0aXZhdGUuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCwgd2FpdEZvckFzeW5jLCB0aWNrLCBmYWtlQXN5bmMsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQWN0aXZhdGVTZXJ2aWNlIH0gZnJvbSAnLi9hY3RpdmF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFjdGl2YXRlQ29tcG9uZW50IH0gZnJvbSAnLi9hY3RpdmF0ZS5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnQWN0aXZhdGVDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wOiBBY3RpdmF0ZUNvbXBvbmVudDtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtBY3RpdmF0ZUNvbXBvbmVudF0sXG4gICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgICAgdXNlVmFsdWU6IHsgcXVlcnlQYXJhbXM6IG9mKHsga2V5OiAnQUJDMTIzJyB9KSB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShBY3RpdmF0ZUNvbXBvbmVudCwgJycpXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pXG4gICk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEFjdGl2YXRlQ29tcG9uZW50KTtcbiAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGFjdGl2YXRlLmdldCB3aXRoIHRoZSBrZXkgZnJvbSBwYXJhbXMnLCBpbmplY3QoXG4gICAgW0FjdGl2YXRlU2VydmljZV0sXG4gICAgZmFrZUFzeW5jKChzZXJ2aWNlOiBBY3RpdmF0ZVNlcnZpY2UpID0+IHtcbiAgICAgIGplc3Quc3B5T24oc2VydmljZSwgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZShvZigpKTtcblxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgdGljaygpO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdBQkMxMjMnKTtcbiAgICB9KVxuICApKTtcblxuICBpdCgnc2hvdWxkIHNldCBzZXQgc3VjY2VzcyB0byB0cnVlIHVwb24gc3VjY2Vzc2Z1bCBhY3RpdmF0aW9uJywgaW5qZWN0KFxuICAgIFtBY3RpdmF0ZVNlcnZpY2VdLFxuICAgIGZha2VBc3luYygoc2VydmljZTogQWN0aXZhdGVTZXJ2aWNlKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKHNlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUob2Yoe30pKTtcblxuICAgICAgY29tcC5uZ09uSW5pdCgpO1xuICAgICAgdGljaygpO1xuXG4gICAgICBleHBlY3QoY29tcC5lcnJvcikudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pXG4gICkpO1xuXG4gIGl0KCdzaG91bGQgc2V0IHNldCBlcnJvciB0byB0cnVlIHVwb24gYWN0aXZhdGlvbiBmYWlsdXJlJywgaW5qZWN0KFxuICAgIFtBY3RpdmF0ZVNlcnZpY2VdLFxuICAgIGZha2VBc3luYygoc2VydmljZTogQWN0aXZhdGVTZXJ2aWNlKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKHNlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUodGhyb3dFcnJvcignRVJST1InKSk7XG5cbiAgICAgIGNvbXAubmdPbkluaXQoKTtcbiAgICAgIHRpY2soKTtcblxuICAgICAgZXhwZWN0KGNvbXAuZXJyb3IpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICB9KVxuICApKTtcbn0pO1xuIl0sInZlcnNpb24iOjN9