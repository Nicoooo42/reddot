{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.component.spec.ts","mappings":";;AAAA,mDAAgF;AAChF,0DAAuE;AACvE,+BAA0B;AAE1B,uEAAmE;AACnE,mEAA+D;AAG/D,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,IAA4B,CAAC;IACjC,IAAI,OAAiD,CAAC;IACtD,IAAI,OAA6B,CAAC;IAElC,UAAU,CACR,sBAAY,CAAC,GAAG,EAAE;QAChB,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;YAClC,YAAY,EAAE,CAAC,gDAAsB,CAAC;YACtC,SAAS,EAAE,CAAC,4CAAoB,CAAC;SAClC,CAAC;aACC,gBAAgB,CAAC,gDAAsB,EAAE,EAAE,CAAC;aAC5C,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gDAAsB,CAAC,CAAC;QAC1D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACjC,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,4CAAoB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,QAAQ;YACR,MAAM,KAAK,GAAW;gBACpB;oBACE,MAAM,EAAE,UAAU;oBAClB,UAAU,EAAE;wBACV,SAAS,EAAE;4BACT,IAAI,EAAE,aAAa;yBACpB;qBACF;iBACF;aACF,CAAC;YACF,MAAM,eAAe,GAAqB;gBACxC;oBACE,IAAI,EAAE,cAAc;oBACpB,UAAU,EAAE;wBACV,mBAAmB,EAAE;4BACnB,KAAK,EAAE,MAAM;yBACd;qBACF;iBACF;aACF,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,eAAe,CAAC,CAAC,CAAC;YAE/E,OAAO;YACP,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { ConfigurationComponent } from './configuration.component';\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, PropertySource } from './configuration.model';\n\ndescribe('ConfigurationComponent', () => {\n  let comp: ConfigurationComponent;\n  let fixture: ComponentFixture<ConfigurationComponent>;\n  let service: ConfigurationService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [ConfigurationComponent],\n        providers: [ConfigurationService],\n      })\n        .overrideTemplate(ConfigurationComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ConfigurationComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(ConfigurationService);\n  });\n\n  describe('OnInit', () => {\n    it('Should call load all on init', () => {\n      // GIVEN\n      const beans: Bean[] = [\n        {\n          prefix: 'jhipster',\n          properties: {\n            clientApp: {\n              name: 'jhipsterApp',\n            },\n          },\n        },\n      ];\n      const propertySources: PropertySource[] = [\n        {\n          name: 'server.ports',\n          properties: {\n            'local.server.port': {\n              value: '8080',\n            },\n          },\n        },\n      ];\n      jest.spyOn(service, 'getBeans').mockReturnValue(of(beans));\n      jest.spyOn(service, 'getPropertySources').mockReturnValue(of(propertySources));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.getBeans).toHaveBeenCalled();\n      expect(service.getPropertySources).toHaveBeenCalled();\n      expect(comp.allBeans).toEqual(beans);\n      expect(comp.beans).toEqual(beans);\n      expect(comp.propertySources).toEqual(propertySources);\n    });\n  });\n});\n"],"version":3}