567ec5c0a4e372f1d8d1e2ca1c3f513a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const core_1 = require("@ngx-translate/core");
const translation_config_1 = require("../../config/translation.config");
const alert_service_1 = require("./alert.service");
describe('Alert service test', () => {
    describe('Alert Service Test', () => {
        let extAlerts;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [
                    core_1.TranslateModule.forRoot({
                        missingTranslationHandler: {
                            provide: core_1.MissingTranslationHandler,
                            useFactory: translation_config_1.missingTranslationHandler,
                        },
                    }),
                ],
            });
            const translateService = testing_1.TestBed.inject(core_1.TranslateService);
            translateService.setDefaultLang('en');
            jest.useFakeTimers();
            extAlerts = [];
        });
        it('should produce a proper alert object and fetch it', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            })).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(service.get().length).toBe(1);
            expect(service.get()[0]).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
        }));
        it('should produce a proper alert object and add it to external alert objects array', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            }, extAlerts)).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(extAlerts.length).toBe(1);
            expect(extAlerts[0]).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
        }));
        it('should produce an alert object with correct id', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster success' })).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 1,
            }));
            expect(service.get().length).toBe(2);
            expect(service.get()[1]).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 1,
            }));
        }));
        it('should close an alert correctly', testing_1.inject([alert_service_1.AlertService], (service) => {
            var _a, _b, _c;
            const alert0 = service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            const alert1 = service.addAlert({ type: 'info', message: 'Hello Jhipster info 2' });
            const alert2 = service.addAlert({ type: 'success', message: 'Hello Jhipster success' });
            expect(alert2).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 2,
            }));
            expect(service.get().length).toBe(3);
            (_a = alert1.close) === null || _a === void 0 ? void 0 : _a.call(alert1, service.get());
            expect(service.get().length).toBe(2);
            expect(service.get()[1]).not.toEqual(expect.objectContaining({
                type: 'info',
                message: 'Hello Jhipster info 2',
                id: 1,
            }));
            (_b = alert2.close) === null || _b === void 0 ? void 0 : _b.call(alert2, service.get());
            expect(service.get().length).toBe(1);
            expect(service.get()[0]).not.toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 2,
            }));
            (_c = alert0.close) === null || _c === void 0 ? void 0 : _c.call(alert0, service.get());
            expect(service.get().length).toBe(0);
        }));
        it('should close an alert on timeout correctly', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            expect(service.get().length).toBe(1);
            jest.advanceTimersByTime(6000);
            expect(service.get().length).toBe(0);
        }));
        it('should clear alerts', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            service.addAlert({ type: 'danger', message: 'Hello Jhipster info' });
            service.addAlert({ type: 'success', message: 'Hello Jhipster info' });
            expect(service.get().length).toBe(3);
            service.clear();
            expect(service.get().length).toBe(0);
        }));
        it('should produce a scoped alert', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            }, [])).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(service.get().length).toBe(0);
        }));
        it('should produce a success message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster' })).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a success message with custom position', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster', position: 'bottom left' })).toEqual(expect.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                position: 'bottom left',
            }));
        }));
        it('should produce a error message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'danger', message: 'Hello Jhipster' })).toEqual(expect.objectContaining({
                type: 'danger',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a warning message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'warning', message: 'Hello Jhipster' })).toEqual(expect.objectContaining({
                type: 'warning',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster' })).toEqual(expect.objectContaining({
                type: 'info',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message with translated message if key exists', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service, translateService) => {
            translateService.setTranslation('en', {
                'hello.jhipster': 'Translated message',
            });
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(expect.objectContaining({
                type: 'info',
                message: 'Translated message',
            }));
        }));
        it('should produce a info message with provided message if key does not exists', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service) => {
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(expect.objectContaining({
                type: 'info',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message with provided key if transltion key does not exist in translations and message is not provided', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service) => {
            expect(service.addAlert({ type: 'info', translationKey: 'hello.jhipster' })).toEqual(expect.objectContaining({
                type: 'info',
                message: 'hello.jhipster',
            }));
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,