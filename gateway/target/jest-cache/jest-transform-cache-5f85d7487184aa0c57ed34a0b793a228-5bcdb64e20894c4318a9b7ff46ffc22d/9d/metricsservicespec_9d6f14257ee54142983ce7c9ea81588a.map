{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,uDAAmD;AACnD,mDAA0D;AAE1D,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAuB,CAAC;IAC5B,IAAI,QAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QACH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC;QACzC,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,IAAI,cAAc,CAAC;YACnB,MAAM,OAAO,GAAG;gBACd,GAAG,EAAE,EAAE;gBACP,sBAAsB,EAAE,EAAE;gBAC1B,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,EAAE;gBACb,gBAAgB,EAAE,EAAE;gBACpB,cAAc,EAAE,EAAE;aACnB,CAAC;YAEF,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;gBACxC,cAAc,GAAG,QAAQ,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACnB,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,IAAI,cAAc,GAAsB,IAAI,CAAC;YAC7C,MAAM,IAAI,GAAe;gBACvB,OAAO,EAAE;oBACP;wBACE,UAAU,EAAE,mBAAmB;wBAC/B,QAAQ,EAAE,CAAC;wBACX,WAAW,EAAE,CAAC,CAAC;wBACf,YAAY,EAAE,CAAC;wBACf,UAAU,EAAE,CAAC,CAAC;wBACd,WAAW,EAAE,CAAC;wBACd,QAAQ,EAAE,IAAI;wBACd,WAAW,EAAE,CAAC,CAAC;wBACf,aAAa,EAAE,IAAI;wBACnB,MAAM,EAAE,IAAI;wBACZ,QAAQ,EAAE,KAAK;wBACf,SAAS,EAAE,KAAK;wBAChB,WAAW,EAAE,2BAAW,CAAC,QAAQ;wBACjC,QAAQ,EAAE,EAAE;wBACZ,UAAU,EAAE,EAAE;wBACd,cAAc,EAAE,EAAE;wBAClB,mBAAmB,EAAE,EAAE;wBACvB,QAAQ,EAAE,IAAI;qBACf;iBACF;aACF,CAAC;YAEF,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;gBACxC,cAAc,GAAG,QAAQ,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChB,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\metrics\\metrics.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { MetricsService } from './metrics.service';\nimport { ThreadDump, ThreadState } from './metrics.model';\n\ndescribe('Logs Service', () => {\n  let service: MetricsService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n    service = TestBed.inject(MetricsService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should return Metrics', () => {\n      let expectedResult;\n      const metrics = {\n        jvm: {},\n        'http.server.requests': {},\n        cache: {},\n        services: {},\n        databases: {},\n        garbageCollector: {},\n        processMetrics: {},\n      };\n\n      service.getMetrics().subscribe(received => {\n        expectedResult = received;\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(metrics);\n      expect(expectedResult).toEqual(metrics);\n    });\n\n    it('should return Thread Dump', () => {\n      let expectedResult: ThreadDump | null = null;\n      const dump: ThreadDump = {\n        threads: [\n          {\n            threadName: 'Reference Handler',\n            threadId: 2,\n            blockedTime: -1,\n            blockedCount: 7,\n            waitedTime: -1,\n            waitedCount: 0,\n            lockName: null,\n            lockOwnerId: -1,\n            lockOwnerName: null,\n            daemon: true,\n            inNative: false,\n            suspended: false,\n            threadState: ThreadState.Runnable,\n            priority: 10,\n            stackTrace: [],\n            lockedMonitors: [],\n            lockedSynchronizers: [],\n            lockInfo: null,\n          },\n        ],\n      };\n\n      service.threadDump().subscribe(received => {\n        expectedResult = received;\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(dump);\n      expect(expectedResult).toEqual(dump);\n    });\n  });\n});\n"],"version":3}