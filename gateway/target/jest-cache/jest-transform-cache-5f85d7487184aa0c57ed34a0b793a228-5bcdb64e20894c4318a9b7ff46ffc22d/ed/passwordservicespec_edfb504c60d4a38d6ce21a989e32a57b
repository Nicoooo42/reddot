6c80a33f5d9f379c9e7fb6c1c5437624
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const password_service_1 = require("./password.service");
const application_config_service_1 = require("app/core/config/application-config.service");
describe('Password Service', () => {
    let service;
    let httpMock;
    let applicationConfigService;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
        });
        service = testing_1.TestBed.inject(password_service_1.PasswordService);
        applicationConfigService = testing_1.TestBed.inject(application_config_service_1.ApplicationConfigService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify();
    });
    describe('Service methods', () => {
        it('should call change-password endpoint with correct values', () => {
            // GIVEN
            const password1 = 'password1';
            const password2 = 'password2';
            // WHEN
            service.save(password2, password1).subscribe();
            const testRequest = httpMock.expectOne({
                method: 'POST',
                url: applicationConfigService.getEndpointFor('api/account/change-password'),
            });
            // THEN
            expect(testRequest.request.body).toEqual({ currentPassword: password1, newPassword: password2 });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmRcXHBhc3N3b3JkLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRDtBQUNoRCwwREFBOEY7QUFFOUYseURBQXFEO0FBQ3JELDJGQUFzRjtBQUV0RixRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLElBQUksT0FBd0IsQ0FBQztJQUM3QixJQUFJLFFBQStCLENBQUM7SUFDcEMsSUFBSSx3QkFBa0QsQ0FBQztJQUV2RCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQztTQUNuQyxDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1FBQzFDLHdCQUF3QixHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLHFEQUF3QixDQUFDLENBQUM7UUFDcEUsUUFBUSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtRQUMvQixFQUFFLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO1lBQ2xFLFFBQVE7WUFDUixNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO1lBRTlCLE9BQU87WUFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUUvQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO2dCQUNyQyxNQUFNLEVBQUUsTUFBTTtnQkFDZCxHQUFHLEVBQUUsd0JBQXdCLENBQUMsY0FBYyxDQUFDLDZCQUE2QixDQUFDO2FBQzVFLENBQUMsQ0FBQztZQUVILE9BQU87WUFDUCxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ25HLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXE5pY29sYXNcXERlc2t0b3BcXHRlc3Q2XFxnYXRld2F5XFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxhY2NvdW50XFxwYXNzd29yZFxccGFzc3dvcmQuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBQYXNzd29yZFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25Db25maWdTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvY29uZmlnL2FwcGxpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ1Bhc3N3b3JkIFNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBzZXJ2aWNlOiBQYXNzd29yZFNlcnZpY2U7XG4gIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xuICBsZXQgYXBwbGljYXRpb25Db25maWdTZXJ2aWNlOiBBcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2U7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgfSk7XG5cbiAgICBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoUGFzc3dvcmRTZXJ2aWNlKTtcbiAgICBhcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2UgPSBUZXN0QmVkLmluamVjdChBcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2UpO1xuICAgIGh0dHBNb2NrID0gVGVzdEJlZC5pbmplY3QoSHR0cFRlc3RpbmdDb250cm9sbGVyKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBodHRwTW9jay52ZXJpZnkoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NlcnZpY2UgbWV0aG9kcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgY2hhbmdlLXBhc3N3b3JkIGVuZHBvaW50IHdpdGggY29ycmVjdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgcGFzc3dvcmQxID0gJ3Bhc3N3b3JkMSc7XG4gICAgICBjb25zdCBwYXNzd29yZDIgPSAncGFzc3dvcmQyJztcblxuICAgICAgLy8gV0hFTlxuICAgICAgc2VydmljZS5zYXZlKHBhc3N3b3JkMiwgcGFzc3dvcmQxKS5zdWJzY3JpYmUoKTtcblxuICAgICAgY29uc3QgdGVzdFJlcXVlc3QgPSBodHRwTW9jay5leHBlY3RPbmUoe1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgdXJsOiBhcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2UuZ2V0RW5kcG9pbnRGb3IoJ2FwaS9hY2NvdW50L2NoYW5nZS1wYXNzd29yZCcpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdCh0ZXN0UmVxdWVzdC5yZXF1ZXN0LmJvZHkpLnRvRXF1YWwoeyBjdXJyZW50UGFzc3dvcmQ6IHBhc3N3b3JkMSwgbmV3UGFzc3dvcmQ6IHBhc3N3b3JkMiB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==