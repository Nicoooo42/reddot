d908f0dac63f92e7c3e0ec1fb99b6f28
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
jest.mock('@ngx-translate/core');
jest.mock('app/core/auth/state-storage.service');
const router_1 = require("@angular/router");
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const core_1 = require("@ngx-translate/core");
const ngx_webstorage_1 = require("ngx-webstorage");
const authority_constants_1 = require("app/config/authority.constants");
const state_storage_service_1 = require("app/core/auth/state-storage.service");
const application_config_service_1 = require("app/core/config/application-config.service");
const account_service_1 = require("./account.service");
function accountWithAuthorities(authorities) {
    return {
        activated: true,
        authorities,
        email: '',
        firstName: '',
        langKey: '',
        lastName: '',
        login: '',
        imageUrl: '',
    };
}
describe('Account Service', () => {
    let service;
    let applicationConfigService;
    let httpMock;
    let mockStorageService;
    let mockRouter;
    let mockTranslateService;
    let sessionStorageService;
    beforeEach(() => {
        testing_2.TestBed.configureTestingModule({
            imports: [testing_1.HttpClientTestingModule, ngx_webstorage_1.NgxWebstorageModule.forRoot()],
            providers: [core_1.TranslateService, state_storage_service_1.StateStorageService, router_1.Router],
        });
        service = testing_2.TestBed.inject(account_service_1.AccountService);
        applicationConfigService = testing_2.TestBed.inject(application_config_service_1.ApplicationConfigService);
        httpMock = testing_2.TestBed.inject(testing_1.HttpTestingController);
        mockStorageService = testing_2.TestBed.inject(state_storage_service_1.StateStorageService);
        mockRouter = testing_2.TestBed.inject(router_1.Router);
        mockTranslateService = testing_2.TestBed.inject(core_1.TranslateService);
        sessionStorageService = testing_2.TestBed.inject(ngx_webstorage_1.SessionStorageService);
    });
    afterEach(() => {
        httpMock.verify();
    });
    describe('save', () => {
        it('should call account saving endpoint with correct values', () => {
            // GIVEN
            const account = accountWithAuthorities([]);
            // WHEN
            service.save(account).subscribe();
            const testRequest = httpMock.expectOne({ method: 'POST', url: applicationConfigService.getEndpointFor('api/account') });
            testRequest.flush({});
            // THEN
            expect(testRequest.request.body).toEqual(account);
        });
    });
    describe('authenticate', () => {
        it('authenticationState should emit null if input is null', () => {
            // GIVEN
            let userIdentity = accountWithAuthorities([]);
            service.getAuthenticationState().subscribe(account => (userIdentity = account));
            // WHEN
            service.authenticate(null);
            // THEN
            expect(userIdentity).toBeNull();
            expect(service.isAuthenticated()).toBe(false);
        });
        it('authenticationState should emit the same account as was in input parameter', () => {
            // GIVEN
            const expectedResult = accountWithAuthorities([]);
            let userIdentity = null;
            service.getAuthenticationState().subscribe(account => (userIdentity = account));
            // WHEN
            service.authenticate(expectedResult);
            // THEN
            expect(userIdentity).toEqual(expectedResult);
            expect(service.isAuthenticated()).toBe(true);
        });
    });
    describe('identity', () => {
        it('should call /account only once if last call have not returned', () => {
            // When I call
            service.identity().subscribe();
            // Once more
            service.identity().subscribe();
            // Then there is only request
            httpMock.expectOne({ method: 'GET' });
        });
        it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {
            // Given the user is authenticated
            service.identity().subscribe();
            httpMock.expectOne({ method: 'GET' }).flush({});
            // When I call
            service.identity().subscribe();
            // Then there is no second request
            httpMock.expectNone({ method: 'GET' });
            // When I log out
            service.authenticate(null);
            // and then call
            service.identity().subscribe();
            // Then there is a new request
            httpMock.expectOne({ method: 'GET' });
        });
        describe('should change the language on authentication if necessary', () => {
            it('should change language if user has not changed language manually', () => {
                // GIVEN
                sessionStorageService.retrieve = jest.fn(key => (key === 'locale' ? undefined : 'otherSessionStorageValue'));
                // WHEN
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).flush(Object.assign(Object.assign({}, accountWithAuthorities([])), { langKey: 'accountLang' }));
                // THEN
                expect(mockTranslateService.use).toHaveBeenCalledWith('accountLang');
            });
            it('should not change language if user has changed language manually', () => {
                // GIVEN
                sessionStorageService.retrieve = jest.fn(key => (key === 'locale' ? 'sessionLang' : undefined));
                // WHEN
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).flush(Object.assign(Object.assign({}, accountWithAuthorities([])), { langKey: 'accountLang' }));
                // THEN
                expect(mockTranslateService.use).not.toHaveBeenCalled();
            });
        });
        describe('navigateToStoredUrl', () => {
            it('should navigate to the previous stored url post successful authentication', () => {
                // GIVEN
                mockStorageService.getUrl = jest.fn(() => 'admin/users?page=0');
                // WHEN
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).flush({});
                // THEN
                expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);
                expect(mockStorageService.clearUrl).toHaveBeenCalledTimes(1);
                expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('admin/users?page=0');
            });
            it('should not navigate to the previous stored url when authentication fails', () => {
                // WHEN
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));
                // THEN
                expect(mockStorageService.getUrl).not.toHaveBeenCalled();
                expect(mockStorageService.clearUrl).not.toHaveBeenCalled();
                expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();
            });
            it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {
                // GIVEN
                mockStorageService.getUrl = jest.fn(() => null);
                // WHEN
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).flush({});
                // THEN
                expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);
                expect(mockStorageService.clearUrl).not.toHaveBeenCalled();
                expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();
            });
        });
    });
    describe('hasAnyAuthority', () => {
        describe('hasAnyAuthority string parameter', () => {
            it('should return false if user is not logged', () => {
                const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.USER);
                expect(hasAuthority).toBe(false);
            });
            it('should return false if user is logged and has not authority', () => {
                service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.ADMIN);
                expect(hasAuthority).toBe(false);
            });
            it('should return true if user is logged and has authority', () => {
                service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.USER);
                expect(hasAuthority).toBe(true);
            });
        });
        describe('hasAnyAuthority array parameter', () => {
            it('should return false if user is not logged', () => {
                const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.USER]);
                expect(hasAuthority).toBeFalsy();
            });
            it('should return false if user is logged and has not authority', () => {
                service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.ADMIN]);
                expect(hasAuthority).toBe(false);
            });
            it('should return true if user is logged and has authority', () => {
                service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.USER, authority_constants_1.Authority.ADMIN]);
                expect(hasAuthority).toBe(true);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,