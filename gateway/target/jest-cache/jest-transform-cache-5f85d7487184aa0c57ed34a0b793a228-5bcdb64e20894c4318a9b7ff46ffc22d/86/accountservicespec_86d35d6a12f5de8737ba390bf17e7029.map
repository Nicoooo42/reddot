{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\auth\\account.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\core\\auth\\account.service.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('@ngx-translate/core');\njest.mock('app/core/auth/state-storage.service');\n\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NgxWebstorageModule, SessionStorageService } from 'ngx-webstorage';\n\nimport { Account } from 'app/core/auth/account.model';\nimport { Authority } from 'app/config/authority.constants';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\nimport { AccountService } from './account.service';\n\nfunction accountWithAuthorities(authorities: string[]): Account {\n  return {\n    activated: true,\n    authorities,\n    email: '',\n    firstName: '',\n    langKey: '',\n    lastName: '',\n    login: '',\n    imageUrl: '',\n  };\n}\n\ndescribe('Account Service', () => {\n  let service: AccountService;\n  let applicationConfigService: ApplicationConfigService;\n  let httpMock: HttpTestingController;\n  let mockStorageService: StateStorageService;\n  let mockRouter: Router;\n  let mockTranslateService: TranslateService;\n  let sessionStorageService: SessionStorageService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n      providers: [TranslateService, StateStorageService, Router],\n    });\n\n    service = TestBed.inject(AccountService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n    mockStorageService = TestBed.inject(StateStorageService);\n    mockRouter = TestBed.inject(Router);\n    mockTranslateService = TestBed.inject(TranslateService);\n    sessionStorageService = TestBed.inject(SessionStorageService);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('save', () => {\n    it('should call account saving endpoint with correct values', () => {\n      // GIVEN\n      const account = accountWithAuthorities([]);\n\n      // WHEN\n      service.save(account).subscribe();\n      const testRequest = httpMock.expectOne({ method: 'POST', url: applicationConfigService.getEndpointFor('api/account') });\n      testRequest.flush({});\n\n      // THEN\n      expect(testRequest.request.body).toEqual(account);\n    });\n  });\n\n  describe('authenticate', () => {\n    it('authenticationState should emit null if input is null', () => {\n      // GIVEN\n      let userIdentity: Account | null = accountWithAuthorities([]);\n      service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n      // WHEN\n      service.authenticate(null);\n\n      // THEN\n      expect(userIdentity).toBeNull();\n      expect(service.isAuthenticated()).toBe(false);\n    });\n\n    it('authenticationState should emit the same account as was in input parameter', () => {\n      // GIVEN\n      const expectedResult = accountWithAuthorities([]);\n      let userIdentity: Account | null = null;\n      service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n      // WHEN\n      service.authenticate(expectedResult);\n\n      // THEN\n      expect(userIdentity).toEqual(expectedResult);\n      expect(service.isAuthenticated()).toBe(true);\n    });\n  });\n\n  describe('identity', () => {\n    it('should call /account only once if last call have not returned', () => {\n      // When I call\n      service.identity().subscribe();\n      // Once more\n      service.identity().subscribe();\n      // Then there is only request\n      httpMock.expectOne({ method: 'GET' });\n    });\n\n    it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {\n      // Given the user is authenticated\n      service.identity().subscribe();\n      httpMock.expectOne({ method: 'GET' }).flush({});\n\n      // When I call\n      service.identity().subscribe();\n\n      // Then there is no second request\n      httpMock.expectNone({ method: 'GET' });\n\n      // When I log out\n      service.authenticate(null);\n      // and then call\n      service.identity().subscribe();\n\n      // Then there is a new request\n      httpMock.expectOne({ method: 'GET' });\n    });\n\n    describe('should change the language on authentication if necessary', () => {\n      it('should change language if user has not changed language manually', () => {\n        // GIVEN\n        sessionStorageService.retrieve = jest.fn(key => (key === 'locale' ? undefined : 'otherSessionStorageValue'));\n\n        // WHEN\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({ ...accountWithAuthorities([]), langKey: 'accountLang' });\n\n        // THEN\n        expect(mockTranslateService.use).toHaveBeenCalledWith('accountLang');\n      });\n\n      it('should not change language if user has changed language manually', () => {\n        // GIVEN\n        sessionStorageService.retrieve = jest.fn(key => (key === 'locale' ? 'sessionLang' : undefined));\n\n        // WHEN\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({ ...accountWithAuthorities([]), langKey: 'accountLang' });\n\n        // THEN\n        expect(mockTranslateService.use).not.toHaveBeenCalled();\n      });\n    });\n\n    describe('navigateToStoredUrl', () => {\n      it('should navigate to the previous stored url post successful authentication', () => {\n        // GIVEN\n        mockStorageService.getUrl = jest.fn(() => 'admin/users?page=0');\n\n        // WHEN\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({});\n\n        // THEN\n        expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n        expect(mockStorageService.clearUrl).toHaveBeenCalledTimes(1);\n        expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('admin/users?page=0');\n      });\n\n      it('should not navigate to the previous stored url when authentication fails', () => {\n        // WHEN\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));\n\n        // THEN\n        expect(mockStorageService.getUrl).not.toHaveBeenCalled();\n        expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n        expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n      });\n\n      it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {\n        // GIVEN\n        mockStorageService.getUrl = jest.fn(() => null);\n\n        // WHEN\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({});\n\n        // THEN\n        expect(mockStorageService.getUrl).toHaveBeenCalledTimes(1);\n        expect(mockStorageService.clearUrl).not.toHaveBeenCalled();\n        expect(mockRouter.navigateByUrl).not.toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('hasAnyAuthority', () => {\n    describe('hasAnyAuthority string parameter', () => {\n      it('should return false if user is not logged', () => {\n        const hasAuthority = service.hasAnyAuthority(Authority.USER);\n        expect(hasAuthority).toBe(false);\n      });\n\n      it('should return false if user is logged and has not authority', () => {\n        service.authenticate(accountWithAuthorities([Authority.USER]));\n\n        const hasAuthority = service.hasAnyAuthority(Authority.ADMIN);\n\n        expect(hasAuthority).toBe(false);\n      });\n\n      it('should return true if user is logged and has authority', () => {\n        service.authenticate(accountWithAuthorities([Authority.USER]));\n\n        const hasAuthority = service.hasAnyAuthority(Authority.USER);\n\n        expect(hasAuthority).toBe(true);\n      });\n    });\n\n    describe('hasAnyAuthority array parameter', () => {\n      it('should return false if user is not logged', () => {\n        const hasAuthority = service.hasAnyAuthority([Authority.USER]);\n        expect(hasAuthority).toBeFalsy();\n      });\n\n      it('should return false if user is logged and has not authority', () => {\n        service.authenticate(accountWithAuthorities([Authority.USER]));\n\n        const hasAuthority = service.hasAnyAuthority([Authority.ADMIN]);\n\n        expect(hasAuthority).toBe(false);\n      });\n\n      it('should return true if user is logged and has authority', () => {\n        service.authenticate(accountWithAuthorities([Authority.USER]));\n\n        const hasAuthority = service.hasAnyAuthority([Authority.USER, Authority.ADMIN]);\n\n        expect(hasAuthority).toBe(true);\n      });\n    });\n  });\n});\n"],"version":3}