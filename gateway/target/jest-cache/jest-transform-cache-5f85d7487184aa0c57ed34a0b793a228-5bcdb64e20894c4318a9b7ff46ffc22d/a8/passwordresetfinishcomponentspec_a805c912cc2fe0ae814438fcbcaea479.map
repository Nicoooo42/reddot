{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.component.spec.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, inject, tick, fakeAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { PasswordResetFinishComponent } from './password-reset-finish.component';\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\ndescribe('PasswordResetFinishComponent', () => {\n  let fixture: ComponentFixture<PasswordResetFinishComponent>;\n  let comp: PasswordResetFinishComponent;\n\n  beforeEach(() => {\n    fixture = TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [PasswordResetFinishComponent],\n      providers: [\n        FormBuilder,\n        {\n          provide: ActivatedRoute,\n          useValue: { queryParams: of({ key: 'XYZPDQ' }) },\n        },\n      ],\n    })\n      .overrideTemplate(PasswordResetFinishComponent, '')\n      .createComponent(PasswordResetFinishComponent);\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(PasswordResetFinishComponent);\n    comp = fixture.componentInstance;\n    comp.ngOnInit();\n  });\n\n  it('should define its initial state', () => {\n    expect(comp.initialized).toBe(true);\n    expect(comp.key).toEqual('XYZPDQ');\n  });\n\n  it('sets focus after the view has been initialized', () => {\n    const node = {\n      focus: jest.fn(),\n    };\n    comp.newPassword = new ElementRef(node);\n\n    comp.ngAfterViewInit();\n\n    expect(node.focus).toHaveBeenCalled();\n  });\n\n  it('should ensure the two passwords entered match', () => {\n    comp.passwordForm.patchValue({\n      newPassword: 'password',\n      confirmPassword: 'non-matching',\n    });\n\n    comp.finishReset();\n\n    expect(comp.doNotMatch).toBe(true);\n  });\n\n  it('should update success to true after resetting password', inject(\n    [PasswordResetFinishService],\n    fakeAsync((service: PasswordResetFinishService) => {\n      jest.spyOn(service, 'save').mockReturnValue(of({}));\n      comp.passwordForm.patchValue({\n        newPassword: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.finishReset();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\n      expect(comp.success).toBe(true);\n    })\n  ));\n\n  it('should notify of generic error', inject(\n    [PasswordResetFinishService],\n    fakeAsync((service: PasswordResetFinishService) => {\n      jest.spyOn(service, 'save').mockReturnValue(throwError('ERROR'));\n      comp.passwordForm.patchValue({\n        newPassword: 'password',\n        confirmPassword: 'password',\n      });\n\n      comp.finishReset();\n      tick();\n\n      expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\n      expect(comp.success).toBe(false);\n      expect(comp.error).toBe(true);\n    })\n  ));\n});\n"],"version":3}