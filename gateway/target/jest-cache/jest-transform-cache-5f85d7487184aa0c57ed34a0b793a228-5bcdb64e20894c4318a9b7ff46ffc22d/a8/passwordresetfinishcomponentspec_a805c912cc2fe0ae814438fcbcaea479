ec4a3bc093e4d30b87a3f9ec765175c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const password_reset_finish_component_1 = require("./password-reset-finish.component");
const password_reset_finish_service_1 = require("./password-reset-finish.service");
describe('PasswordResetFinishComponent', () => {
    let fixture;
    let comp;
    beforeEach(() => {
        fixture = testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [password_reset_finish_component_1.PasswordResetFinishComponent],
            providers: [
                forms_1.FormBuilder,
                {
                    provide: router_1.ActivatedRoute,
                    useValue: { queryParams: rxjs_1.of({ key: 'XYZPDQ' }) },
                },
            ],
        })
            .overrideTemplate(password_reset_finish_component_1.PasswordResetFinishComponent, '')
            .createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
    });
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
        comp = fixture.componentInstance;
        comp.ngOnInit();
    });
    it('should define its initial state', () => {
        expect(comp.initialized).toBe(true);
        expect(comp.key).toEqual('XYZPDQ');
    });
    it('sets focus after the view has been initialized', () => {
        const node = {
            focus: jest.fn(),
        };
        comp.newPassword = new core_1.ElementRef(node);
        comp.ngAfterViewInit();
        expect(node.focus).toHaveBeenCalled();
    });
    it('should ensure the two passwords entered match', () => {
        comp.passwordForm.patchValue({
            newPassword: 'password',
            confirmPassword: 'non-matching',
        });
        comp.finishReset();
        expect(comp.doNotMatch).toBe(true);
    });
    it('should update success to true after resetting password', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
        jest.spyOn(service, 'save').mockReturnValue(rxjs_1.of({}));
        comp.passwordForm.patchValue({
            newPassword: 'password',
            confirmPassword: 'password',
        });
        comp.finishReset();
        testing_1.tick();
        expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
        expect(comp.success).toBe(true);
    })));
    it('should notify of generic error', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
        jest.spyOn(service, 'save').mockReturnValue(rxjs_1.throwError('ERROR'));
        comp.passwordForm.patchValue({
            newPassword: 'password',
            confirmPassword: 'password',
        });
        comp.finishReset();
        testing_1.tick();
        expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
        expect(comp.success).toBe(false);
        expect(comp.error).toBe(true);
    })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmQtcmVzZXRcXGZpbmlzaFxccGFzc3dvcmQtcmVzZXQtZmluaXNoLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTJDO0FBQzNDLG1EQUEyRjtBQUMzRiwwREFBdUU7QUFDdkUsMENBQTZDO0FBQzdDLDRDQUFpRDtBQUNqRCwrQkFBc0M7QUFFdEMsdUZBQWlGO0FBQ2pGLG1GQUE2RTtBQUU3RSxRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQzVDLElBQUksT0FBdUQsQ0FBQztJQUM1RCxJQUFJLElBQWtDLENBQUM7SUFFdkMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQ3ZDLE9BQU8sRUFBRSxDQUFDLGlDQUF1QixDQUFDO1lBQ2xDLFlBQVksRUFBRSxDQUFDLDhEQUE0QixDQUFDO1lBQzVDLFNBQVMsRUFBRTtnQkFDVCxtQkFBVztnQkFDWDtvQkFDRSxPQUFPLEVBQUUsdUJBQWM7b0JBQ3ZCLFFBQVEsRUFBRSxFQUFFLFdBQVcsRUFBRSxTQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRTtpQkFDakQ7YUFDRjtTQUNGLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyw4REFBNEIsRUFBRSxFQUFFLENBQUM7YUFDbEQsZUFBZSxDQUFDLDhEQUE0QixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLDhEQUE0QixDQUFDLENBQUM7UUFDaEUsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFF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LCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmQtcmVzZXRcXGZpbmlzaFxccGFzc3dvcmQtcmVzZXQtZmluaXNoLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGluamVjdCwgdGljaywgZmFrZUFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQgfSBmcm9tICcuL3Bhc3N3b3JkLXJlc2V0LWZpbmlzaC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLXJlc2V0LWZpbmlzaC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ1Bhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFBhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQ+O1xuICBsZXQgY29tcDogUGFzc3dvcmRSZXNldEZpbmlzaENvbXBvbmVudDtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICBkZWNsYXJhdGlvbnM6IFtQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50XSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBGb3JtQnVpbGRlcixcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgIHVzZVZhbHVlOiB7IHF1ZXJ5UGFyYW1zOiBvZih7IGtleTogJ1hZWlBEUScgfSkgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQsICcnKVxuICAgICAgLmNyZWF0ZUNvbXBvbmVudChQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50KTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFBhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQpO1xuICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGNvbXAubmdPbkluaXQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZWZpbmUgaXRzIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNvbXAuaW5pdGlhbGl6ZWQpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGNvbXAua2V5KS50b0VxdWFsKCdYWVpQRFEnKTtcbiAgfSk7XG5cbiAgaXQoJ3NldHMgZm9jdXMgYWZ0ZXIgdGhlIHZpZXcgaGFzIGJlZW4gaW5pdGlhbGl6ZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGZvY3VzOiBqZXN0LmZuKCksXG4gICAgfTtcbiAgICBjb21wLm5ld1Bhc3N3b3JkID0gbmV3IEVsZW1lbnRSZWYobm9kZSk7XG5cbiAgICBjb21wLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuXG4gICAgZXhwZWN0KG5vZGUuZm9jdXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlbnN1cmUgdGhlIHR3byBwYXNzd29yZHMgZW50ZXJlZCBtYXRjaCcsICgpID0+IHtcbiAgICBjb21wLnBhc3N3b3JkRm9ybS5wYXRjaFZhbHVlKHtcbiAgICAgIG5ld1Bhc3N3b3JkOiAncGFzc3dvcmQnLFxuICAgICAgY29uZmlybVBhc3N3b3JkOiAnbm9uLW1hdGNoaW5nJyxcbiAgICB9KTtcblxuICAgIGNvbXAuZmluaXNoUmVzZXQoKTtcblxuICAgIGV4cGVjdChjb21wLmRvTm90TWF0Y2gpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdXBkYXRlIHN1Y2Nlc3MgdG8gdHJ1ZSBhZnRlciByZXNldHRpbmcgcGFzc3dvcmQnLCBpbmplY3QoXG4gICAgW1Bhc3N3b3JkUmVzZXRGaW5pc2hTZXJ2aWNlXSxcbiAgICBmYWtlQXN5bmMoKHNlcnZpY2U6IFBhc3N3b3JkUmVzZXRGaW5pc2hTZXJ2aWNlKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKHNlcnZpY2UsICdzYXZlJykubW9ja1JldHVyblZhbHVlKG9mKHt9KSk7XG4gICAgICBjb21wLnBhc3N3b3JkRm9ybS5wYXRjaFZhbHVlKHtcbiAgICAgICAgbmV3UGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gICAgICAgIGNvbmZpcm1QYXNzd29yZDogJ3Bhc3N3b3JkJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb21wLmZpbmlzaFJlc2V0KCk7XG4gICAgICB0aWNrKCk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdYWVpQRFEnLCAncGFzc3dvcmQnKTtcbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSlcbiAgKSk7XG5cbiAgaXQoJ3Nob3VsZCBub3RpZnkgb2YgZ2VuZXJpYyBlcnJvcicsIGluamVjdChcbiAgICBbUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2VdLFxuICAgIGZha2VBc3luYygoc2VydmljZTogUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2UpID0+IHtcbiAgICAgIGplc3Quc3B5T24oc2VydmljZSwgJ3NhdmUnKS5tb2NrUmV0dXJuVmFsdWUodGhyb3dFcnJvcignRVJST1InKSk7XG4gICAgICBjb21wLnBhc3N3b3JkRm9ybS5wYXRjaFZhbHVlKHtcbiAgICAgICAgbmV3UGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gICAgICAgIGNvbmZpcm1QYXNzd29yZDogJ3Bhc3N3b3JkJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb21wLmZpbmlzaFJlc2V0KCk7XG4gICAgICB0aWNrKCk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdYWVpQRFEnLCAncGFzc3dvcmQnKTtcbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGNvbXAuZXJyb3IpLnRvQmUodHJ1ZSk7XG4gICAgfSlcbiAgKSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==