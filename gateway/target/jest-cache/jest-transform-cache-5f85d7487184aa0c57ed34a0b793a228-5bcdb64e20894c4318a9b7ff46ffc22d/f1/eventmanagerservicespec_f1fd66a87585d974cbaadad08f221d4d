722df6b8ff19b5ecfc74674dc2ff65ee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const event_manager_service_1 = require("./event-manager.service");
describe('Event Manager tests', () => {
    describe('EventWithContent', () => {
        it('should create correctly EventWithContent', () => {
            // WHEN
            const eventWithContent = new event_manager_service_1.EventWithContent('name', 'content');
            // THEN
            expect(eventWithContent).toEqual({ name: 'name', content: 'content' });
        });
    });
    describe('EventManager', () => {
        let recievedEvent;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                providers: [event_manager_service_1.EventManager],
            });
            recievedEvent = null;
        });
        it('should not fail when nosubscriber and broadcasting', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            expect(eventManager.observer).toBeUndefined();
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted EventWithContent', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast({ name: 'unrelatedModifier', content: 'unreleated modification' });
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted string', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast('modifier');
            // THEN
            expect(recievedEvent).toEqual('modifier');
        }));
        it('should subscribe to multiple events', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe(['modifier', 'modifier2'], (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
            // WHEN
            eventManager.broadcast('modifier2');
            // THEN
            expect(recievedEvent).toEqual('modifier2');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcY29yZVxcdXRpbFxcZXZlbnQtbWFuYWdlci5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBd0Q7QUFFeEQsbUVBQXlFO0FBRXpFLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE9BQU87WUFDUCxNQUFNLGdCQUFnQixHQUFHLElBQUksd0NBQWdCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRWpFLE9BQU87WUFDUCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLGFBQXdELENBQUM7UUFFN0QsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLFNBQVMsRUFBRSxDQUFDLG9DQUFZLENBQUM7YUFDMUIsQ0FBQyxDQUFDO1lBQ0gsYUFBYSxHQUFHLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxnQkFBTSxDQUFDLENBQUMsb0NBQVksQ0FBQyxFQUFFLENBQUMsWUFBMEIsRUFBRSxFQUFFO1lBQzdHLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDOUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFF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c2t0b3BcXHRlc3Q2XFxnYXRld2F5XFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxjb3JlXFx1dGlsXFxldmVudC1tYW5hZ2VyLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIsIEV2ZW50V2l0aENvbnRlbnQgfSBmcm9tICcuL2V2ZW50LW1hbmFnZXIuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdFdmVudCBNYW5hZ2VyIHRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnRXZlbnRXaXRoQ29udGVudCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBjb3JyZWN0bHkgRXZlbnRXaXRoQ29udGVudCcsICgpID0+IHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IGV2ZW50V2l0aENvbnRlbnQgPSBuZXcgRXZlbnRXaXRoQ29udGVudCgnbmFtZScsICdjb250ZW50Jyk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChldmVudFdpdGhDb250ZW50KS50b0VxdWFsKHsgbmFtZTogJ25hbWUnLCBjb250ZW50OiAnY29udGVudCcgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFdmVudE1hbmFnZXInLCAoKSA9PiB7XG4gICAgbGV0IHJlY2lldmVkRXZlbnQ6IEV2ZW50V2l0aENvbnRlbnQ8dW5rbm93bj4gfCBzdHJpbmcgfCBudWxsO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBwcm92aWRlcnM6IFtFdmVudE1hbmFnZXJdLFxuICAgICAgfSk7XG4gICAgICByZWNpZXZlZEV2ZW50ID0gbnVsbDtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGZhaWwgd2hlbiBub3N1YnNjcmliZXIgYW5kIGJyb2FkY2FzdGluZycsIGluamVjdChbRXZlbnRNYW5hZ2VyXSwgKGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyKSA9PiB7XG4gICAgICBleHBlY3QoZXZlbnRNYW5hZ2VyLm9ic2VydmVyKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KHsgbmFtZTogJ21vZGlmaWVyJywgY29udGVudDogJ21vZGlmaWVkIHNvbWV0aGluZycgfSk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gb2JzZXJ2YWJsZSBhbmQgY2FsbGJhY2sgd2hlbiBicm9hZGNhc3RlZCBFdmVudFdpdGhDb250ZW50JywgaW5qZWN0KFxuICAgICAgW0V2ZW50TWFuYWdlcl0sXG4gICAgICAoZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIpID0+IHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgZXZlbnRNYW5hZ2VyLnN1YnNjcmliZSgnbW9kaWZpZXInLCAoZXZlbnQ6IEV2ZW50V2l0aENvbnRlbnQ8dW5rbm93bj4gfCBzdHJpbmcpID0+IChyZWNpZXZlZEV2ZW50ID0gZXZlbnQpKTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoeyBuYW1lOiAndW5yZWxhdGVkTW9kaWZpZXInLCBjb250ZW50OiAndW5yZWxlYXRlZCBtb2RpZmljYXRpb24nIH0pO1xuICAgICAgICAvLyBUSEVOXG4gICAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0JlTnVsbCgpO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCh7IG5hbWU6ICdtb2RpZmllcicsIGNvbnRlbnQ6ICdtb2RpZmllZCBzb21ldGhpbmcnIH0pO1xuICAgICAgICAvLyBUSEVOXG4gICAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0VxdWFsKHsgbmFtZTogJ21vZGlmaWVyJywgY29udGVudDogJ21vZGlmaWVkIHNvbWV0aGluZycgfSk7XG4gICAgICB9XG4gICAgKSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBvYnNlcnZhYmxlIGFuZCBjYWxsYmFjayB3aGVuIGJyb2FkY2FzdGVkIHN0cmluZycsIGluamVjdChbRXZlbnRNYW5hZ2VyXSwgKGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgZXZlbnRNYW5hZ2VyLnN1YnNjcmliZSgnbW9kaWZpZXInLCAoZXZlbnQ6IEV2ZW50V2l0aENvbnRlbnQ8dW5rbm93bj4gfCBzdHJpbmcpID0+IChyZWNpZXZlZEV2ZW50ID0gZXZlbnQpKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCgndW5yZWxhdGVkTW9kaWZpZXInKTtcbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0JlTnVsbCgpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KCdtb2RpZmllcicpO1xuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvRXF1YWwoJ21vZGlmaWVyJyk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCBzdWJzY3JpYmUgdG8gbXVsdGlwbGUgZXZlbnRzJywgaW5qZWN0KFtFdmVudE1hbmFnZXJdLCAoZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBldmVudE1hbmFnZXIuc3Vic2NyaWJlKFsnbW9kaWZpZXInLCAnbW9kaWZpZXIyJ10sIChldmVudDogRXZlbnRXaXRoQ29udGVudDx1bmtub3duPiB8IHN0cmluZykgPT4gKHJlY2lldmVkRXZlbnQgPSBldmVudCkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KCd1bnJlbGF0ZWRNb2RpZmllcicpO1xuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoeyBuYW1lOiAnbW9kaWZpZXInLCBjb250ZW50OiAnbW9kaWZpZWQgc29tZXRoaW5nJyB9KTtcbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0VxdWFsKHsgbmFtZTogJ21vZGlmaWVyJywgY29udGVudDogJ21vZGlmaWVkIHNvbWV0aGluZycgfSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoJ21vZGlmaWVyMicpO1xuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlY2lldmVkRXZlbnQpLnRvRXF1YWwoJ21vZGlmaWVyMicpO1xuICAgIH0pKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==