{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\settings\\settings.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\settings\\settings.component.spec.ts"],"sourcesContent":["jest.mock('@ngx-translate/core');\njest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { throwError, of } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\n\nimport { SettingsComponent } from './settings.component';\n\ndescribe('SettingsComponent', () => {\n  let comp: SettingsComponent;\n  let fixture: ComponentFixture<SettingsComponent>;\n  let mockAccountService: AccountService;\n  const account: Account = {\n    firstName: 'John',\n    lastName: 'Doe',\n    activated: true,\n    email: 'john.doe@mail.com',\n    langKey: 'fr',\n    login: 'john',\n    authorities: [],\n    imageUrl: '',\n  };\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [SettingsComponent],\n        providers: [FormBuilder, TranslateService, AccountService],\n      })\n        .overrideTemplate(SettingsComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(SettingsComponent);\n    comp = fixture.componentInstance;\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.identity = jest.fn(() => of(account));\n    mockAccountService.getAuthenticationState = jest.fn(() => of(account));\n  });\n\n  it('should send the current identity upon save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => of({}));\n    const settingsFormValues = {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@mail.com',\n      langKey: 'fr',\n    };\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(mockAccountService.identity).toHaveBeenCalled();\n    expect(mockAccountService.save).toHaveBeenCalledWith(account);\n    expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);\n    expect(comp.settingsForm.value).toEqual(settingsFormValues);\n  });\n\n  it('should notify of success upon successful save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => of({}));\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(comp.success).toBe(true);\n  });\n\n  it('should notify of error upon failed save', () => {\n    // GIVEN\n    mockAccountService.save = jest.fn(() => throwError('ERROR'));\n\n    // WHEN\n    comp.ngOnInit();\n    comp.save();\n\n    // THEN\n    expect(comp.success).toBe(false);\n  });\n});\n"],"version":3}