a3281976b3bb68e8d20f39007379a3d8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@ngx-translate/core');
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const core_1 = require("@ngx-translate/core");
const account_service_1 = require("app/core/auth/account.service");
const settings_component_1 = require("./settings.component");
describe('SettingsComponent', () => {
    let comp;
    let fixture;
    let mockAccountService;
    const account = {
        firstName: 'John',
        lastName: 'Doe',
        activated: true,
        email: 'john.doe@mail.com',
        langKey: 'fr',
        login: 'john',
        authorities: [],
        imageUrl: '',
    };
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [settings_component_1.SettingsComponent],
            providers: [forms_1.FormBuilder, core_1.TranslateService, account_service_1.AccountService],
        })
            .overrideTemplate(settings_component_1.SettingsComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(settings_component_1.SettingsComponent);
        comp = fixture.componentInstance;
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
        mockAccountService.identity = jest.fn(() => rxjs_1.of(account));
        mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(account));
    });
    it('should send the current identity upon save', () => {
        // GIVEN
        mockAccountService.save = jest.fn(() => rxjs_1.of({}));
        const settingsFormValues = {
            firstName: 'John',
            lastName: 'Doe',
            email: 'john.doe@mail.com',
            langKey: 'fr',
        };
        // WHEN
        comp.ngOnInit();
        comp.save();
        // THEN
        expect(mockAccountService.identity).toHaveBeenCalled();
        expect(mockAccountService.save).toHaveBeenCalledWith(account);
        expect(mockAccountService.authenticate).toHaveBeenCalledWith(account);
        expect(comp.settingsForm.value).toEqual(settingsFormValues);
    });
    it('should notify of success upon successful save', () => {
        // GIVEN
        mockAccountService.save = jest.fn(() => rxjs_1.of({}));
        // WHEN
        comp.ngOnInit();
        comp.save();
        // THEN
        expect(comp.success).toBe(true);
    });
    it('should notify of error upon failed save', () => {
        // GIVEN
        mockAccountService.save = jest.fn(() => rxjs_1.throwError('ERROR'));
        // WHEN
        comp.ngOnInit();
        comp.save();
        // THEN
        expect(comp.success).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxcc2V0dGluZ3NcXHNldHRpbmdzLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUUzQyxtREFBZ0Y7QUFDaEYsMERBQXVFO0FBQ3ZFLDBDQUE2QztBQUM3QywrQkFBc0M7QUFDdEMsOENBQXVEO0FBRXZELG1FQUErRDtBQUcvRCw2REFBeUQ7QUFFekQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLElBQXVCLENBQUM7SUFDNUIsSUFBSSxPQUE0QyxDQUFDO0lBQ2pELElBQUksa0JBQWtDLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQVk7UUFDdkIsU0FBUyxFQUFFLE1BQU07UUFDakIsUUFBUSxFQUFFLEtBQUs7UUFDZixTQUFTLEVBQUUsSUFBSTtRQUNmLEtBQUssRUFBRSxtQkFBbUI7UUFDMUIsT0FBTyxFQUFFLElBQUk7UUFDYixLQUFLLEVBQUUsTUFBTTtRQUNiLFdBQVcsRUFBRSxFQUFFO1FBQ2YsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDO0lBRUYsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsWUFBWSxFQUFFLENBQUMsc0NBQWlCLENBQUM7WUFDakMsU0FBUyxFQUFFLENBQUMsbUJBQVcsRUFBRSx1QkFBZ0IsRUFBRSxnQ0FBYyxDQUFDO1NBQzNELENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyxzQ0FBaUIsRUFBRSxFQUFFLENBQUM7YUFDdkMsaUJBQWlCLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxzQ0FBaUIsQ0FBQyxDQUFDO1FBQ3JELElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDakMsa0JBQWtCLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELGtCQUFrQixDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELFFBQVE7UUFDUixrQkFBa0IsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLGtCQUFrQixHQUFHO1lBQ3pCLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUM7UUFFRixPQUFPO1FBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVaLE9BQU87UUFDUCxNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN2RCxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxRQUFRO1FBQ1Isa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFaEQsT0FBTztRQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1FBQ2pELFFBQVE7UUFDUixrQkFBa0IsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFN0QsT0FBTztRQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXE5pY29sYXNcXERlc2t0b3BcXHRlc3Q2XFxnYXRld2F5XFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxhY2NvdW50XFxzZXR0aW5nc1xcc2V0dGluZ3MuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdAbmd4LXRyYW5zbGF0ZS9jb3JlJyk7XG5qZXN0Lm1vY2soJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5zZXJ2aWNlJyk7XG5cbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5pbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IEFjY291bnQgfSBmcm9tICdhcHAvY29yZS9hdXRoL2FjY291bnQubW9kZWwnO1xuXG5pbXBvcnQgeyBTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJy4vc2V0dGluZ3MuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ1NldHRpbmdzQ29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgY29tcDogU2V0dGluZ3NDb21wb25lbnQ7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFNldHRpbmdzQ29tcG9uZW50PjtcbiAgbGV0IG1vY2tBY2NvdW50U2VydmljZTogQWNjb3VudFNlcnZpY2U7XG4gIGNvbnN0IGFjY291bnQ6IEFjY291bnQgPSB7XG4gICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgIGFjdGl2YXRlZDogdHJ1ZSxcbiAgICBlbWFpbDogJ2pvaG4uZG9lQG1haWwuY29tJyxcbiAgICBsYW5nS2V5OiAnZnInLFxuICAgIGxvZ2luOiAnam9obicsXG4gICAgYXV0aG9yaXRpZXM6IFtdLFxuICAgIGltYWdlVXJsOiAnJyxcbiAgfTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtTZXR0aW5nc0NvbXBvbmVudF0sXG4gICAgICAgIHByb3ZpZGVyczogW0Zvcm1CdWlsZGVyLCBUcmFuc2xhdGVTZXJ2aWNlLCBBY2NvdW50U2VydmljZV0sXG4gICAgICB9KVxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShTZXR0aW5nc0NvbXBvbmVudCwgJycpXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pXG4gICk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFNldHRpbmdzQ29tcG9uZW50KTtcbiAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBtb2NrQWNjb3VudFNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChBY2NvdW50U2VydmljZSk7XG4gICAgbW9ja0FjY291bnRTZXJ2aWNlLmlkZW50aXR5ID0gamVzdC5mbigoKSA9PiBvZihhY2NvdW50KSk7XG4gICAgbW9ja0FjY291bnRTZXJ2aWNlLmdldEF1dGhlbnRpY2F0aW9uU3RhdGUgPSBqZXN0LmZuKCgpID0+IG9mKGFjY291bnQpKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIHRoZSBjdXJyZW50IGlkZW50aXR5IHVwb24gc2F2ZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG1vY2tBY2NvdW50U2VydmljZS5zYXZlID0gamVzdC5mbigoKSA9PiBvZih7fSkpO1xuICAgIGNvbnN0IHNldHRpbmdzRm9ybVZhbHVlcyA9IHtcbiAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgICAgZW1haWw6ICdqb2huLmRvZUBtYWlsLmNvbScsXG4gICAgICBsYW5nS2V5OiAnZnInLFxuICAgIH07XG5cbiAgICAvLyBXSEVOXG4gICAgY29tcC5uZ09uSW5pdCgpO1xuICAgIGNvbXAuc2F2ZSgpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChtb2NrQWNjb3VudFNlcnZpY2UuaWRlbnRpdHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QobW9ja0FjY291bnRTZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFjY291bnQpO1xuICAgIGV4cGVjdChtb2NrQWNjb3VudFNlcnZpY2UuYXV0aGVudGljYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhY2NvdW50KTtcbiAgICBleHBlY3QoY29tcC5zZXR0aW5nc0Zvcm0udmFsdWUpLnRvRXF1YWwoc2V0dGluZ3NGb3JtVmFsdWVzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3RpZnkgb2Ygc3VjY2VzcyB1cG9uIHN1Y2Nlc3NmdWwgc2F2ZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG1vY2tBY2NvdW50U2VydmljZS5zYXZlID0gamVzdC5mbigoKSA9PiBvZih7fSkpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbXAubmdPbkluaXQoKTtcbiAgICBjb21wLnNhdmUoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdGlmeSBvZiBlcnJvciB1cG9uIGZhaWxlZCBzYXZlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgbW9ja0FjY291bnRTZXJ2aWNlLnNhdmUgPSBqZXN0LmZuKCgpID0+IHRocm93RXJyb3IoJ0VSUk9SJykpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbXAubmdPbkluaXQoKTtcbiAgICBjb21wLnNhdmUoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==