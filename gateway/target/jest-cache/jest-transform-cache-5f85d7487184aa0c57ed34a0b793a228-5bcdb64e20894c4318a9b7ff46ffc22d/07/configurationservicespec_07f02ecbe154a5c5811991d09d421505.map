{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,mEAA+D;AAG/D,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAA6B,CAAC;IAClC,IAAI,QAA+B,CAAC;IACpC,IAAI,cAAgD,CAAC;IAErD,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QAEH,cAAc,GAAG,IAAI,CAAC;QACtB,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,4CAAoB,CAAC,CAAC;QAC/C,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,IAAI,GAAS;gBACjB,MAAM,EAAE,UAAU;gBAClB,UAAU,EAAE;oBACV,SAAS,EAAE;wBACT,IAAI,EAAE,aAAa;qBACpB;iBACF;aACF,CAAC;YACF,MAAM,WAAW,GAAgB;gBAC/B,QAAQ,EAAE;oBACR,QAAQ,EAAE;wBACR,KAAK,EAAE;4BACL,yCAAyC,EAAE,IAAI;yBAChD;qBACF;iBACF;aACF,CAAC;YACF,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC;YAEtE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACvB,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,eAAe,GAAqB;gBACxC;oBACE,IAAI,EAAE,cAAc;oBACpB,UAAU,EAAE;wBACV,mBAAmB,EAAE;4BACnB,KAAK,EAAE,MAAM;yBACd;qBACF;iBACF;aACF,CAAC;YACF,MAAM,GAAG,GAAQ,EAAE,eAAe,EAAE,CAAC;YACrC,OAAO,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC;YAEhF,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { ConfigurationService } from './configuration.service';\nimport { Bean, ConfigProps, Env, PropertySource } from './configuration.model';\n\ndescribe('Logs Service', () => {\n  let service: ConfigurationService;\n  let httpMock: HttpTestingController;\n  let expectedResult: Bean[] | PropertySource[] | null;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    expectedResult = null;\n    service = TestBed.inject(ConfigurationService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should get the config', () => {\n      const bean: Bean = {\n        prefix: 'jhipster',\n        properties: {\n          clientApp: {\n            name: 'jhipsterApp',\n          },\n        },\n      };\n      const configProps: ConfigProps = {\n        contexts: {\n          jhipster: {\n            beans: {\n              'tech.jhipster.config.JHipsterProperties': bean,\n            },\n          },\n        },\n      };\n      service.getBeans().subscribe(received => (expectedResult = received));\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(configProps);\n      expect(expectedResult).toEqual([bean]);\n    });\n\n    it('should get the env', () => {\n      const propertySources: PropertySource[] = [\n        {\n          name: 'server.ports',\n          properties: {\n            'local.server.port': {\n              value: '8080',\n            },\n          },\n        },\n      ];\n      const env: Env = { propertySources };\n      service.getPropertySources().subscribe(received => (expectedResult = received));\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(env);\n      expect(expectedResult).toEqual(propertySources);\n    });\n  });\n});\n"],"version":3}