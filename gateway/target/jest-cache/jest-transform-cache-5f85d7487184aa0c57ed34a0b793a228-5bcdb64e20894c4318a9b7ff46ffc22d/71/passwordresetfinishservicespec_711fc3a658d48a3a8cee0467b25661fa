bdb14943b4432984d93caff2307dc4de
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const password_reset_finish_service_1 = require("./password-reset-finish.service");
const application_config_service_1 = require("app/core/config/application-config.service");
describe('PasswordResetFinish Service', () => {
    let service;
    let httpMock;
    let applicationConfigService;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
        });
        service = testing_1.TestBed.inject(password_reset_finish_service_1.PasswordResetFinishService);
        applicationConfigService = testing_1.TestBed.inject(application_config_service_1.ApplicationConfigService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify();
    });
    describe('Service methods', () => {
        it('should call reset-password/finish endpoint with correct values', () => {
            // GIVEN
            const key = 'abc';
            const newPassword = 'password';
            // WHEN
            service.save(key, newPassword).subscribe();
            const testRequest = httpMock.expectOne({
                method: 'POST',
                url: applicationConfigService.getEndpointFor('api/account/reset-password/finish'),
            });
            // THEN
            expect(testRequest.request.body).toEqual({ key, newPassword });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmQtcmVzZXRcXGZpbmlzaFxccGFzc3dvcmQtcmVzZXQtZmluaXNoLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRDtBQUNoRCwwREFBOEY7QUFFOUYsbUZBQTZFO0FBQzdFLDJGQUFzRjtBQUV0RixRQUFRLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQzNDLElBQUksT0FBbUMsQ0FBQztJQUN4QyxJQUFJLFFBQStCLENBQUM7SUFDcEMsSUFBSSx3QkFBa0QsQ0FBQztJQUV2RCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQztTQUNuQyxDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsMERBQTBCLENBQUMsQ0FBQztRQUNyRCx3QkFBd0IsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxxREFBd0IsQ0FBQyxDQUFDO1FBQ3BFLFFBQVEsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsRUFBRSxDQUFDLGdFQUFnRSxFQUFFLEdBQUcsRUFBRTtZQUN4RSxRQUFRO1lBQ1IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQztZQUUvQixPQUFPO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFM0MsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztnQkFDckMsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsR0FBRyxFQUFFLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxtQ0FBbUMsQ0FBQzthQUNsRixDQUFDLENBQUM7WUFFSCxPQUFPO1lBQ1AsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmljb2xhc1xcRGVza3RvcFxcdGVzdDZcXGdhdGV3YXlcXHNyY1xcbWFpblxcd2ViYXBwXFxhcHBcXGFjY291bnRcXHBhc3N3b3JkLXJlc2V0XFxmaW5pc2hcXHBhc3N3b3JkLXJlc2V0LWZpbmlzaC5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5cbmltcG9ydCB7IFBhc3N3b3JkUmVzZXRGaW5pc2hTZXJ2aWNlIH0gZnJvbSAnLi9wYXNzd29yZC1yZXNldC1maW5pc2guc2VydmljZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2UgfSBmcm9tICdhcHAvY29yZS9jb25maWcvYXBwbGljYXRpb24tY29uZmlnLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnUGFzc3dvcmRSZXNldEZpbmlzaCBTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgc2VydmljZTogUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2U7XG4gIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xuICBsZXQgYXBwbGljYXRpb25Db25maWdTZXJ2aWNlOiBBcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2U7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgfSk7XG5cbiAgICBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2UpO1xuICAgIGFwcGxpY2F0aW9uQ29uZmlnU2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEFwcGxpY2F0aW9uQ29uZmlnU2VydmljZSk7XG4gICAgaHR0cE1vY2sgPSBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGh0dHBNb2NrLnZlcmlmeSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnU2VydmljZSBtZXRob2RzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsbCByZXNldC1wYXNzd29yZC9maW5pc2ggZW5kcG9pbnQgd2l0aCBjb3JyZWN0IHZhbHVlcycsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBrZXkgPSAnYWJjJztcbiAgICAgIGNvbnN0IG5ld1Bhc3N3b3JkID0gJ3Bhc3N3b3JkJztcblxuICAgICAgLy8gV0hFTlxuICAgICAgc2VydmljZS5zYXZlKGtleSwgbmV3UGFzc3dvcmQpLnN1YnNjcmliZSgpO1xuXG4gICAgICBjb25zdCB0ZXN0UmVxdWVzdCA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB1cmw6IGFwcGxpY2F0aW9uQ29uZmlnU2VydmljZS5nZXRFbmRwb2ludEZvcignYXBpL2FjY291bnQvcmVzZXQtcGFzc3dvcmQvZmluaXNoJyksXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHRlc3RSZXF1ZXN0LnJlcXVlc3QuYm9keSkudG9FcXVhbCh7IGtleSwgbmV3UGFzc3dvcmQgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=