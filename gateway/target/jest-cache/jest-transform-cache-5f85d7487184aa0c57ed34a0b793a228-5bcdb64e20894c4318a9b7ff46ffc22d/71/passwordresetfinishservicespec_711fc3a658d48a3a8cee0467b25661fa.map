{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,mFAA6E;AAC7E,2FAAsF;AAEtF,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,OAAmC,CAAC;IACxC,IAAI,QAA+B,CAAC;IACpC,IAAI,wBAAkD,CAAC;IAEvD,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QAEH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,0DAA0B,CAAC,CAAC;QACrD,wBAAwB,GAAG,iBAAO,CAAC,MAAM,CAAC,qDAAwB,CAAC,CAAC;QACpE,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,QAAQ;YACR,MAAM,GAAG,GAAG,KAAK,CAAC;YAClB,MAAM,WAAW,GAAG,UAAU,CAAC;YAE/B,OAAO;YACP,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAE3C,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC;gBACrC,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,wBAAwB,CAAC,cAAc,CAAC,mCAAmC,CAAC;aAClF,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\account\\password-reset\\finish\\password-reset-finish.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('PasswordResetFinish Service', () => {\n  let service: PasswordResetFinishService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(PasswordResetFinishService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call reset-password/finish endpoint with correct values', () => {\n      // GIVEN\n      const key = 'abc';\n      const newPassword = 'password';\n\n      // WHEN\n      service.save(key, newPassword).subscribe();\n\n      const testRequest = httpMock.expectOne({\n        method: 'POST',\n        url: applicationConfigService.getEndpointFor('api/account/reset-password/finish'),\n      });\n\n      // THEN\n      expect(testRequest.request.body).toEqual({ key, newPassword });\n    });\n  });\n});\n"],"version":3}