{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\entities\\user\\user.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\entities\\user\\user.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { User, IUser } from './user.model';\n\nimport { UserService } from './user.service';\n\ndescribe('User Service', () => {\n  let service: UserService;\n  let httpMock: HttpTestingController;\n  let expectedResult: IUser | IUser[] | boolean | number | null;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n    expectedResult = null;\n    service = TestBed.inject(UserService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should return Users', () => {\n      service.query().subscribe(received => {\n        expectedResult = received.body;\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush([new User(123, 'user')]);\n      expect(expectedResult).toEqual([{ id: 123, login: 'user' }]);\n    });\n\n    it('should propagate not found response', () => {\n      service.query().subscribe({\n        error: (error: HttpErrorResponse) => (expectedResult = error.status),\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush('Internal Server Error', {\n        status: 500,\n        statusText: 'Inernal Server Error',\n      });\n      expect(expectedResult).toEqual(500);\n    });\n\n    describe('addUserToCollectionIfMissing', () => {\n      it('should add a User to an empty array', () => {\n        const user: IUser = { id: 123 };\n        expectedResult = service.addUserToCollectionIfMissing([], user);\n        expect(expectedResult).toHaveLength(1);\n        expect(expectedResult).toContain(user);\n      });\n\n      it('should not add a User to an array that contains it', () => {\n        const user: IUser = { id: 123 };\n        const userCollection: IUser[] = [\n          {\n            ...user,\n          },\n          { id: 456 },\n        ];\n        expectedResult = service.addUserToCollectionIfMissing(userCollection, user);\n        expect(expectedResult).toHaveLength(2);\n      });\n\n      it(\"should add a User to an array that doesn't contain it\", () => {\n        const user: IUser = { id: 123 };\n        const userCollection: IUser[] = [{ id: 456 }];\n        expectedResult = service.addUserToCollectionIfMissing(userCollection, user);\n        expect(expectedResult).toHaveLength(2);\n        expect(expectedResult).toContain(user);\n      });\n\n      it('should add only unique User to an array', () => {\n        const userArray: IUser[] = [{ id: 123 }, { id: 456 }, { id: 27699 }];\n        const userCollection: IUser[] = [{ id: 456 }];\n        expectedResult = service.addUserToCollectionIfMissing(userCollection, ...userArray);\n        expect(expectedResult).toHaveLength(3);\n      });\n\n      it('should accept varargs', () => {\n        const user: IUser = { id: 123 };\n        const user2: IUser = { id: 456 };\n        expectedResult = service.addUserToCollectionIfMissing([], user, user2);\n        expect(expectedResult).toHaveLength(2);\n        expect(expectedResult).toContain(user);\n        expect(expectedResult).toContain(user2);\n      });\n\n      it('should accept null and undefined values', () => {\n        const user: IUser = { id: 123 };\n        expectedResult = service.addUserToCollectionIfMissing([], null, user, undefined);\n        expect(expectedResult).toHaveLength(1);\n        expect(expectedResult).toContain(user);\n      });\n\n      it('should return initial array if no users is added', () => {\n        const userCollection: IUser[] = [{ id: 456 }];\n        expectedResult = service.addUserToCollectionIfMissing(userCollection, null, undefined);\n        expect(expectedResult).toEqual(userCollection);\n      });\n    });\n  });\n});\n"],"version":3}