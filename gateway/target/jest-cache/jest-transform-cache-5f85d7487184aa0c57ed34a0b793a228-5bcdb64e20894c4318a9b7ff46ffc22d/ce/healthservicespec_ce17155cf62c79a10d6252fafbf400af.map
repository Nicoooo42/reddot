{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,qDAAiD;AACjD,2FAAsF;AAEtF,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,OAAsB,CAAC;IAC3B,IAAI,QAA+B,CAAC;IACpC,IAAI,wBAAkD,CAAC;IAEvD,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QAEH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,8BAAa,CAAC,CAAC;QACxC,wBAAwB,GAAG,iBAAO,CAAC,MAAM,CAAC,qDAAwB,CAAC,CAAC;QACpE,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,QAAQ;YACR,IAAI,cAAc,CAAC;YACnB,MAAM,WAAW,GAAG;gBAClB,UAAU,EAAE,EAAE;aACf,CAAC;YAEF,OAAO;YACP,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;gBACzC,cAAc,GAAG,QAAQ,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC;gBACrC,MAAM,EAAE,KAAK;gBACb,GAAG,EAAE,wBAAwB,CAAC,cAAc,CAAC,mBAAmB,CAAC;aAClE,CAAC,CAAC;YACH,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAE/B,OAAO;YACP,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { HealthService } from './health.service';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\ndescribe('HealthService Service', () => {\n  let service: HealthService;\n  let httpMock: HttpTestingController;\n  let applicationConfigService: ApplicationConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(HealthService);\n    applicationConfigService = TestBed.inject(ApplicationConfigService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should call management/health endpoint with correct values', () => {\n      // GIVEN\n      let expectedResult;\n      const checkHealth = {\n        components: [],\n      };\n\n      // WHEN\n      service.checkHealth().subscribe(received => {\n        expectedResult = received;\n      });\n      const testRequest = httpMock.expectOne({\n        method: 'GET',\n        url: applicationConfigService.getEndpointFor('management/health'),\n      });\n      testRequest.flush(checkHealth);\n\n      // THEN\n      expect(expectedResult).toEqual(checkHealth);\n    });\n  });\n});\n"],"version":3}