9d21a62d47ea1171df4c23180bfcb91b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const core_1 = require("@ngx-translate/core");
const translate_directive_1 = require("app/shared/language/translate.directive");
const item_count_component_1 = require("./item-count.component");
describe('ItemCountComponent test', () => {
    let comp;
    let fixture;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [core_1.TranslateModule.forRoot()],
            declarations: [item_count_component_1.ItemCountComponent, translate_directive_1.TranslateDirective],
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(item_count_component_1.ItemCountComponent);
        comp = fixture.componentInstance;
    });
    describe('UI logic tests', () => {
        it('should initialize with undefined', () => {
            expect(comp.first).toBeUndefined();
            expect(comp.second).toBeUndefined();
            expect(comp.total).toBeUndefined();
        });
        it('should set calculated numbers to undefined if the page value is not yet defined', () => {
            // GIVEN
            comp.params = { page: undefined, totalItems: 0, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBeUndefined();
            expect(comp.second).toBeUndefined();
        });
        it('should change the content on page change', () => {
            // GIVEN
            comp.params = { page: 1, totalItems: 100, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(1);
            expect(comp.second).toBe(10);
            expect(comp.total).toBe(100);
            // GIVEN
            comp.params = { page: 2, totalItems: 100, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(11);
            expect(comp.second).toBe(20);
            expect(comp.total).toBe(100);
        });
        it('should set the second number to totalItems if this is the last page which contains less than itemsPerPage items', () => {
            // GIVEN
            comp.params = { page: 2, totalItems: 16, itemsPerPage: 10 };
            // THEN
            expect(comp.first).toBe(11);
            expect(comp.second).toBe(16);
            expect(comp.total).toBe(16);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcc2hhcmVkXFxwYWdpbmF0aW9uXFxpdGVtLWNvdW50LmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBQ2hGLDhDQUFzRDtBQUV0RCxpRkFBNkU7QUFFN0UsaUVBQTREO0FBRTVELFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDdkMsSUFBSSxJQUF3QixDQUFDO0lBQzdCLElBQUksT0FBNkMsQ0FBQztJQUVsRCxVQUFVLENBQ1Isc0JBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxzQkFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BDLFlBQVksRUFBRSxDQUFDLHlDQUFrQixFQUFFLHdDQUFrQixDQUFDO1NBQ3ZELENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLHlDQUFrQixDQUFDLENBQUM7UUFDdEQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtZQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpRkFBaUYsRUFBRSxHQUFHLEVBQUU7WUFDekYsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRW5FLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELFFBQVE7WUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUU3RCxPQUFPO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFN0IsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRTdELE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpSEFBaUgsRUFBRSxHQUFHLEVBQUU7WUFDekgsUUFBUTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBRTVELE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcc2hhcmVkXFxwYWdpbmF0aW9uXFxpdGVtLWNvdW50LmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdhaXRGb3JBc3luYywgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuaW1wb3J0IHsgVHJhbnNsYXRlRGlyZWN0aXZlIH0gZnJvbSAnYXBwL3NoYXJlZC9sYW5ndWFnZS90cmFuc2xhdGUuZGlyZWN0aXZlJztcblxuaW1wb3J0IHsgSXRlbUNvdW50Q29tcG9uZW50IH0gZnJvbSAnLi9pdGVtLWNvdW50LmNvbXBvbmVudCc7XG5cbmRlc2NyaWJlKCdJdGVtQ291bnRDb21wb25lbnQgdGVzdCcsICgpID0+IHtcbiAgbGV0IGNvbXA6IEl0ZW1Db3VudENvbXBvbmVudDtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8SXRlbUNvdW50Q29tcG9uZW50PjtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbVHJhbnNsYXRlTW9kdWxlLmZvclJvb3QoKV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0l0ZW1Db3VudENvbXBvbmVudCwgVHJhbnNsYXRlRGlyZWN0aXZlXSxcbiAgICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgfSlcbiAgKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoSXRlbUNvdW50Q29tcG9uZW50KTtcbiAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1VJIGxvZ2ljIHRlc3RzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIHVuZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChjb21wLmZpcnN0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY29tcC5zZWNvbmQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChjb21wLnRvdGFsKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNldCBjYWxjdWxhdGVkIG51bWJlcnMgdG8gdW5kZWZpbmVkIGlmIHRoZSBwYWdlIHZhbHVlIGlzIG5vdCB5ZXQgZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb21wLnBhcmFtcyA9IHsgcGFnZTogdW5kZWZpbmVkLCB0b3RhbEl0ZW1zOiAwLCBpdGVtc1BlclBhZ2U6IDEwIH07XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmZpcnN0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY29tcC5zZWNvbmQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2hhbmdlIHRoZSBjb250ZW50IG9uIHBhZ2UgY2hhbmdlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbXAucGFyYW1zID0geyBwYWdlOiAxLCB0b3RhbEl0ZW1zOiAxMDAsIGl0ZW1zUGVyUGFnZTogMTAgfTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuZmlyc3QpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoY29tcC5zZWNvbmQpLnRvQmUoMTApO1xuICAgICAgZXhwZWN0KGNvbXAudG90YWwpLnRvQmUoMTAwKTtcblxuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbXAucGFyYW1zID0geyBwYWdlOiAyLCB0b3RhbEl0ZW1zOiAxMDAsIGl0ZW1zUGVyUGFnZTogMTAgfTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuZmlyc3QpLnRvQmUoMTEpO1xuICAgICAgZXhwZWN0KGNvbXAuc2Vjb25kKS50b0JlKDIwKTtcbiAgICAgIGV4cGVjdChjb21wLnRvdGFsKS50b0JlKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNldCB0aGUgc2Vjb25kIG51bWJlciB0byB0b3RhbEl0ZW1zIGlmIHRoaXMgaXMgdGhlIGxhc3QgcGFnZSB3aGljaCBjb250YWlucyBsZXNzIHRoYW4gaXRlbXNQZXJQYWdlIGl0ZW1zJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbXAucGFyYW1zID0geyBwYWdlOiAyLCB0b3RhbEl0ZW1zOiAxNiwgaXRlbXNQZXJQYWdlOiAxMCB9O1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5maXJzdCkudG9CZSgxMSk7XG4gICAgICBleHBlY3QoY29tcC5zZWNvbmQpLnRvQmUoMTYpO1xuICAgICAgZXhwZWN0KGNvbXAudG90YWwpLnRvQmUoMTYpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9