987d00766b4bbb9c1e44c6a53cde3461
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const password_strength_bar_component_1 = require("./password-strength-bar.component");
describe('PasswordStrengthBarComponent', () => {
    let comp;
    let fixture;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [password_strength_bar_component_1.PasswordStrengthBarComponent],
        })
            .overrideTemplate(password_strength_bar_component_1.PasswordStrengthBarComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(password_strength_bar_component_1.PasswordStrengthBarComponent);
        comp = fixture.componentInstance;
    });
    describe('PasswordStrengthBarComponents', () => {
        it('should initialize with default values', () => {
            expect(comp.measureStrength('')).toBe(0);
            expect(comp.colors).toEqual(['#F00', '#F90', '#FF0', '#9F0', '#0F0']);
            expect(comp.getColor(0).idx).toBe(1);
            expect(comp.getColor(0).color).toBe(comp.colors[0]);
        });
        it('should increase strength upon password value change', () => {
            expect(comp.measureStrength('')).toBe(0);
            expect(comp.measureStrength('aa')).toBeGreaterThanOrEqual(comp.measureStrength(''));
            expect(comp.measureStrength('aa^6')).toBeGreaterThanOrEqual(comp.measureStrength('aa'));
            expect(comp.measureStrength('Aa090(**)')).toBeGreaterThanOrEqual(comp.measureStrength('aa^6'));
            expect(comp.measureStrength('Aa090(**)+-07365')).toBeGreaterThanOrEqual(comp.measureStrength('Aa090(**)'));
        });
        it('should change the color based on strength', () => {
            expect(comp.getColor(0).color).toBe(comp.colors[0]);
            expect(comp.getColor(11).color).toBe(comp.colors[1]);
            expect(comp.getColor(22).color).toBe(comp.colors[2]);
            expect(comp.getColor(33).color).toBe(comp.colors[3]);
            expect(comp.getColor(44).color).toBe(comp.colors[4]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmRcXHBhc3N3b3JkLXN0cmVuZ3RoLWJhclxccGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBRWhGLHVGQUFpRjtBQUVqRixRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQzVDLElBQUksSUFBa0MsQ0FBQztJQUN2QyxJQUFJLE9BQXVELENBQUM7SUFFNUQsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsWUFBWSxFQUFFLENBQUMsOERBQTRCLENBQUM7U0FDN0MsQ0FBQzthQUNDLGdCQUFnQixDQUFDLDhEQUE0QixFQUFFLEVBQUUsQ0FBQzthQUNsRCxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLDhEQUE0QixDQUFDLENBQUM7UUFDaEUsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDN0MsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3RFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtZQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMvRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzdHLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtZQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmljb2xhc1xcRGVza3RvcFxcdGVzdDZcXGdhdGV3YXlcXHNyY1xcbWFpblxcd2ViYXBwXFxhcHBcXGFjY291bnRcXHBhc3N3b3JkXFxwYXNzd29yZC1zdHJlbmd0aC1iYXJcXHBhc3N3b3JkLXN0cmVuZ3RoLWJhci5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1zdHJlbmd0aC1iYXIuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wOiBQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50O1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50PjtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBkZWNsYXJhdGlvbnM6IFtQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50XSxcbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KVxuICApO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50KTtcbiAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnRzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChjb21wLmNvbG9ycykudG9FcXVhbChbJyNGMDAnLCAnI0Y5MCcsICcjRkYwJywgJyM5RjAnLCAnIzBGMCddKTtcbiAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmlkeCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzBdKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jcmVhc2Ugc3RyZW5ndGggdXBvbiBwYXNzd29yZCB2YWx1ZSBjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKS50b0JlKDApO1xuICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYScpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSk7XG4gICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhXjYnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWEnKSk7XG4gICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKScpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYV42JykpO1xuICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdBYTA5MCgqKikrLTA3MzY1JykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKScpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2hhbmdlIHRoZSBjb2xvciBiYXNlZCBvbiBzdHJlbmd0aCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzBdKTtcbiAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDExKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1sxXSk7XG4gICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigyMikuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMl0pO1xuICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMzMpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzNdKTtcbiAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDQ0KS5jb2xvcikudG9CZShjb21wLmNvbG9yc1s0XSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=