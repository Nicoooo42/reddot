{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\logs\\logs.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\logs\\logs.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\n\nimport { LogsComponent } from './logs.component';\nimport { LogsService } from './logs.service';\nimport { Log, LoggersResponse } from './log.model';\n\ndescribe('LogsComponent', () => {\n  let comp: LogsComponent;\n  let fixture: ComponentFixture<LogsComponent>;\n  let service: LogsService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [LogsComponent],\n        providers: [LogsService],\n      })\n        .overrideTemplate(LogsComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LogsComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(LogsService);\n  });\n\n  describe('OnInit', () => {\n    it('should set all default values correctly', () => {\n      expect(comp.filter).toBe('');\n      expect(comp.orderProp).toBe('name');\n      expect(comp.ascending).toBe(true);\n    });\n\n    it('Should call load all on init', () => {\n      // GIVEN\n      const log = new Log('main', 'WARN');\n      jest.spyOn(service, 'findAll').mockReturnValue(\n        of({\n          loggers: {\n            main: {\n              effectiveLevel: 'WARN',\n            },\n          },\n        } as unknown as LoggersResponse)\n      );\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.findAll).toHaveBeenCalled();\n      expect(comp.loggers?.[0]).toEqual(expect.objectContaining(log));\n    });\n  });\n\n  describe('change log level', () => {\n    it('should change log level correctly', () => {\n      // GIVEN\n      const log = new Log('main', 'ERROR');\n      jest.spyOn(service, 'changeLevel').mockReturnValue(of({}));\n      jest.spyOn(service, 'findAll').mockReturnValue(\n        of({\n          loggers: {\n            main: {\n              effectiveLevel: 'ERROR',\n            },\n          },\n        } as unknown as LoggersResponse)\n      );\n\n      // WHEN\n      comp.changeLevel('main', 'ERROR');\n\n      // THEN\n      expect(service.changeLevel).toHaveBeenCalled();\n      expect(service.findAll).toHaveBeenCalled();\n      expect(comp.loggers?.[0]).toEqual(expect.objectContaining(log));\n    });\n  });\n});\n"],"version":3}