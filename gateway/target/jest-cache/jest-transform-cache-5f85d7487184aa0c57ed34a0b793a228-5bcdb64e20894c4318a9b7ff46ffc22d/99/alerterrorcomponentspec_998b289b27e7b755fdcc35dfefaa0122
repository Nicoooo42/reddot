bb23e038a55d2b026e94b47a9e66d88a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const core_1 = require("@ngx-translate/core");
const event_manager_service_1 = require("app/core/util/event-manager.service");
const alert_service_1 = require("app/core/util/alert.service");
const alert_error_component_1 = require("./alert-error.component");
describe('Alert Error Component', () => {
    let comp;
    let fixture;
    let eventManager;
    let alertService;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [core_1.TranslateModule.forRoot()],
            declarations: [alert_error_component_1.AlertErrorComponent],
            providers: [event_manager_service_1.EventManager, alert_service_1.AlertService],
        })
            .overrideTemplate(alert_error_component_1.AlertErrorComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(alert_error_component_1.AlertErrorComponent);
        comp = fixture.componentInstance;
        eventManager = testing_1.TestBed.inject(event_manager_service_1.EventManager);
        alertService = testing_1.TestBed.inject(alert_service_1.AlertService);
        alertService.addAlert = (alert, alerts) => {
            if (alerts) {
                alerts.push(alert);
            }
            return alert;
        };
    });
    describe('Error Handling', () => {
        it('Should display an alert on status 0', () => {
            // GIVEN
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 0 } });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('error.server.not.reachable');
        });
        it('Should display an alert on status 404', () => {
            // GIVEN
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 404 } });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('error.url.not.found');
        });
        it('Should display an alert on generic error', () => {
            // GIVEN
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: { message: 'Error Message' } } });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: 'Second Error Message' } });
            // THEN
            expect(comp.alerts.length).toBe(2);
            expect(comp.alerts[0].translationKey).toBe('Error Message');
            expect(comp.alerts[1].translationKey).toBe('Second Error Message');
        });
        it('Should display an alert on status 400 for generic error', () => {
            // GIVEN
            const response = new http_1.HttpErrorResponse({
                url: 'http://localhost:8080/api/foos',
                headers: new http_1.HttpHeaders(),
                status: 400,
                statusText: 'Bad Request',
                error: {
                    type: 'https://www.jhipster.tech/problem/constraint-violation',
                    title: 'Bad Request',
                    status: 400,
                    path: '/api/foos',
                    message: 'error.validation',
                },
            });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('error.validation');
        });
        it('Should display an alert on status 400 for generic error without message', () => {
            // GIVEN
            const response = new http_1.HttpErrorResponse({
                url: 'http://localhost:8080/api/foos',
                headers: new http_1.HttpHeaders(),
                status: 400,
                error: 'Bad Request',
            });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('Bad Request');
        });
        it('Should display an alert on status 400 for invalid parameters', () => {
            // GIVEN
            const response = new http_1.HttpErrorResponse({
                url: 'http://localhost:8080/api/foos',
                headers: new http_1.HttpHeaders(),
                status: 400,
                statusText: 'Bad Request',
                error: {
                    type: 'https://www.jhipster.tech/problem/constraint-violation',
                    title: 'Method argument not valid',
                    status: 400,
                    path: '/api/foos',
                    message: 'error.validation',
                    fieldErrors: [{ objectName: 'foo', field: 'minField', message: 'Min' }],
                },
            });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('error.Size');
        });
        it('Should display an alert on status 400 for error headers', () => {
            // GIVEN
            const response = new http_1.HttpErrorResponse({
                url: 'http://localhost:8080/api/foos',
                headers: new http_1.HttpHeaders().append('app-error', 'Error Message').append('app-params', 'foo'),
                status: 400,
                statusText: 'Bad Request',
                error: {
                    status: 400,
                    message: 'error.validation',
                },
            });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('Error Message');
        });
        it('Should display an alert on status 500 with detail', () => {
            // GIVEN
            const response = new http_1.HttpErrorResponse({
                url: 'http://localhost:8080/api/foos',
                headers: new http_1.HttpHeaders(),
                status: 500,
                statusText: 'Internal server error',
                error: {
                    status: 500,
                    message: 'error.http.500',
                    detail: 'Detailed error message',
                },
            });
            eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });
            // THEN
            expect(comp.alerts.length).toBe(1);
            expect(comp.alerts[0].translationKey).toBe('error.http.500');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,