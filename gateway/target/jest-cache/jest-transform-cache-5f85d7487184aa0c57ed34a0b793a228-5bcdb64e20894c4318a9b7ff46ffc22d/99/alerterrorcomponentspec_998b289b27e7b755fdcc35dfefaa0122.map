{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { EventManager } from 'app/core/util/event-manager.service';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\n\nimport { AlertErrorComponent } from './alert-error.component';\n\ndescribe('Alert Error Component', () => {\n  let comp: AlertErrorComponent;\n  let fixture: ComponentFixture<AlertErrorComponent>;\n  let eventManager: EventManager;\n  let alertService: AlertService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [TranslateModule.forRoot()],\n        declarations: [AlertErrorComponent],\n        providers: [EventManager, AlertService],\n      })\n        .overrideTemplate(AlertErrorComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AlertErrorComponent);\n    comp = fixture.componentInstance;\n    eventManager = TestBed.inject(EventManager);\n    alertService = TestBed.inject(AlertService);\n    alertService.addAlert = (alert: Alert, alerts?: Alert[]) => {\n      if (alerts) {\n        alerts.push(alert);\n      }\n      return alert;\n    };\n  });\n\n  describe('Error Handling', () => {\n    it('Should display an alert on status 0', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 0 } });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.server.not.reachable');\n    });\n\n    it('Should display an alert on status 404', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { status: 404 } });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.url.not.found');\n    });\n\n    it('Should display an alert on generic error', () => {\n      // GIVEN\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: { message: 'Error Message' } } });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: { error: 'Second Error Message' } });\n      // THEN\n      expect(comp.alerts.length).toBe(2);\n      expect(comp.alerts[0].translationKey).toBe('Error Message');\n      expect(comp.alerts[1].translationKey).toBe('Second Error Message');\n    });\n\n    it('Should display an alert on status 400 for generic error', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          type: 'https://www.jhipster.tech/problem/constraint-violation',\n          title: 'Bad Request',\n          status: 400,\n          path: '/api/foos',\n          message: 'error.validation',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.validation');\n    });\n\n    it('Should display an alert on status 400 for generic error without message', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        error: 'Bad Request',\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('Bad Request');\n    });\n\n    it('Should display an alert on status 400 for invalid parameters', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          type: 'https://www.jhipster.tech/problem/constraint-violation',\n          title: 'Method argument not valid',\n          status: 400,\n          path: '/api/foos',\n          message: 'error.validation',\n          fieldErrors: [{ objectName: 'foo', field: 'minField', message: 'Min' }],\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.Size');\n    });\n\n    it('Should display an alert on status 400 for error headers', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders().append('app-error', 'Error Message').append('app-params', 'foo'),\n        status: 400,\n        statusText: 'Bad Request',\n        error: {\n          status: 400,\n          message: 'error.validation',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('Error Message');\n    });\n\n    it('Should display an alert on status 500 with detail', () => {\n      // GIVEN\n      const response = new HttpErrorResponse({\n        url: 'http://localhost:8080/api/foos',\n        headers: new HttpHeaders(),\n        status: 500,\n        statusText: 'Internal server error',\n        error: {\n          status: 500,\n          message: 'error.http.500',\n          detail: 'Detailed error message',\n        },\n      });\n      eventManager.broadcast({ name: 'gatewayApp.httpError', content: response });\n      // THEN\n      expect(comp.alerts.length).toBe(1);\n      expect(comp.alerts[0].translationKey).toBe('error.http.500');\n    });\n  });\n});\n"],"version":3}