5a3684ce36244cf47cc2236aab6b2688
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const auth_jwt_service_1 = require("app/core/auth/auth-jwt.service");
const ngx_webstorage_1 = require("ngx-webstorage");
describe('Auth JWT', () => {
    let service;
    let localStorageService;
    let sessionStorageService;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule, ngx_webstorage_1.NgxWebstorageModule.forRoot()],
        });
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
        service = testing_1.TestBed.inject(auth_jwt_service_1.AuthServerProvider);
        localStorageService = testing_1.TestBed.inject(ngx_webstorage_1.LocalStorageService);
        sessionStorageService = testing_1.TestBed.inject(ngx_webstorage_1.SessionStorageService);
    });
    describe('Get Token', () => {
        it('should return empty token if not found in local storage nor session storage', () => {
            const result = service.getToken();
            expect(result).toEqual('');
        });
        it('should return token from session storage if local storage is empty', () => {
            sessionStorageService.retrieve = jest.fn().mockReturnValue('sessionStorageToken');
            const result = service.getToken();
            expect(result).toEqual('sessionStorageToken');
        });
        it('should return token from localstorage storage', () => {
            localStorageService.retrieve = jest.fn().mockReturnValue('localStorageToken');
            const result = service.getToken();
            expect(result).toEqual('localStorageToken');
        });
    });
    describe('Login', () => {
        it('should clear session storage and save in local storage when rememberMe is true', () => {
            // GIVEN
            localStorageService.store = jest.fn();
            sessionStorageService.clear = jest.fn();
            // WHEN
            service.login({ username: 'John', password: '123', rememberMe: true }).subscribe();
            httpMock.expectOne('api/authenticate').flush({ id_token: '1' });
            // THEN
            httpMock.verify();
            expect(localStorageService.store).toHaveBeenCalledWith('authenticationToken', '1');
            expect(sessionStorageService.clear).toHaveBeenCalled();
        });
        it('should clear local storage and save in session storage when rememberMe is false', () => {
            // GIVEN
            sessionStorageService.store = jest.fn();
            localStorageService.clear = jest.fn();
            // WHEN
            service.login({ username: 'John', password: '123', rememberMe: false }).subscribe();
            httpMock.expectOne('api/authenticate').flush({ id_token: '1' });
            // THEN
            httpMock.verify();
            expect(sessionStorageService.store).toHaveBeenCalledWith('authenticationToken', '1');
            expect(localStorageService.clear).toHaveBeenCalled();
        });
    });
    describe('Logout', () => {
        it('should clear storage', () => {
            // GIVEN
            sessionStorageService.clear = jest.fn();
            localStorageService.clear = jest.fn();
            // WHEN
            service.logout().subscribe();
            // THEN
            expect(localStorageService.clear).toHaveBeenCalled();
            expect(sessionStorageService.clear).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,