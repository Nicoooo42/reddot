8956740e4db81dc5ed9a73947a4ef956
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const password_reset_init_component_1 = require("./password-reset-init.component");
const password_reset_init_service_1 = require("./password-reset-init.service");
describe('PasswordResetInitComponent', () => {
    let fixture;
    let comp;
    beforeEach(() => {
        fixture = testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [password_reset_init_component_1.PasswordResetInitComponent],
            providers: [forms_1.FormBuilder],
        })
            .overrideTemplate(password_reset_init_component_1.PasswordResetInitComponent, '')
            .createComponent(password_reset_init_component_1.PasswordResetInitComponent);
        comp = fixture.componentInstance;
    });
    it('sets focus after the view has been initialized', () => {
        const node = {
            focus: jest.fn(),
        };
        comp.email = new core_1.ElementRef(node);
        comp.ngAfterViewInit();
        expect(node.focus).toHaveBeenCalled();
    });
    it('notifies of success upon successful requestReset', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
        jest.spyOn(service, 'save').mockReturnValue(rxjs_1.of({}));
        comp.resetRequestForm.patchValue({
            email: 'user@domain.com',
        });
        comp.requestReset();
        expect(service.save).toHaveBeenCalledWith('user@domain.com');
        expect(comp.success).toBe(true);
    }));
    it('no notification of success upon error response', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
        jest.spyOn(service, 'save').mockReturnValue(rxjs_1.throwError({
            status: 503,
            data: 'something else',
        }));
        comp.resetRequestForm.patchValue({
            email: 'user@domain.com',
        });
        comp.requestReset();
        expect(service.save).toHaveBeenCalledWith('user@domain.com');
        expect(comp.success).toBe(false);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmQtcmVzZXRcXGluaXRcXHBhc3N3b3JkLXJlc2V0LWluaXQuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0MsbURBQTBFO0FBQzFFLDBEQUF1RTtBQUN2RSwwQ0FBNkM7QUFDN0MsK0JBQXNDO0FBRXRDLG1GQUE2RTtBQUM3RSwrRUFBeUU7QUFFekUsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxJQUFJLE9BQXFELENBQUM7SUFDMUQsSUFBSSxJQUFnQyxDQUFDO0lBRXJDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQztZQUNsQyxZQUFZLEVBQUUsQ0FBQywwREFBMEIsQ0FBQztZQUMxQyxTQUFTLEVBQUUsQ0FBQyxtQkFBVyxDQUFDO1NBQ3pCLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQywwREFBMEIsRUFBRSxFQUFFLENBQUM7YUFDaEQsZUFBZSxDQUFDLDBEQUEwQixDQUFDLENBQUM7UUFDL0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7UUFDeEQsTUFBTSxJQUFJLEdBQUc7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNqQixDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGlCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxnQkFBTSxDQUFDLENBQUMsc0RBQXdCLENBQUMsRUFBRSxDQUFDLE9BQWlDLEVBQUUsRUFBRTtRQUM5SCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztZQUMvQixLQUFLLEVBQUUsaUJBQWlCO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVKLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxnQkFBTSxDQUFDLENBQUMsc0RBQXdCLENBQUMsRUFBRSxDQUFDLE9BQWlDLEVBQUUsRUFBRTtRQUM1SCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQ3pDLGlCQUFVLENBQUM7WUFDVCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxnQkFBZ0I7U0FDdkIsQ0FBQyxDQUNILENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1lBQy9CLEtBQUssRUFBRSxpQkFBaUI7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWNjb3VudFxccGFzc3dvcmQtcmVzZXRcXGluaXRcXHBhc3N3b3JkLXJlc2V0LWluaXQuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1yZXNldC1pbml0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQYXNzd29yZFJlc2V0SW5pdFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLXJlc2V0LWluaXQuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8UGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQ+O1xuICBsZXQgY29tcDogUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLFxuICAgICAgZGVjbGFyYXRpb25zOiBbUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnRdLFxuICAgICAgcHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdLFxuICAgIH0pXG4gICAgICAub3ZlcnJpZGVUZW1wbGF0ZShQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudCwgJycpXG4gICAgICAuY3JlYXRlQ29tcG9uZW50KFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50KTtcbiAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgfSk7XG5cbiAgaXQoJ3NldHMgZm9jdXMgYWZ0ZXIgdGhlIHZpZXcgaGFzIGJlZW4gaW5pdGlhbGl6ZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGZvY3VzOiBqZXN0LmZuKCksXG4gICAgfTtcbiAgICBjb21wLmVtYWlsID0gbmV3IEVsZW1lbnRSZWYobm9kZSk7XG5cbiAgICBjb21wLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuXG4gICAgZXhwZWN0KG5vZGUuZm9jdXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ25vdGlmaWVzIG9mIHN1Y2Nlc3MgdXBvbiBzdWNjZXNzZnVsIHJlcXVlc3RSZXNldCcsIGluamVjdChbUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlXSwgKHNlcnZpY2U6IFBhc3N3b3JkUmVzZXRJbml0U2VydmljZSkgPT4ge1xuICAgIGplc3Quc3B5T24oc2VydmljZSwgJ3NhdmUnKS5tb2NrUmV0dXJuVmFsdWUob2Yoe30pKTtcbiAgICBjb21wLnJlc2V0UmVxdWVzdEZvcm0ucGF0Y2hWYWx1ZSh7XG4gICAgICBlbWFpbDogJ3VzZXJAZG9tYWluLmNvbScsXG4gICAgfSk7XG5cbiAgICBjb21wLnJlcXVlc3RSZXNldCgpO1xuXG4gICAgZXhwZWN0KHNlcnZpY2Uuc2F2ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VzZXJAZG9tYWluLmNvbScpO1xuICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gIH0pKTtcblxuICBpdCgnbm8gbm90aWZpY2F0aW9uIG9mIHN1Y2Nlc3MgdXBvbiBlcnJvciByZXNwb25zZScsIGluamVjdChbUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlXSwgKHNlcnZpY2U6IFBhc3N3b3JkUmVzZXRJbml0U2VydmljZSkgPT4ge1xuICAgIGplc3Quc3B5T24oc2VydmljZSwgJ3NhdmUnKS5tb2NrUmV0dXJuVmFsdWUoXG4gICAgICB0aHJvd0Vycm9yKHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRhdGE6ICdzb21ldGhpbmcgZWxzZScsXG4gICAgICB9KVxuICAgICk7XG4gICAgY29tcC5yZXNldFJlcXVlc3RGb3JtLnBhdGNoVmFsdWUoe1xuICAgICAgZW1haWw6ICd1c2VyQGRvbWFpbi5jb20nLFxuICAgIH0pO1xuICAgIGNvbXAucmVxdWVzdFJlc2V0KCk7XG5cbiAgICBleHBlY3Qoc2VydmljZS5zYXZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndXNlckBkb21haW4uY29tJyk7XG4gICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gIH0pKTtcbn0pO1xuIl0sInZlcnNpb24iOjN9