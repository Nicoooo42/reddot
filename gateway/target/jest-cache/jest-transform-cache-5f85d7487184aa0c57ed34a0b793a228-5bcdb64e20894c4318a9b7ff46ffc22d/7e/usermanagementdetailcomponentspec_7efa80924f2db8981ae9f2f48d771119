23895c8d02ca0218f63ca53de1a638ac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const authority_constants_1 = require("app/config/authority.constants");
const user_management_model_1 = require("../user-management.model");
const user_management_detail_component_1 = require("./user-management-detail.component");
describe('User Management Detail Component', () => {
    let comp;
    let fixture;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [user_management_detail_component_1.UserManagementDetailComponent],
            providers: [
                {
                    provide: router_1.ActivatedRoute,
                    useValue: {
                        data: rxjs_1.of({ user: new user_management_model_1.User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [authority_constants_1.Authority.USER], 'admin') }),
                    },
                },
            ],
        })
            .overrideTemplate(user_management_detail_component_1.UserManagementDetailComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(user_management_detail_component_1.UserManagementDetailComponent);
        comp = fixture.componentInstance;
    });
    describe('OnInit', () => {
        it('Should call load all on init', () => {
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(comp.user).toEqual(expect.objectContaining({
                id: 123,
                login: 'user',
                firstName: 'first',
                lastName: 'last',
                email: 'first@last.com',
                activated: true,
                langKey: 'en',
                authorities: [authority_constants_1.Authority.USER],
                createdBy: 'admin',
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWRtaW5cXHVzZXItbWFuYWdlbWVudFxcZGV0YWlsXFx1c2VyLW1hbmFnZW1lbnQtZGV0YWlsLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBQ2hGLDRDQUFpRDtBQUNqRCwrQkFBMEI7QUFFMUIsd0VBQTJEO0FBQzNELG9FQUFnRDtBQUVoRCx5RkFBbUY7QUFFbkYsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxJQUFJLElBQW1DLENBQUM7SUFDeEMsSUFBSSxPQUF3RCxDQUFDO0lBRTdELFVBQVUsQ0FDUixzQkFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGdFQUE2QixDQUFDO1lBQzdDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsdUJBQWM7b0JBQ3ZCLFFBQVEsRUFBRTt3QkFDUixJQUFJLEVBQUUsU0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksNEJBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLCtCQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztxQkFDcEg7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyxnRUFBNkIsRUFBRSxFQUFFLENBQUM7YUFDbkQsaUJBQWlCLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxnRUFBNkIsQ0FBQyxDQUFDO1FBQ2pFLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUN0QixFQUFFLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1lBQ3RDLE9BQU87WUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUN2QixNQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RCLEVBQUUsRUFBRSxHQUFHO2dCQUNQLEtBQUssRUFBRSxNQUFNO2dCQUNiLFNBQVMsRUFBRSxPQUFPO2dCQUNsQixRQUFRLEVBQUUsTUFBTTtnQkFDaEIsS0FBSyxFQUFFLGdCQUFnQjtnQkFDdkIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLENBQUMsK0JBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBQzdCLFNBQVMsRUFBRSxPQUFPO2FBQ25CLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmljb2xhc1xcRGVza3RvcFxcdGVzdDZcXGdhdGV3YXlcXHNyY1xcbWFpblxcd2ViYXBwXFxhcHBcXGFkbWluXFx1c2VyLW1hbmFnZW1lbnRcXGRldGFpbFxcdXNlci1tYW5hZ2VtZW50LWRldGFpbC5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQXV0aG9yaXR5IH0gZnJvbSAnYXBwL2NvbmZpZy9hdXRob3JpdHkuY29uc3RhbnRzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyLW1hbmFnZW1lbnQubW9kZWwnO1xuXG5pbXBvcnQgeyBVc2VyTWFuYWdlbWVudERldGFpbENvbXBvbmVudCB9IGZyb20gJy4vdXNlci1tYW5hZ2VtZW50LWRldGFpbC5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnVXNlciBNYW5hZ2VtZW50IERldGFpbCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wOiBVc2VyTWFuYWdlbWVudERldGFpbENvbXBvbmVudDtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8VXNlck1hbmFnZW1lbnREZXRhaWxDb21wb25lbnQ+O1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGRlY2xhcmF0aW9uczogW1VzZXJNYW5hZ2VtZW50RGV0YWlsQ29tcG9uZW50XSxcbiAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICBkYXRhOiBvZih7IHVzZXI6IG5ldyBVc2VyKDEyMywgJ3VzZXInLCAnZmlyc3QnLCAnbGFzdCcsICdmaXJzdEBsYXN0LmNvbScsIHRydWUsICdlbicsIFtBdXRob3JpdHkuVVNFUl0sICdhZG1pbicpIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICAgICAgLm92ZXJyaWRlVGVtcGxhdGUoVXNlck1hbmFnZW1lbnREZXRhaWxDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KVxuICApO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChVc2VyTWFuYWdlbWVudERldGFpbENvbXBvbmVudCk7XG4gICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdPbkluaXQnLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCBjYWxsIGxvYWQgYWxsIG9uIGluaXQnLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLnVzZXIpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBpZDogMTIzLFxuICAgICAgICAgIGxvZ2luOiAndXNlcicsXG4gICAgICAgICAgZmlyc3ROYW1lOiAnZmlyc3QnLFxuICAgICAgICAgIGxhc3ROYW1lOiAnbGFzdCcsXG4gICAgICAgICAgZW1haWw6ICdmaXJzdEBsYXN0LmNvbScsXG4gICAgICAgICAgYWN0aXZhdGVkOiB0cnVlLFxuICAgICAgICAgIGxhbmdLZXk6ICdlbicsXG4gICAgICAgICAgYXV0aG9yaXRpZXM6IFtBdXRob3JpdHkuVVNFUl0sXG4gICAgICAgICAgY3JlYXRlZEJ5OiAnYWRtaW4nLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==