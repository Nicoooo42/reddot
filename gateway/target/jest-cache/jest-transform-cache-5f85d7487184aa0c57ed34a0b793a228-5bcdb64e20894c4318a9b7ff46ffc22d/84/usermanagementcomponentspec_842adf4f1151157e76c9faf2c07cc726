b377d70b124a733cfd36de3a9954e5f9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const user_management_service_1 = require("../service/user-management.service");
const user_management_model_1 = require("../user-management.model");
const account_service_1 = require("app/core/auth/account.service");
const user_management_component_1 = require("./user-management.component");
describe('User Management Component', () => {
    let comp;
    let fixture;
    let service;
    let mockAccountService;
    const data = rxjs_1.of({
        defaultSort: 'id,asc',
    });
    const queryParamMap = rxjs_1.of(jest.requireActual('@angular/router').convertToParamMap({
        page: '1',
        size: '1',
        sort: 'id,desc',
    }));
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [user_management_component_1.UserManagementComponent],
            providers: [router_1.Router, { provide: router_1.ActivatedRoute, useValue: { data, queryParamMap } }, account_service_1.AccountService],
        })
            .overrideTemplate(user_management_component_1.UserManagementComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(user_management_component_1.UserManagementComponent);
        comp = fixture.componentInstance;
        service = testing_1.TestBed.inject(user_management_service_1.UserManagementService);
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
        mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
    });
    describe('OnInit', () => {
        it('Should call load all on init', testing_1.inject([], testing_1.fakeAsync(() => {
            var _a;
            // GIVEN
            const headers = new http_1.HttpHeaders().append('link', 'link;link');
            jest.spyOn(service, 'query').mockReturnValue(rxjs_1.of(new http_1.HttpResponse({
                body: [new user_management_model_1.User(123)],
                headers,
            })));
            // WHEN
            comp.ngOnInit();
            testing_1.tick(); // simulate async
            // THEN
            expect(service.query).toHaveBeenCalled();
            expect((_a = comp.users) === null || _a === void 0 ? void 0 : _a[0]).toEqual(expect.objectContaining({ id: 123 }));
        })));
    });
    describe('setActive', () => {
        it('Should update user and call load all', testing_1.inject([], testing_1.fakeAsync(() => {
            var _a;
            // GIVEN
            const headers = new http_1.HttpHeaders().append('link', 'link;link');
            const user = new user_management_model_1.User(123);
            jest.spyOn(service, 'query').mockReturnValue(rxjs_1.of(new http_1.HttpResponse({
                body: [user],
                headers,
            })));
            jest.spyOn(service, 'update').mockReturnValue(rxjs_1.of(user));
            // WHEN
            comp.setActive(user, true);
            testing_1.tick(); // simulate async
            // THEN
            expect(service.update).toHaveBeenCalledWith(Object.assign(Object.assign({}, user), { activated: true }));
            expect(service.query).toHaveBeenCalled();
            expect((_a = comp.users) === null || _a === void 0 ? void 0 : _a[0]).toEqual(expect.objectContaining({ id: 123 }));
        })));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,