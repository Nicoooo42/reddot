{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\list\\user-management.component.spec.ts","mappings":";;AAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC7B,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AAE3C,mDAAyG;AACzG,+CAAiE;AACjE,0DAAuE;AACvE,4CAAyD;AACzD,+BAA0B;AAE1B,gFAA2E;AAC3E,oEAAgD;AAChD,mEAA+D;AAE/D,2EAAsE;AAEtE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,IAA6B,CAAC;IAClC,IAAI,OAAkD,CAAC;IACvD,IAAI,OAA8B,CAAC;IACnC,IAAI,kBAAkC,CAAC;IACvC,MAAM,IAAI,GAAG,SAAE,CAAC;QACd,WAAW,EAAE,QAAQ;KACtB,CAAC,CAAC;IACH,MAAM,aAAa,GAAG,SAAE,CACtB,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,iBAAiB,CAAC;QACtD,IAAI,EAAE,GAAG;QACT,IAAI,EAAE,GAAG;QACT,IAAI,EAAE,SAAS;KAChB,CAAC,CACH,CAAC;IAEF,UAAU,CACR,sBAAY,CAAC,GAAG,EAAE;QAChB,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;YAClC,YAAY,EAAE,CAAC,mDAAuB,CAAC;YACvC,SAAS,EAAE,CAAC,eAAM,EAAE,EAAE,OAAO,EAAE,uBAAc,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,EAAE,EAAE,gCAAc,CAAC;SACpG,CAAC;aACC,gBAAgB,CAAC,mDAAuB,EAAE,EAAE,CAAC;aAC7C,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,mDAAuB,CAAC,CAAC;QAC3D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACjC,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,+CAAqB,CAAC,CAAC;QAChD,kBAAkB,GAAG,iBAAO,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC;QACpD,kBAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,SAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8BAA8B,EAAE,gBAAM,CACvC,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;;YACb,QAAQ;YACR,MAAM,OAAO,GAAG,IAAI,kBAAW,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAC9D,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,eAAe,CAC1C,SAAE,CACA,IAAI,mBAAY,CAAC;gBACf,IAAI,EAAE,CAAC,IAAI,4BAAI,CAAC,GAAG,CAAC,CAAC;gBACrB,OAAO;aACR,CAAC,CACH,CACF,CAAC;YAEF,OAAO;YACP,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC,CAAC,iBAAiB;YAEzB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzC,MAAM,CAAC,MAAA,IAAI,CAAC,KAAK,0CAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,sCAAsC,EAAE,gBAAM,CAC/C,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;;YACb,QAAQ;YACR,MAAM,OAAO,GAAG,IAAI,kBAAW,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAC9D,MAAM,IAAI,GAAG,IAAI,4BAAI,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,eAAe,CAC1C,SAAE,CACA,IAAI,mBAAY,CAAC;gBACf,IAAI,EAAE,CAAC,IAAI,CAAC;gBACZ,OAAO;aACR,CAAC,CACH,CACF,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAExD,OAAO;YACP,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3B,cAAI,EAAE,CAAC,CAAC,iBAAiB;YAEzB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,iCAAM,IAAI,KAAE,SAAS,EAAE,IAAI,IAAG,CAAC;YAC1E,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzC,MAAM,CAAC,MAAA,IAAI,CAAC,KAAK,0CAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\list\\user-management.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { UserManagementComponent } from './user-management.component';\n\ndescribe('User Management Component', () => {\n  let comp: UserManagementComponent;\n  let fixture: ComponentFixture<UserManagementComponent>;\n  let service: UserManagementService;\n  let mockAccountService: AccountService;\n  const data = of({\n    defaultSort: 'id,asc',\n  });\n  const queryParamMap = of(\n    jest.requireActual('@angular/router').convertToParamMap({\n      page: '1',\n      size: '1',\n      sort: 'id,desc',\n    })\n  );\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [UserManagementComponent],\n        providers: [Router, { provide: ActivatedRoute, useValue: { data, queryParamMap } }, AccountService],\n      })\n        .overrideTemplate(UserManagementComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(UserManagementService);\n    mockAccountService = TestBed.inject(AccountService);\n    mockAccountService.identity = jest.fn(() => of(null));\n  });\n\n  describe('OnInit', () => {\n    it('Should call load all on init', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const headers = new HttpHeaders().append('link', 'link;link');\n        jest.spyOn(service, 'query').mockReturnValue(\n          of(\n            new HttpResponse({\n              body: [new User(123)],\n              headers,\n            })\n          )\n        );\n\n        // WHEN\n        comp.ngOnInit();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.query).toHaveBeenCalled();\n        expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n      })\n    ));\n  });\n\n  describe('setActive', () => {\n    it('Should update user and call load all', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const headers = new HttpHeaders().append('link', 'link;link');\n        const user = new User(123);\n        jest.spyOn(service, 'query').mockReturnValue(\n          of(\n            new HttpResponse({\n              body: [user],\n              headers,\n            })\n          )\n        );\n        jest.spyOn(service, 'update').mockReturnValue(of(user));\n\n        // WHEN\n        comp.setActive(user, true);\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith({ ...user, activated: true });\n        expect(service.query).toHaveBeenCalled();\n        expect(comp.users?.[0]).toEqual(expect.objectContaining({ id: 123 }));\n      })\n    ));\n  });\n});\n"],"version":3}