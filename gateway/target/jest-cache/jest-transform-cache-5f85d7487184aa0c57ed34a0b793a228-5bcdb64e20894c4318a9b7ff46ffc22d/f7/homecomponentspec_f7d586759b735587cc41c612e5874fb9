3161b53fc8c27373871e8266fd7a7dd8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
jest.mock('@angular/router');
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const home_component_1 = require("./home.component");
describe('Home Component', () => {
    let comp;
    let fixture;
    let mockAccountService;
    let mockRouter;
    const account = {
        activated: true,
        authorities: [],
        email: '',
        firstName: null,
        langKey: '',
        lastName: null,
        login: 'login',
        imageUrl: null,
    };
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [home_component_1.HomeComponent],
            providers: [account_service_1.AccountService, router_1.Router],
        })
            .overrideTemplate(home_component_1.HomeComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(home_component_1.HomeComponent);
        comp = fixture.componentInstance;
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
        mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
        mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
        mockRouter = testing_1.TestBed.inject(router_1.Router);
    });
    describe('ngOnInit', () => {
        it('Should synchronize account variable with current account', () => {
            // GIVEN
            const authenticationState = new rxjs_1.Subject();
            mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(comp.account).toBeNull();
            // WHEN
            authenticationState.next(account);
            // THEN
            expect(comp.account).toEqual(account);
            // WHEN
            authenticationState.next(null);
            // THEN
            expect(comp.account).toBeNull();
        });
    });
    describe('login', () => {
        it('Should navigate to /login on login', () => {
            // WHEN
            comp.login();
            // THEN
            expect(mockRouter.navigate).toHaveBeenCalledWith(['/login']);
        });
    });
    describe('ngOnDestroy', () => {
        it('Should destroy authentication state subscription on component destroy', () => {
            // GIVEN
            const authenticationState = new rxjs_1.Subject();
            mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(comp.account).toBeNull();
            // WHEN
            authenticationState.next(account);
            // THEN
            expect(comp.account).toEqual(account);
            // WHEN
            comp.ngOnDestroy();
            authenticationState.next(null);
            // THEN
            expect(comp.account).toEqual(account);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcaG9tZVxcaG9tZS5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFN0IsbURBQWdGO0FBQ2hGLDRDQUF5QztBQUN6QywrQkFBbUM7QUFFbkMsbUVBQStEO0FBRy9ELHFEQUFpRDtBQUVqRCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksSUFBbUIsQ0FBQztJQUN4QixJQUFJLE9BQXdDLENBQUM7SUFDN0MsSUFBSSxrQkFBa0MsQ0FBQztJQUN2QyxJQUFJLFVBQWtCLENBQUM7SUFDdkIsTUFBTSxPQUFPLEdBQVk7UUFDdkIsU0FBUyxFQUFFLElBQUk7UUFDZixXQUFXLEVBQUUsRUFBRTtRQUNmLEtBQUssRUFBRSxFQUFFO1FBQ1QsU0FBUyxFQUFFLElBQUk7UUFDZixPQUFPLEVBQUUsRUFBRTtRQUNYLFFBQVEsRUFBRSxJQUFJO1FBQ2QsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUM7SUFFRixVQUFVLENBQ1Isc0JBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixZQUFZLEVBQUUsQ0FBQyw4QkFBYSxDQUFDO1lBQzdCLFNBQVMsRUFBRSxDQUFDLGdDQUFjLEVBQUUsZUFBTSxDQUFDO1NBQ3BDLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyw4QkFBYSxFQUFFLEVBQUUsQ0FBQzthQUNuQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLDhCQUFhLENBQUMs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LE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcaG9tZVxcaG9tZS5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5zZXJ2aWNlJyk7XG5qZXN0Lm1vY2soJ0Bhbmd1bGFyL3JvdXRlcicpO1xuXG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB3YWl0Rm9yQXN5bmMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5tb2RlbCc7XG5cbmltcG9ydCB7IEhvbWVDb21wb25lbnQgfSBmcm9tICcuL2hvbWUuY29tcG9uZW50JztcblxuZGVzY3JpYmUoJ0hvbWUgQ29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgY29tcDogSG9tZUNvbXBvbmVudDtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8SG9tZUNvbXBvbmVudD47XG4gIGxldCBtb2NrQWNjb3VudFNlcnZpY2U6IEFjY291bnRTZXJ2aWNlO1xuICBsZXQgbW9ja1JvdXRlcjogUm91dGVyO1xuICBjb25zdCBhY2NvdW50OiBBY2NvdW50ID0ge1xuICAgIGFjdGl2YXRlZDogdHJ1ZSxcbiAgICBhdXRob3JpdGllczogW10sXG4gICAgZW1haWw6ICcnLFxuICAgIGZpcnN0TmFtZTogbnVsbCxcbiAgICBsYW5nS2V5OiAnJyxcbiAgICBsYXN0TmFtZTogbnVsbCxcbiAgICBsb2dpbjogJ2xvZ2luJyxcbiAgICBpbWFnZVVybDogbnVsbCxcbiAgfTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBkZWNsYXJhdGlvbnM6IFtIb21lQ29tcG9uZW50XSxcbiAgICAgICAgcHJvdmlkZXJzOiBbQWNjb3VudFNlcnZpY2UsIFJvdXRlcl0sXG4gICAgICB9KVxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShIb21lQ29tcG9uZW50LCAnJylcbiAgICAgICAgLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgfSlcbiAgKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoSG9tZUNvbXBvbmVudCk7XG4gICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgbW9ja0FjY291bnRTZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoQWNjb3VudFNlcnZpY2UpO1xuICAgIG1vY2tBY2NvdW50U2VydmljZS5pZGVudGl0eSA9IGplc3QuZm4oKCkgPT4gb2YobnVsbCkpO1xuICAgIG1vY2tBY2NvdW50U2VydmljZS5nZXRBdXRoZW50aWNhdGlvblN0YXRlID0gamVzdC5mbigoKSA9PiBvZihudWxsKSk7XG4gICAgbW9ja1JvdXRlciA9IFRlc3RCZWQuaW5qZWN0KFJvdXRlcik7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCduZ09uSW5pdCcsICgpID0+IHtcbiAgICBpdCgnU2hvdWxkIHN5bmNocm9uaXplIGFjY291bnQgdmFyaWFibGUgd2l0aCBjdXJyZW50IGFjY291bnQnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgYXV0aGVudGljYXRpb25TdGF0ZSA9IG5ldyBTdWJqZWN0PEFjY291bnQgfCBudWxsPigpO1xuICAgICAgbW9ja0FjY291bnRTZXJ2aWNlLmdldEF1dGhlbnRpY2F0aW9uU3RhdGUgPSBqZXN0LmZuKCgpID0+IGF1dGhlbnRpY2F0aW9uU3RhdGUuYXNPYnNlcnZhYmxlKCkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmFjY291bnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUubmV4dChhY2NvdW50KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuYWNjb3VudCkudG9FcXVhbChhY2NvdW50KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYXV0aGVudGljYXRpb25TdGF0ZS5uZXh0KG51bGwpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5hY2NvdW50KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnbG9naW4nLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCBuYXZpZ2F0ZSB0byAvbG9naW4gb24gbG9naW4nLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLmxvZ2luKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChtb2NrUm91dGVyLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJy9sb2dpbiddKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25nT25EZXN0cm95JywgKCkgPT4ge1xuICAgIGl0KCdTaG91bGQgZGVzdHJveSBhdXRoZW50aWNhdGlvbiBzdGF0ZSBzdWJzY3JpcHRpb24gb24gY29tcG9uZW50IGRlc3Ryb3knLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgYXV0aGVudGljYXRpb25TdGF0ZSA9IG5ldyBTdWJqZWN0PEFjY291bnQgfCBudWxsPigpO1xuICAgICAgbW9ja0FjY291bnRTZXJ2aWNlLmdldEF1dGhlbnRpY2F0aW9uU3RhdGUgPSBqZXN0LmZuKCgpID0+IGF1dGhlbnRpY2F0aW9uU3RhdGUuYXNPYnNlcnZhYmxlKCkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmFjY291bnQpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUubmV4dChhY2NvdW50KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuYWNjb3VudCkudG9FcXVhbChhY2NvdW50KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5uZ09uRGVzdHJveSgpO1xuICAgICAgYXV0aGVudGljYXRpb25TdGF0ZS5uZXh0KG51bGwpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5hY2NvdW50KS50b0VxdWFsKGFjY291bnQpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9