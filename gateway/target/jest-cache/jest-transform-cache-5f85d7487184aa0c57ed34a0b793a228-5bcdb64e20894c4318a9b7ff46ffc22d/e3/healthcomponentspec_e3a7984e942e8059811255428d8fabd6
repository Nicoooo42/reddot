e749015f4bf2793cef237f3f962724c8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const rxjs_1 = require("rxjs");
const health_component_1 = require("./health.component");
const health_service_1 = require("./health.service");
describe('HealthComponent', () => {
    let comp;
    let fixture;
    let service;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            declarations: [health_component_1.HealthComponent],
        })
            .overrideTemplate(health_component_1.HealthComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(health_component_1.HealthComponent);
        comp = fixture.componentInstance;
        service = testing_1.TestBed.inject(health_service_1.HealthService);
    });
    describe('getBadgeClass', () => {
        it('should get badge class', () => {
            const upBadgeClass = comp.getBadgeClass('UP');
            const downBadgeClass = comp.getBadgeClass('DOWN');
            expect(upBadgeClass).toEqual('badge-success');
            expect(downBadgeClass).toEqual('badge-danger');
        });
    });
    describe('refresh', () => {
        it('should call refresh on init', () => {
            // GIVEN
            const health = { status: 'UP', components: { mail: { status: 'UP', details: { mailDetail: 'mail' } } } };
            jest.spyOn(service, 'checkHealth').mockReturnValue(rxjs_1.of(health));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(service.checkHealth).toHaveBeenCalled();
            expect(comp.health).toEqual(health);
        });
        it('should handle a 503 on refreshing health data', () => {
            // GIVEN
            const health = { status: 'DOWN', components: { mail: { status: 'DOWN' } } };
            jest.spyOn(service, 'checkHealth').mockReturnValue(rxjs_1.throwError(new http_1.HttpErrorResponse({ status: 503, error: health })));
            // WHEN
            comp.refresh();
            // THEN
            expect(service.checkHealth).toHaveBeenCalled();
            expect(comp.health).toEqual(health);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxOaWNvbGFzXFxEZXNrdG9wXFx0ZXN0NlxcZ2F0ZXdheVxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcYWRtaW5cXGhlYWx0aFxcaGVhbHRoLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWdGO0FBQ2hGLCtDQUF5RDtBQUN6RCwwREFBdUU7QUFDdkUsK0JBQXNDO0FBRXRDLHlEQUFxRDtBQUNyRCxxREFBaUQ7QUFHakQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLElBQXFCLENBQUM7SUFDMUIsSUFBSSxPQUEwQyxDQUFDO0lBQy9DLElBQUksT0FBc0IsQ0FBQztJQUUzQixVQUFVLENBQ1Isc0JBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQztZQUNsQyxZQUFZLEVBQUUsQ0FBQyxrQ0FBZSxDQUFDO1NBQ2hDLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyxrQ0FBZSxFQUFFLEVBQUUsQ0FBQzthQUNyQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGtDQUFlLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pDLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUM3QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1lBQ2hDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDckMsUUFBUTtZQUNSLE1BQU0sTUFBTSxHQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNqSCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFL0QsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1lBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtZQUN2RCxRQUFRO1lBQ1IsTUFBTSxNQUFNLEdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDcEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDLGlCQUFVLENBQUMsSUFBSSx3QkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXRILE9BQU87WUFDUCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFZixPQUFPO1lBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXE5pY29sYXNcXERlc2t0b3BcXHRlc3Q2XFxnYXRld2F5XFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxhZG1pblxcaGVhbHRoXFxoZWFsdGguY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgd2FpdEZvckFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEhlYWx0aENvbXBvbmVudCB9IGZyb20gJy4vaGVhbHRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIZWFsdGhTZXJ2aWNlIH0gZnJvbSAnLi9oZWFsdGguc2VydmljZSc7XG5pbXBvcnQgeyBIZWFsdGggfSBmcm9tICcuL2hlYWx0aC5tb2RlbCc7XG5cbmRlc2NyaWJlKCdIZWFsdGhDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wOiBIZWFsdGhDb21wb25lbnQ7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEhlYWx0aENvbXBvbmVudD47XG4gIGxldCBzZXJ2aWNlOiBIZWFsdGhTZXJ2aWNlO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0hlYWx0aENvbXBvbmVudF0sXG4gICAgICB9KVxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShIZWFsdGhDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KVxuICApO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChIZWFsdGhDb21wb25lbnQpO1xuICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChIZWFsdGhTZXJ2aWNlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEJhZGdlQ2xhc3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgYmFkZ2UgY2xhc3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCB1cEJhZGdlQ2xhc3MgPSBjb21wLmdldEJhZGdlQ2xhc3MoJ1VQJyk7XG4gICAgICBjb25zdCBkb3duQmFkZ2VDbGFzcyA9IGNvbXAuZ2V0QmFkZ2VDbGFzcygnRE9XTicpO1xuICAgICAgZXhwZWN0KHVwQmFkZ2VDbGFzcykudG9FcXVhbCgnYmFkZ2Utc3VjY2VzcycpO1xuICAgICAgZXhwZWN0KGRvd25CYWRnZUNsYXNzKS50b0VxdWFsKCdiYWRnZS1kYW5nZXInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlZnJlc2gnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIHJlZnJlc2ggb24gaW5pdCcsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBoZWFsdGg6IEhlYWx0aCA9IHsgc3RhdHVzOiAnVVAnLCBjb21wb25lbnRzOiB7IG1haWw6IHsgc3RhdHVzOiAnVVAnLCBkZXRhaWxzOiB7IG1haWxEZXRhaWw6ICdtYWlsJyB9IH0gfSB9O1xuICAgICAgamVzdC5zcHlPbihzZXJ2aWNlLCAnY2hlY2tIZWFsdGgnKS5tb2NrUmV0dXJuVmFsdWUob2YoaGVhbHRoKSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbXAubmdPbkluaXQoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHNlcnZpY2UuY2hlY2tIZWFsdGgpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChjb21wLmhlYWx0aCkudG9FcXVhbChoZWFsdGgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYSA1MDMgb24gcmVmcmVzaGluZyBoZWFsdGggZGF0YScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBoZWFsdGg6IEhlYWx0aCA9IHsgc3RhdHVzOiAnRE9XTicsIGNvbXBvbmVudHM6IHsgbWFpbDogeyBzdGF0dXM6ICdET1dOJyB9IH0gfTtcbiAgICAgIGplc3Quc3B5T24oc2VydmljZSwgJ2NoZWNrSGVhbHRoJykubW9ja1JldHVyblZhbHVlKHRocm93RXJyb3IobmV3IEh0dHBFcnJvclJlc3BvbnNlKHsgc3RhdHVzOiA1MDMsIGVycm9yOiBoZWFsdGggfSkpKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5yZWZyZXNoKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLmNoZWNrSGVhbHRoKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoY29tcC5oZWFsdGgpLnRvRXF1YWwoaGVhbHRoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==