{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\health\\health.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of, throwError } from 'rxjs';\n\nimport { HealthComponent } from './health.component';\nimport { HealthService } from './health.service';\nimport { Health } from './health.model';\n\ndescribe('HealthComponent', () => {\n  let comp: HealthComponent;\n  let fixture: ComponentFixture<HealthComponent>;\n  let service: HealthService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [HealthComponent],\n      })\n        .overrideTemplate(HealthComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(HealthComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(HealthService);\n  });\n\n  describe('getBadgeClass', () => {\n    it('should get badge class', () => {\n      const upBadgeClass = comp.getBadgeClass('UP');\n      const downBadgeClass = comp.getBadgeClass('DOWN');\n      expect(upBadgeClass).toEqual('badge-success');\n      expect(downBadgeClass).toEqual('badge-danger');\n    });\n  });\n\n  describe('refresh', () => {\n    it('should call refresh on init', () => {\n      // GIVEN\n      const health: Health = { status: 'UP', components: { mail: { status: 'UP', details: { mailDetail: 'mail' } } } };\n      jest.spyOn(service, 'checkHealth').mockReturnValue(of(health));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(service.checkHealth).toHaveBeenCalled();\n      expect(comp.health).toEqual(health);\n    });\n\n    it('should handle a 503 on refreshing health data', () => {\n      // GIVEN\n      const health: Health = { status: 'DOWN', components: { mail: { status: 'DOWN' } } };\n      jest.spyOn(service, 'checkHealth').mockReturnValue(throwError(new HttpErrorResponse({ status: 503, error: health })));\n\n      // WHEN\n      comp.refresh();\n\n      // THEN\n      expect(service.checkHealth).toHaveBeenCalled();\n      expect(comp.health).toEqual(health);\n    });\n  });\n});\n"],"version":3}