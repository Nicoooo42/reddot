{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\service\\user-management.service.spec.ts","mappings":";;AAAA,mDAAgD;AAEhD,0DAA8F;AAE9F,wEAA2D;AAC3D,oEAAgD;AAEhD,uEAAkE;AAElE,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAA8B,CAAC;IACnC,IAAI,QAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;SACnC,CAAC,CAAC;QAEH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,+CAAqB,CAAC,CAAC;QAChD,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,IAAI,cAAkC,CAAC;YAEvC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;gBACxC,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,IAAI,4BAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,IAAI,cAAc,GAAa,EAAE,CAAC;YAElC,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;gBAC5C,cAAc,GAAG,WAAW,CAAC;YAC/B,CAAC,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAElD,GAAG,CAAC,KAAK,CAAC,CAAC,+BAAS,CAAC,IAAI,EAAE,+BAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,+BAAS,CAAC,IAAI,EAAE,+BAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,IAAI,cAAc,GAAG,CAAC,CAAC;YAEvB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;gBAC7B,KAAK,EAAE,CAAC,KAAwB,EAAE,EAAE,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC;aACrE,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,GAAG,CAAC,KAAK,CAAC,4BAA4B,EAAE;gBACtC,MAAM,EAAE,GAAG;gBACX,UAAU,EAAE,aAAa;aAC1B,CAAC,CAAC;YACH,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\service\\user-management.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { User } from '../user-management.model';\n\nimport { UserManagementService } from './user-management.service';\n\ndescribe('User Service', () => {\n  let service: UserManagementService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n    });\n\n    service = TestBed.inject(UserManagementService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  describe('Service methods', () => {\n    it('should return User', () => {\n      let expectedResult: string | undefined;\n\n      service.find('user').subscribe(received => {\n        expectedResult = received.login;\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush(new User(123, 'user'));\n      expect(expectedResult).toEqual('user');\n    });\n\n    it('should return Authorities', () => {\n      let expectedResult: string[] = [];\n\n      service.authorities().subscribe(authorities => {\n        expectedResult = authorities;\n      });\n      const req = httpMock.expectOne({ method: 'GET' });\n\n      req.flush([Authority.USER, Authority.ADMIN]);\n      expect(expectedResult).toEqual([Authority.USER, Authority.ADMIN]);\n    });\n\n    it('should propagate not found response', () => {\n      let expectedResult = 0;\n\n      service.find('user').subscribe({\n        error: (error: HttpErrorResponse) => (expectedResult = error.status),\n      });\n\n      const req = httpMock.expectOne({ method: 'GET' });\n      req.flush('Invalid request parameters', {\n        status: 404,\n        statusText: 'Bad Request',\n      });\n      expect(expectedResult).toEqual(404);\n    });\n  });\n});\n"],"version":3}