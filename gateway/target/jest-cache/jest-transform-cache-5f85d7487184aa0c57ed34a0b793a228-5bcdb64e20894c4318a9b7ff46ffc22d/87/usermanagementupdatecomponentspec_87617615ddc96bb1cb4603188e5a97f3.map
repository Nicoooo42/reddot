{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\update\\user-management-update.component.spec.ts","mappings":";;AAAA,mDAAyG;AACzG,0DAAuE;AACvE,0CAA6C;AAC7C,4CAAiD;AACjD,+BAA0B;AAE1B,wEAA2D;AAC3D,gFAA2E;AAC3E,oEAAgD;AAEhD,yFAAmF;AAEnF,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,IAAI,IAAmC,CAAC;IACxC,IAAI,OAAwD,CAAC;IAC7D,IAAI,OAA8B,CAAC;IAEnC,UAAU,CACR,sBAAY,CAAC,GAAG,EAAE;QAChB,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;YAClC,YAAY,EAAE,CAAC,gEAA6B,CAAC;YAC7C,SAAS,EAAE;gBACT,mBAAW;gBACX;oBACE,OAAO,EAAE,uBAAc;oBACvB,QAAQ,EAAE;wBACR,IAAI,EAAE,SAAE,CAAC,EAAE,IAAI,EAAE,IAAI,4BAAI,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,+BAAS,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC;qBACpH;iBACF;aACF;SACF,CAAC;aACC,gBAAgB,CAAC,gEAA6B,EAAE,EAAE,CAAC;aACnD,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gEAA6B,CAAC,CAAC;QACjE,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACjC,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,+CAAqB,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8CAA8C,EAAE,gBAAM,CACvD,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;YACb,QAAQ;YACR,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEjE,OAAO;YACP,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,sDAAsD,EAAE,gBAAM,CAC/D,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;YACb,QAAQ;YACR,MAAM,MAAM,GAAG,IAAI,4BAAI,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;YACnB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,OAAO;YACP,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;YAEzB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CACH,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,gBAAM,CAC1D,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;YACb,QAAQ;YACR,MAAM,MAAM,GAAG,IAAI,4BAAI,EAAE,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,SAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;YACnB,OAAO;YACP,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;YAEzB,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\admin\\user-management\\update\\user-management-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\n\nimport { UserManagementUpdateComponent } from './user-management-update.component';\n\ndescribe('User Management Update Component', () => {\n  let comp: UserManagementUpdateComponent;\n  let fixture: ComponentFixture<UserManagementUpdateComponent>;\n  let service: UserManagementService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [UserManagementUpdateComponent],\n        providers: [\n          FormBuilder,\n          {\n            provide: ActivatedRoute,\n            useValue: {\n              data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(UserManagementUpdateComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserManagementUpdateComponent);\n    comp = fixture.componentInstance;\n    service = TestBed.inject(UserManagementService);\n  });\n\n  describe('OnInit', () => {\n    it('Should load authorities and language on init', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        jest.spyOn(service, 'authorities').mockReturnValue(of(['USER']));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.authorities).toHaveBeenCalled();\n        expect(comp.authorities).toEqual(['USER']);\n      })\n    ));\n  });\n\n  describe('save', () => {\n    it('Should call update service on save for existing user', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const entity = new User(123);\n        jest.spyOn(service, 'update').mockReturnValue(of(entity));\n        comp.user = entity;\n        comp.editForm.patchValue({ id: entity.id });\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      })\n    ));\n\n    it('Should call create service on save for new user', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const entity = new User();\n        jest.spyOn(service, 'create').mockReturnValue(of(entity));\n        comp.user = entity;\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.create).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      })\n    ));\n  });\n});\n"],"version":3}