{"file":"C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Nicolas\\Desktop\\test6\\gateway\\src\\main\\webapp\\app\\login\\login.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\njest.mock('app/login/login.service');\n\nimport { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { Router, Navigation } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { LoginService } from './login.service';\nimport { LoginComponent } from './login.component';\n\ndescribe('LoginComponent', () => {\n  let comp: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let mockRouter: Router;\n  let mockAccountService: AccountService;\n  let mockLoginService: LoginService;\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [LoginComponent],\n        providers: [\n          FormBuilder,\n          AccountService,\n          Router,\n          {\n            provide: LoginService,\n            useValue: {\n              login: jest.fn(() => of({})),\n            },\n          },\n        ],\n      })\n        .overrideTemplate(LoginComponent, '')\n        .compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    comp = fixture.componentInstance;\n    mockRouter = TestBed.inject(Router);\n    mockLoginService = TestBed.inject(LoginService);\n    mockAccountService = TestBed.inject(AccountService);\n  });\n\n  describe('ngOnInit', () => {\n    it('Should call accountService.identity on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.identity).toHaveBeenCalled();\n    });\n\n    it('Should call accountService.isAuthenticated on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.isAuthenticated).toHaveBeenCalled();\n    });\n\n    it('should navigate to home page on Init if authenticated=true', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n      mockAccountService.isAuthenticated = () => true;\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n    });\n  });\n\n  describe('ngAfterViewInit', () => {\n    it('shoult set focus to username input after the view has been initialized', () => {\n      // GIVEN\n      const node = {\n        focus: jest.fn(),\n      };\n      comp.username = new ElementRef(node);\n\n      // WHEN\n      comp.ngAfterViewInit();\n\n      // THEN\n      expect(node.focus).toHaveBeenCalled();\n    });\n  });\n\n  describe('login', () => {\n    it('should authenticate the user and navigate to home page', () => {\n      // GIVEN\n      const credentials = {\n        username: 'admin',\n        password: 'admin',\n        rememberMe: true,\n      };\n\n      comp.loginForm.patchValue({\n        username: 'admin',\n        password: 'admin',\n        rememberMe: true,\n      });\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(false);\n      expect(mockLoginService.login).toHaveBeenCalledWith(credentials);\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n    });\n\n    it('should authenticate the user but not navigate to home page if authentication process is already routing to cached url from localstorage', () => {\n      // GIVEN\n      jest.spyOn(mockRouter, 'getCurrentNavigation').mockReturnValue({} as Navigation);\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(false);\n      expect(mockRouter.navigate).not.toHaveBeenCalled();\n    });\n\n    it('should stay on login form and show error message on login error', () => {\n      // GIVEN\n      mockLoginService.login = jest.fn(() => throwError({}));\n\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(comp.authenticationError).toEqual(true);\n      expect(mockRouter.navigate).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}