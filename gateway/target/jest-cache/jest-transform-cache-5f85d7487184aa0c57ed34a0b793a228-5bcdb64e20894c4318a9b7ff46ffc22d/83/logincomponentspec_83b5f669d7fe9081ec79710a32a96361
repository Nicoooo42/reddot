96c1a22023faac65175c159a8a8ef377
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
jest.mock('app/core/auth/account.service');
jest.mock('app/login/login.service');
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const login_service_1 = require("./login.service");
const login_component_1 = require("./login.component");
describe('LoginComponent', () => {
    let comp;
    let fixture;
    let mockRouter;
    let mockAccountService;
    let mockLoginService;
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [login_component_1.LoginComponent],
            providers: [
                forms_1.FormBuilder,
                account_service_1.AccountService,
                router_1.Router,
                {
                    provide: login_service_1.LoginService,
                    useValue: {
                        login: jest.fn(() => rxjs_1.of({})),
                    },
                },
            ],
        })
            .overrideTemplate(login_component_1.LoginComponent, '')
            .compileComponents();
    }));
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(login_component_1.LoginComponent);
        comp = fixture.componentInstance;
        mockRouter = testing_1.TestBed.inject(router_1.Router);
        mockLoginService = testing_1.TestBed.inject(login_service_1.LoginService);
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
    });
    describe('ngOnInit', () => {
        it('Should call accountService.identity on Init', () => {
            // GIVEN
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(mockAccountService.identity).toHaveBeenCalled();
        });
        it('Should call accountService.isAuthenticated on Init', () => {
            // GIVEN
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(mockAccountService.isAuthenticated).toHaveBeenCalled();
        });
        it('should navigate to home page on Init if authenticated=true', () => {
            // GIVEN
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
            mockAccountService.isAuthenticated = () => true;
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(mockRouter.navigate).toHaveBeenCalledWith(['']);
        });
    });
    describe('ngAfterViewInit', () => {
        it('shoult set focus to username input after the view has been initialized', () => {
            // GIVEN
            const node = {
                focus: jest.fn(),
            };
            comp.username = new core_1.ElementRef(node);
            // WHEN
            comp.ngAfterViewInit();
            // THEN
            expect(node.focus).toHaveBeenCalled();
        });
    });
    describe('login', () => {
        it('should authenticate the user and navigate to home page', () => {
            // GIVEN
            const credentials = {
                username: 'admin',
                password: 'admin',
                rememberMe: true,
            };
            comp.loginForm.patchValue({
                username: 'admin',
                password: 'admin',
                rememberMe: true,
            });
            // WHEN
            comp.login();
            // THEN
            expect(comp.authenticationError).toEqual(false);
            expect(mockLoginService.login).toHaveBeenCalledWith(credentials);
            expect(mockRouter.navigate).toHaveBeenCalledWith(['']);
        });
        it('should authenticate the user but not navigate to home page if authentication process is already routing to cached url from localstorage', () => {
            // GIVEN
            jest.spyOn(mockRouter, 'getCurrentNavigation').mockReturnValue({});
            // WHEN
            comp.login();
            // THEN
            expect(comp.authenticationError).toEqual(false);
            expect(mockRouter.navigate).not.toHaveBeenCalled();
        });
        it('should stay on login form and show error message on login error', () => {
            // GIVEN
            mockLoginService.login = jest.fn(() => rxjs_1.throwError({}));
            // WHEN
            comp.login();
            // THEN
            expect(comp.authenticationError).toEqual(true);
            expect(mockRouter.navigate).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,